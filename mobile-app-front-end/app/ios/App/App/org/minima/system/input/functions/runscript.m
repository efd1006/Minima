//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/runscript.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusUser.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/runscript.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputFunctionsrunscript

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionsrunscript_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  NSString *script = IOSObjectArray_Get(nil_chk(zInput), 1);
  jint len = zInput->size_;
  NSString *sigs = @"";
  NSString *state = @"";
  NSString *prevstate = @"";
  NSString *globals = @"";
  NSString *outputs = @"";
  NSString *scripts = @"";
  for (jint i = 2; i < len; i++) {
    NSString *param = IOSObjectArray_Get(zInput, i);
    if ([((NSString *) nil_chk(param)) java_hasPrefix:@"sigs:"]) {
      sigs = [param java_substring:5];
    }
    else if ([param java_hasPrefix:@"state:"]) {
      state = [param java_substring:6];
    }
    else if ([param java_hasPrefix:@"prevstate:"]) {
      prevstate = [param java_substring:10];
    }
    else if ([param java_hasPrefix:@"globals:"]) {
      globals = [param java_substring:8];
    }
    else if ([param java_hasPrefix:@"outputs:"]) {
      outputs = [param java_substring:8];
    }
    else if ([param java_hasPrefix:@"scripts:"]) {
      scripts = [param java_substring:8];
    }
  }
  OrgMinimaUtilsMessagesMessage *rscript = [self getResponseMessageWithNSString:OrgMinimaSystemBrainsConsensusUser_CONSENSUS_RUNSCRIPT];
  [((OrgMinimaUtilsMessagesMessage *) nil_chk(rscript)) addStringWithNSString:@"script" withNSString:script];
  [rscript addStringWithNSString:@"sigs" withNSString:sigs];
  [rscript addStringWithNSString:@"state" withNSString:state];
  [rscript addStringWithNSString:@"prevstate" withNSString:prevstate];
  [rscript addStringWithNSString:@"globals" withNSString:globals];
  [rscript addStringWithNSString:@"outputs" withNSString:outputs];
  [rscript addStringWithNSString:@"scripts" withNSString:scripts];
  [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:rscript];
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return create_OrgMinimaSystemInputFunctionsrunscript_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionsrunscript = { "runscript", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionsrunscript;
}

@end

void OrgMinimaSystemInputFunctionsrunscript_init(OrgMinimaSystemInputFunctionsrunscript *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"runscript");
  [self setHelpWithNSString:@"[script] {sigs:..} {state:..} {prevstate:..} {globals:..} {outputs:..} (scripts:..)" withNSString:@"" withNSString:@"Test a script and give all the relevant data as # seperated : value key pairs.."];
}

OrgMinimaSystemInputFunctionsrunscript *new_OrgMinimaSystemInputFunctionsrunscript_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionsrunscript, init)
}

OrgMinimaSystemInputFunctionsrunscript *create_OrgMinimaSystemInputFunctionsrunscript_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionsrunscript, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionsrunscript)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionsrunscript, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
