//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/rpc/RPCHandler.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/Socket.h"
#include "java/net/URLDecoder.h"
#include "java/util/Date.h"
#include "java/util/StringTokenizer.h"
#include "org/minima/system/input/InputHandler.h"
#include "org/minima/system/input/InputMessage.h"
#include "org/minima/system/network/rpc/RPCHandler.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaSystemNetworkRpcRPCHandler

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)zSocket
 withOrgMinimaSystemInputInputHandler:(OrgMinimaSystemInputInputHandler *)zInput {
  OrgMinimaSystemNetworkRpcRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_(self, zSocket, zInput);
  return self;
}

- (void)run {
  JavaIoBufferedReader *in = nil;
  JavaIoPrintWriter *out = nil;
  NSString *fileRequested = nil;
  @try {
    in = new_JavaIoBufferedReader_initWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getInputStream]));
    out = new_JavaIoPrintWriter_initWithJavaIoOutputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getOutputStream]);
    NSString *input = [in readLine];
    JavaUtilStringTokenizer *parse = new_JavaUtilStringTokenizer_initWithNSString_(input);
    NSString *method = [((NSString *) nil_chk([parse nextToken])) uppercaseString];
    fileRequested = [parse nextToken];
    if ([((NSString *) nil_chk(method)) isEqual:@"GET"]) {
      NSString *function = [NSString stringWithString:fileRequested];
      function = [((NSString *) nil_chk(JavaNetURLDecoder_decodeWithNSString_withNSString_(function, @"UTF-8"))) java_trim];
      if ([((NSString *) nil_chk(function)) java_hasPrefix:@"/"]) {
        function = [function java_substring:1];
      }
      jboolean multi = false;
      if ([((NSString *) nil_chk(function)) java_indexOfString:@";"] != -1) {
        multi = true;
      }
      NSString *result = @"";
      if (!multi) {
        OrgMinimaUtilsResponseStream *response = new_OrgMinimaUtilsResponseStream_init();
        if (![function isEqual:@""]) {
          OrgMinimaSystemInputInputMessage *inmsg = new_OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(function, response);
          [((OrgMinimaSystemInputInputHandler *) nil_chk(mInputHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:inmsg];
          if (![((NSString *) nil_chk([((NSString *) nil_chk(input)) lowercaseString])) isEqual:@"quit"]) {
            [response waitToFinish];
          }
        }
        result = [response getResponse];
      }
      else {
        OrgMinimaUtilsJsonJSONArray *responses = new_OrgMinimaUtilsJsonJSONArray_init();
        JavaUtilStringTokenizer *functions = new_JavaUtilStringTokenizer_initWithNSString_withNSString_(function, @";");
        jboolean allok = true;
        while (allok && [functions hasMoreElements]) {
          NSString *func = [((NSString *) nil_chk([functions nextToken])) java_trim];
          OrgMinimaUtilsResponseStream *response = new_OrgMinimaUtilsResponseStream_init();
          if (![((NSString *) nil_chk(func)) isEqual:@""]) {
            OrgMinimaSystemInputInputMessage *inmsg = new_OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(func, response);
            [((OrgMinimaSystemInputInputHandler *) nil_chk(mInputHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:inmsg];
            if (![((NSString *) nil_chk([((NSString *) nil_chk(input)) lowercaseString])) isEqual:@"quit"]) {
              [response waitToFinish];
            }
            OrgMinimaUtilsJsonJSONObject *resp = [response getFinalJSON];
            if ([((OrgMinimaUtilsJsonJSONObject *) nil_chk(resp)) getWithId:@"status"] == JreLoadStatic(JavaLangBoolean, FALSE)) {
              allok = false;
            }
            [responses addWithId:resp];
          }
        }
        result = [responses description];
      }
      [out printlnWithNSString:@"HTTP/1.1 200 OK"];
      [out printlnWithNSString:@"Server: HTTP RPC Server from Minima : 1.0"];
      [out printlnWithNSString:JreStrcat("$@", @"Date: ", new_JavaUtilDate_init())];
      [out printlnWithNSString:@"Content-type: text/plain"];
      [out printlnWithNSString:JreStrcat("$I", @"Content-length: ", [((NSString *) nil_chk(result)) java_length])];
      [out printlnWithNSString:@"Access-Control-Allow-Origin: *"];
      [out println];
      [out printlnWithNSString:result];
      [out flush];
    }
  }
  @catch (JavaLangException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Server error : ", ioe)];
  }
  @finally {
    @try {
      [((JavaIoBufferedReader *) nil_chk(in)) close];
      [((JavaIoPrintWriter *) nil_chk(out)) close];
      [((JavaNetSocket *) nil_chk(mSocket_)) close];
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error closing stream : ", [e getMessage])];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetSocket:withOrgMinimaSystemInputInputHandler:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInputHandler_", "LOrgMinimaSystemInputInputHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetSocket;LOrgMinimaSystemInputInputHandler;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkRpcRPCHandler = { "RPCHandler", "org.minima.system.network.rpc", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkRpcRPCHandler;
}

@end

void OrgMinimaSystemNetworkRpcRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_(OrgMinimaSystemNetworkRpcRPCHandler *self, JavaNetSocket *zSocket, OrgMinimaSystemInputInputHandler *zInput) {
  NSObject_init(self);
  self->mSocket_ = zSocket;
  self->mInputHandler_ = zInput;
}

OrgMinimaSystemNetworkRpcRPCHandler *new_OrgMinimaSystemNetworkRpcRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_(JavaNetSocket *zSocket, OrgMinimaSystemInputInputHandler *zInput) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkRpcRPCHandler, initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_, zSocket, zInput)
}

OrgMinimaSystemNetworkRpcRPCHandler *create_OrgMinimaSystemNetworkRpcRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_(JavaNetSocket *zSocket, OrgMinimaSystemInputInputHandler *zInput) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkRpcRPCHandler, initWithJavaNetSocket_withOrgMinimaSystemInputInputHandler_, zSocket, zInput)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkRpcRPCHandler)
