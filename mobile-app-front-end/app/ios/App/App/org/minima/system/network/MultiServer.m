//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/MultiServer.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Exception.h"
#include "java/net/BindException.h"
#include "java/net/InetAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketException.h"
#include "org/minima/system/network/MultiServer.h"
#include "org/minima/system/network/NetClient.h"
#include "org/minima/system/network/NetworkHandler.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemNetworkMultiServer

- (instancetype)initWithOrgMinimaSystemNetworkNetworkHandler:(OrgMinimaSystemNetworkNetworkHandler *)zNetwork
                                                     withInt:(jint)zPort {
  OrgMinimaSystemNetworkMultiServer_initWithOrgMinimaSystemNetworkNetworkHandler_withInt_(self, zNetwork, zPort);
  return self;
}

- (jint)getPort {
  return mPort_;
}

- (NSString *)getHost {
  if (mHardHostSet_) {
    return mHardHost_;
  }
  return mHost_;
}

- (void)hardSetHostWithNSString:(NSString *)zHost {
  mHardHostSet_ = true;
  JreStrongAssign(&mHardHost_, zHost);
}

- (void)stop {
  mRunning_ = false;
  @try {
    if (mServerSocket_ != nil) {
      [mServerSocket_ close];
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
}

- (void)run {
  @try {
    JreStrongAssignAndConsume(&mServerSocket_, new_JavaNetServerSocket_initWithInt_(mPort_));
    JreStrongAssign(&mHost_, [((JavaNetInetAddress *) nil_chk([mServerSocket_ getInetAddress])) getHostAddress]);
    while (mRunning_) {
      JavaNetSocket *clientsock = [((JavaNetServerSocket *) nil_chk(mServerSocket_)) accept];
      OrgMinimaSystemNetworkNetClient *client = create_OrgMinimaSystemNetworkNetClient_initWithJavaNetSocket_withOrgMinimaSystemNetworkNetworkHandler_(clientsock, mNetwork_);
      [((OrgMinimaSystemNetworkNetworkHandler *) nil_chk(mNetwork_)) PostMessageWithOrgMinimaUtilsMessagesMessage:[create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkNetworkHandler_NETWORK_NEWCLIENT) addObjectWithNSString:@"client" withId:client]];
    }
  }
  @catch (JavaNetBindException *e) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I$", @"Port ", mPort_, @" allready in use!.. restart required.."));
  }
  @catch (JavaNetSocketException *e) {
    if (!mRunning_) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(@"Socket Shutdown..");
    }
    else {
      [e printStackTrace];
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(mNetwork_);
  RELEASE_(mServerSocket_);
  RELEASE_(mHost_);
  RELEASE_(mHardHost_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemNetworkNetworkHandler:withInt:);
  methods[1].selector = @selector(getPort);
  methods[2].selector = @selector(getHost);
  methods[3].selector = @selector(hardSetHostWithNSString:);
  methods[4].selector = @selector(stop);
  methods[5].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNetwork_", "LOrgMinimaSystemNetworkNetworkHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mServerSocket_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPort_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHost_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHardHostSet_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHardHost_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRunning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaSystemNetworkNetworkHandler;I", "hardSetHost", "LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkMultiServer = { "MultiServer", "org.minima.system.network", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkMultiServer;
}

@end

void OrgMinimaSystemNetworkMultiServer_initWithOrgMinimaSystemNetworkNetworkHandler_withInt_(OrgMinimaSystemNetworkMultiServer *self, OrgMinimaSystemNetworkNetworkHandler *zNetwork, jint zPort) {
  NSObject_init(self);
  JreStrongAssign(&self->mHost_, @"127.0.0.1");
  self->mHardHostSet_ = false;
  JreStrongAssign(&self->mHardHost_, @"127.0.0.1");
  self->mRunning_ = true;
  JreStrongAssign(&self->mNetwork_, zNetwork);
  self->mPort_ = zPort;
}

OrgMinimaSystemNetworkMultiServer *new_OrgMinimaSystemNetworkMultiServer_initWithOrgMinimaSystemNetworkNetworkHandler_withInt_(OrgMinimaSystemNetworkNetworkHandler *zNetwork, jint zPort) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkMultiServer, initWithOrgMinimaSystemNetworkNetworkHandler_withInt_, zNetwork, zPort)
}

OrgMinimaSystemNetworkMultiServer *create_OrgMinimaSystemNetworkMultiServer_initWithOrgMinimaSystemNetworkNetworkHandler_withInt_(OrgMinimaSystemNetworkNetworkHandler *zNetwork, jint zPort) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkMultiServer, initWithOrgMinimaSystemNetworkNetworkHandler_withInt_, zNetwork, zPort)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkMultiServer)
