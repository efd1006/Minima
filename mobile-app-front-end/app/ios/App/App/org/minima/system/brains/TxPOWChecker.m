//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/brains/TxPOWChecker.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/mmr/MMRData.h"
#include "org/minima/database/mmr/MMREntry.h"
#include "org/minima/database/mmr/MMRProof.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/database/userdb/UserDB.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/NumberValue.h"
#include "org/minima/miniscript/values/ScriptValue.h"
#include "org/minima/objects/Address.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/PubPrivKey.h"
#include "org/minima/objects/TokenDetails.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/objects/base/MiniString.h"
#include "org/minima/system/brains/TxPOWChecker.h"
#include "org/minima/system/input/functions/gimme50.h"
#include "org/minima/utils/Crypto.h"

@implementation OrgMinimaSystemBrainsTxPOWChecker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemBrainsTxPOWChecker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)checkSigsWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  return OrgMinimaSystemBrainsTxPOWChecker_checkSigsWithOrgMinimaObjectsTxPOW_(zTxPOW);
}

+ (jboolean)checkTransactionMMRWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW
                           withOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB {
  return OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMinimaDB_(zTxPOW, zDB);
}

+ (jboolean)checkTransactionMMRWithOrgMinimaObjectsTransaction:(OrgMinimaObjectsTransaction *)zTrans
                                   withOrgMinimaObjectsWitness:(OrgMinimaObjectsWitness *)zWit
                                 withOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB
                            withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNumber
                                withOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zMMRSet
                                                   withBoolean:(jboolean)zTouchMMR {
  return OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(zTrans, zWit, zDB, zBlockNumber, zMMRSet, zTouchMMR);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkSigsWithOrgMinimaObjectsTxPOW:);
  methods[2].selector = @selector(checkTransactionMMRWithOrgMinimaObjectsTxPOW:withOrgMinimaDatabaseMinimaDB:);
  methods[3].selector = @selector(checkTransactionMMRWithOrgMinimaObjectsTransaction:withOrgMinimaObjectsWitness:withOrgMinimaDatabaseMinimaDB:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaDatabaseMmrMMRSet:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkSigs", "LOrgMinimaObjectsTxPOW;", "checkTransactionMMR", "LOrgMinimaObjectsTxPOW;LOrgMinimaDatabaseMinimaDB;", "LOrgMinimaObjectsTransaction;LOrgMinimaObjectsWitness;LOrgMinimaDatabaseMinimaDB;LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaDatabaseMmrMMRSet;Z" };
  static const J2ObjcClassInfo _OrgMinimaSystemBrainsTxPOWChecker = { "TxPOWChecker", "org.minima.system.brains", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBrainsTxPOWChecker;
}

@end

void OrgMinimaSystemBrainsTxPOWChecker_init(OrgMinimaSystemBrainsTxPOWChecker *self) {
  NSObject_init(self);
}

OrgMinimaSystemBrainsTxPOWChecker *new_OrgMinimaSystemBrainsTxPOWChecker_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBrainsTxPOWChecker, init)
}

OrgMinimaSystemBrainsTxPOWChecker *create_OrgMinimaSystemBrainsTxPOWChecker_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBrainsTxPOWChecker, init)
}

jboolean OrgMinimaSystemBrainsTxPOWChecker_checkSigsWithOrgMinimaObjectsTxPOW_(OrgMinimaObjectsTxPOW *zTxPOW) {
  OrgMinimaSystemBrainsTxPOWChecker_initialize();
  OrgMinimaObjectsTransaction *trans = [((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTransaction];
  OrgMinimaObjectsBaseMiniHash *transhash = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:trans];
  OrgMinimaObjectsWitness *wit = [zTxPOW getWitness];
  jint len = [((JavaUtilArrayList *) nil_chk([((OrgMinimaObjectsWitness *) nil_chk(wit)) getAllPubKeys])) size];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsBaseMiniData *pubk = [wit getPublicKeyWithInt:i];
    OrgMinimaObjectsBaseMiniData *sig = [wit getSignatureWithInt:i];
    jboolean ok = OrgMinimaObjectsPubPrivKey_verifyWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniHash_withOrgMinimaObjectsBaseMiniData_(pubk, transhash, sig);
    if (!ok) {
      return false;
    }
  }
  return true;
}

jboolean OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMinimaDB_(OrgMinimaObjectsTxPOW *zTxPOW, OrgMinimaDatabaseMinimaDB *zDB) {
  OrgMinimaSystemBrainsTxPOWChecker_initialize();
  return OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_([((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTransaction], [zTxPOW getWitness], zDB, [((OrgMinimaDatabaseMinimaDB *) nil_chk(zDB)) getTopBlock], [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([zDB getMainTree])) getChainTip])) getMMRSet], false);
}

jboolean OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(OrgMinimaObjectsTransaction *zTrans, OrgMinimaObjectsWitness *zWit, OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaObjectsBaseMiniNumber *zBlockNumber, OrgMinimaDatabaseMmrMMRSet *zMMRSet, jboolean zTouchMMR) {
  OrgMinimaSystemBrainsTxPOWChecker_initialize();
  JavaUtilArrayList *inputs = [((OrgMinimaObjectsTransaction *) nil_chk(zTrans)) getAllInputs];
  NSString *sigs = [((OrgMinimaObjectsWitness *) nil_chk(zWit)) getAllPubKeysCSV];
  OrgMinimaObjectsBaseMiniNumber *totalin = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  jint ins = [((JavaUtilArrayList *) nil_chk(inputs)) size];
  for (jint i = 0; i < ins; i++) {
    OrgMinimaObjectsCoin *input = [inputs getWithInt:i];
    NSString *script = [zWit getScriptWithInt:i];
    if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk(input)) getCoinID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:JreLoadStatic(OrgMinimaSystemInputFunctionsgimme50, COINID_INPUT)] && [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([input getAmount])) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"50")]) {
    }
    else {
      OrgMinimaObjectsAddress *scraddr = create_OrgMinimaObjectsAddress_initWithNSString_(script);
      if (![((OrgMinimaObjectsBaseMiniHash *) nil_chk([scraddr getAddressData])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[input getAddress]]) {
        return false;
      }
      OrgMinimaDatabaseMmrMMRProof *proof = [((JavaUtilArrayList *) nil_chk([zWit getAllProofs])) getWithInt:i];
      jboolean valid = [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(zMMRSet)) checkProofWithOrgMinimaDatabaseMmrMMRProof:proof];
      if (!valid) {
        return false;
      }
      if (![((OrgMinimaDatabaseMmrMMRProof *) nil_chk(proof)) checkCoinWithOrgMinimaObjectsCoin:input]) {
        return false;
      }
      if (zTouchMMR) {
        OrgMinimaDatabaseMmrMMREntry *spent = [zMMRSet updateSpentCoinWithOrgMinimaDatabaseMmrMMRProof:proof];
        if ([((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(zDB)) getUserDB])) isAddressRelevantWithOrgMinimaObjectsBaseMiniHash:[input getAddress]]) {
          [zMMRSet addKeeperWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(spent)) getEntry]];
        }
      }
      OrgMinimaMiniscriptContract *cc = create_OrgMinimaMiniscriptContract_initWithNSString_withNSString_withOrgMinimaObjectsTransaction_withBoolean_(script, sigs, zTrans, false);
      NSString *address = [((OrgMinimaObjectsBaseMiniHash *) nil_chk([input getAddress])) description];
      [cc setGlobalVariableWithNSString:@"@BLKNUM" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_(zBlockNumber)];
      [cc setGlobalVariableWithNSString:@"@INPUT" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithInt_(i)];
      [cc setGlobalVariableWithNSString:@"@AMOUNT" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([input getAmount])];
      [cc setGlobalVariableWithNSString:@"@ADDRESS" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(address)];
      [cc setGlobalVariableWithNSString:@"@TOKENID" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_([input getTokenID])];
      [cc setGlobalVariableWithNSString:@"@COINID" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_([input getCoinID])];
      [cc setGlobalVariableWithNSString:@"@SCRIPT" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesScriptValue_initWithNSString_(script)];
      [cc setGlobalVariableWithNSString:@"@TOTIN" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithInt_([((JavaUtilArrayList *) nil_chk([zTrans getAllInputs])) size])];
      [cc setGlobalVariableWithNSString:@"@TOTOUT" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithInt_([((JavaUtilArrayList *) nil_chk([zTrans getAllOutputs])) size])];
      [cc setGlobalVariableWithNSString:@"@INBLKNUM" withOrgMinimaMiniscriptValuesValue:create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaDatabaseMmrMMRData *) nil_chk([proof getMMRData])) getInBlock])];
      [cc setPrevStateWithJavaUtilArrayList:[((OrgMinimaDatabaseMmrMMRData *) nil_chk([proof getMMRData])) getPrevState]];
      [cc run];
      if (![cc isSuccess]) {
        return false;
      }
    }
    totalin = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(totalin)) addWithOrgMinimaObjectsBaseMiniNumber:[input getAmount]];
  }
  OrgMinimaObjectsBaseMiniHash *transhash = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:zTrans];
  OrgMinimaObjectsBaseMiniNumber *totalout = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  JavaUtilArrayList *outputs = [zTrans getAllOutputs];
  jint outs = [((JavaUtilArrayList *) nil_chk(outputs)) size];
  for (jint i = 0; i < outs; i++) {
    OrgMinimaObjectsCoin *output = [outputs getWithInt:i];
    OrgMinimaObjectsBaseMiniHash *coinid = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:transhash withOrgMinimaUtilsStreamable:create_OrgMinimaObjectsBaseMiniByte_initWithInt_(i)];
    OrgMinimaObjectsBaseMiniHash *tokid = [((OrgMinimaObjectsCoin *) nil_chk(output)) getTokenID];
    OrgMinimaObjectsTokenDetails *newtoken = nil;
    OrgMinimaObjectsTokenDetails *newtokdets = nil;
    if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk(tokid)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:JreLoadStatic(OrgMinimaObjectsCoin, TOKENID_CREATE)]) {
      OrgMinimaObjectsTokenDetails *gentoken = [zWit getTokenGenDetails];
      newtokdets = create_OrgMinimaObjectsTokenDetails_initWithOrgMinimaObjectsBaseMiniHash_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniString_(coinid, [((OrgMinimaObjectsTokenDetails *) nil_chk(gentoken)) getScale], [gentoken getAmount], [gentoken getName]);
      tokid = [newtokdets getTokenID];
    }
    else if (![tokid isExactlyEqualWithOrgMinimaObjectsBaseMiniData:JreLoadStatic(OrgMinimaObjectsCoin, MINIMA_TOKENID)]) {
      newtokdets = [zWit getTokenDetailWithOrgMinimaObjectsBaseMiniHash:tokid];
      if (newtokdets == nil) {
        return false;
      }
    }
    if (zTouchMMR) {
      OrgMinimaObjectsCoin *mmrcoin = create_OrgMinimaObjectsCoin_initWithOrgMinimaObjectsBaseMiniHash_withOrgMinimaObjectsBaseMiniHash_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniHash_(coinid, [output getAddress], [output getAmount], tokid);
      OrgMinimaDatabaseMmrMMRData *mmrdata = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsCoin_withOrgMinimaObjectsBaseMiniNumber_withJavaUtilArrayList_(JreLoadStatic(OrgMinimaObjectsBaseMiniByte, FALSE), mmrcoin, zBlockNumber, [zTrans getCompleteState]);
      OrgMinimaDatabaseMmrMMREntry *unspent = [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(zMMRSet)) addUnspentCoinWithOrgMinimaDatabaseMmrMMRData:mmrdata];
      if ([((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(zDB)) getUserDB])) isAddressRelevantWithOrgMinimaObjectsBaseMiniHash:[output getAddress]]) {
        [zMMRSet addKeeperWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(unspent)) getEntry]];
        if (newtokdets != nil) {
          [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([zDB getUserDB])) addTokenDetailsWithOrgMinimaObjectsTokenDetails:newtokdets];
        }
      }
    }
    totalout = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(totalout)) addWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsCoin *) nil_chk([outputs getWithInt:i])) getAmount]];
  }
  if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(totalout)) isMoreWithOrgMinimaObjectsBaseMiniNumber:totalin]) {
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBrainsTxPOWChecker)
