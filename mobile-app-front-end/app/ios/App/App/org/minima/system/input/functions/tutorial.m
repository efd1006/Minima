//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/tutorial.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/lang/ClassLoader.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/tutorial.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaSystemInputFunctionstutorial

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionstutorial_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  JavaIoInputStream *in = [((JavaLangClassLoader *) nil_chk([[self java_getClass] getClassLoader])) getResourceAsStreamWithNSString:@"org/minima/system/input/functions/tutorial.txt"];
  JavaIoBufferedReader *br = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_(in));
  jint linenumber = 1;
  NSString *line = nil;
  NSString *total = @"";
  while ((line = [br readLine]) != nil) {
    [((OrgMinimaUtilsJsonJSONObject *) nil_chk([((OrgMinimaUtilsResponseStream *) nil_chk([self getResponseStream])) getDataJSON])) putWithId:[self getLineNumberWithInt:linenumber++] withId:line];
    JreStrAppend(&total, "$C", line, 0x000a);
  }
  [((OrgMinimaUtilsResponseStream *) nil_chk([self getResponseStream])) hardEndStatusWithNSString:total];
}

- (NSString *)getLineNumberWithInt:(jint)zLine {
  if (zLine < 10) {
    return JreStrcat("$I", @"00", zLine);
  }
  else if (zLine < 100) {
    return JreStrcat("CI", '0', zLine);
  }
  return JreStrcat("I", zLine);
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return create_OrgMinimaSystemInputFunctionstutorial_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getLineNumberWithInt:);
  methods[3].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;", "getLineNumber", "I" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionstutorial = { "tutorial", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionstutorial;
}

@end

void OrgMinimaSystemInputFunctionstutorial_init(OrgMinimaSystemInputFunctionstutorial *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"tutorial");
  [self setHelpWithNSString:@"" withNSString:@"Explain Minima and go through Scripting!" withNSString:@""];
}

OrgMinimaSystemInputFunctionstutorial *new_OrgMinimaSystemInputFunctionstutorial_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionstutorial, init)
}

OrgMinimaSystemInputFunctionstutorial *create_OrgMinimaSystemInputFunctionstutorial_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionstutorial, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionstutorial)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionstutorial, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
