//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/nio/NIONetworkHandler.java
//

#include "J2ObjC_source.h"
#include "java/lang/Thread.h"
#include "java/net/Socket.h"
#include "java/util/ArrayList.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/SystemHandler.h"
#include "org/minima/system/network/NetClient.h"
#include "org/minima/system/network/nio/NIOMultiServer.h"
#include "org/minima/system/network/nio/NIONetworkHandler.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemNetworkNioNIONetworkHandler ()

- (void)sendToAllWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage;

@end

__attribute__((unused)) static void OrgMinimaSystemNetworkNioNIONetworkHandler_sendToAllWithOrgMinimaUtilsMessagesMessage_(OrgMinimaSystemNetworkNioNIONetworkHandler *self, OrgMinimaUtilsMessagesMessage *zMessage);

NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_STARTUP = @"NETWORK_START";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SHUTDOWN = @"NETWORK_SHUTDOWN";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CONNECT = @"NETWORK_CONNECT";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_DISCONNECT = @"NETWORK_DISCONNECT";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_RECONNECT = @"NETWORK_RECONNECT";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_AUTOCONNECT = @"NETWORK_AUTOCONNECT";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_NEWCLIENT = @"NETWORK_NEWCLIENT";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CLIENTERROR = @"NETWORK_CLIENTERROR";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_PING = @"NETWORK_PING";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_TRACE = @"NETWORK_TRACE";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SENDALL = @"NETWORK_SENDALL";
NSString *OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_ALLSTOP = @"NETWORK_ALLSTOP";

@implementation OrgMinimaSystemNetworkNioNIONetworkHandler

- (instancetype)initWithOrgMinimaSystemMain:(OrgMinimaSystemMain *)zMain {
  OrgMinimaSystemNetworkNioNIONetworkHandler_initWithOrgMinimaSystemMain_(self, zMain);
  return self;
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_STARTUP]) {
    jint port = [zMessage getIntegerWithNSString:@"port"];
    JreStrongAssignAndConsume(&mServer_, new_OrgMinimaSystemNetworkNioNIOMultiServer_init());
    JavaLangThread *tt = create_JavaLangThread_initWithJavaLangRunnable_(mServer_);
    [tt start];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SHUTDOWN]) {
    [((OrgMinimaSystemNetworkNioNIOMultiServer *) nil_chk(mServer_)) PostMessageWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_CLOSE];
    [((OrgMinimaSystemNetworkNioNIOMultiServer *) nil_chk(mServer_)) stopMessageProcessor];
    OrgMinimaUtilsMessagesMessage *msg = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkNetClient_NETCLIENT_SHUTDOWN);
    for (OrgMinimaSystemNetworkNetClient * __strong client in nil_chk(mClients_)) {
      [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) PostMessageWithOrgMinimaUtilsMessagesMessage:msg];
    }
    [self stopMessageProcessor];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CONNECT]) {
    NSString *host = [zMessage getStringWithNSString:@"host"];
    jint port = [zMessage getIntegerWithNSString:@"port"];
    JavaNetSocket *sock = create_JavaNetSocket_initWithNSString_withInt_(host, port);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_DISCONNECT]) {
    NSString *uid = [zMessage getStringWithNSString:@"uid"];
    for (OrgMinimaSystemNetworkNetClient * __strong client in nil_chk(mClients_)) {
      if ([((NSString *) nil_chk([((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) getUID])) isEqual:uid]) {
        [client PostMessageWithNSString:OrgMinimaSystemNetworkNetClient_NETCLIENT_SHUTDOWN];
        break;
      }
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_NEWCLIENT]) {
    OrgMinimaSystemNetworkNetClient *client = (OrgMinimaSystemNetworkNetClient *) cast_chk([zMessage getObjectWithNSString:@"client"], [OrgMinimaSystemNetworkNetClient class]);
    [((JavaUtilArrayList *) nil_chk(mClients_)) addWithId:client];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CLIENTERROR]) {
    OrgMinimaSystemNetworkNetClient *client = (OrgMinimaSystemNetworkNetClient *) cast_chk([zMessage getObjectWithNSString:@"client"], [OrgMinimaSystemNetworkNetClient class]);
    [((JavaUtilArrayList *) nil_chk(mClients_)) removeWithId:client];
    [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) PostMessageWithOrgMinimaUtilsMessagesMessage:create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkNetClient_NETCLIENT_SHUTDOWN)];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_TRACE]) {
    jboolean traceon = [zMessage getBooleanWithNSString:@"trace"];
    [self setLOGWithBoolean:traceon];
    for (OrgMinimaSystemNetworkNetClient * __strong client in nil_chk(mClients_)) {
      [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) setLOGWithBoolean:traceon];
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SENDALL]) {
    OrgMinimaUtilsMessagesMessage *msg = (OrgMinimaUtilsMessagesMessage *) cast_chk([zMessage getObjectWithNSString:@"message"], [OrgMinimaUtilsMessagesMessage class]);
    OrgMinimaSystemNetworkNioNIONetworkHandler_sendToAllWithOrgMinimaUtilsMessagesMessage_(self, msg);
  }
}

- (void)sendToAllWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  OrgMinimaSystemNetworkNioNIONetworkHandler_sendToAllWithOrgMinimaUtilsMessagesMessage_(self, zMessage);
}

- (JavaUtilArrayList *)getNetClients {
  return mClients_;
}

- (void)dealloc {
  RELEASE_(mServer_);
  RELEASE_(mClients_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemMain:);
  methods[1].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[2].selector = @selector(sendToAllWithOrgMinimaUtilsMessagesMessage:);
  methods[3].selector = @selector(getNetClients);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NETWORK_STARTUP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "NETWORK_SHUTDOWN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "NETWORK_CONNECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "NETWORK_DISCONNECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "NETWORK_RECONNECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "NETWORK_AUTOCONNECT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "NETWORK_NEWCLIENT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "NETWORK_CLIENTERROR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "NETWORK_PING", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "NETWORK_TRACE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "NETWORK_SENDALL", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "NETWORK_ALLSTOP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 17, -1, -1 },
    { "mServer_", "LOrgMinimaSystemNetworkNioNIOMultiServer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mClients_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 18, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaSystemMain;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "sendToAll", "()Ljava/util/ArrayList<Lorg/minima/system/network/NetClient;>;", &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_STARTUP, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SHUTDOWN, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CONNECT, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_DISCONNECT, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_RECONNECT, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_AUTOCONNECT, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_NEWCLIENT, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_CLIENTERROR, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_PING, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_TRACE, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_SENDALL, &OrgMinimaSystemNetworkNioNIONetworkHandler_NETWORK_ALLSTOP, "Ljava/util/ArrayList<Lorg/minima/system/network/NetClient;>;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkNioNIONetworkHandler = { "NIONetworkHandler", "org.minima.system.network.nio", ptrTable, methods, fields, 7, 0x1, 4, 14, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkNioNIONetworkHandler;
}

@end

void OrgMinimaSystemNetworkNioNIONetworkHandler_initWithOrgMinimaSystemMain_(OrgMinimaSystemNetworkNioNIONetworkHandler *self, OrgMinimaSystemMain *zMain) {
  OrgMinimaSystemSystemHandler_initWithOrgMinimaSystemMain_withNSString_(self, zMain, @"NIO_NETWORK");
  JreStrongAssignAndConsume(&self->mClients_, new_JavaUtilArrayList_init());
}

OrgMinimaSystemNetworkNioNIONetworkHandler *new_OrgMinimaSystemNetworkNioNIONetworkHandler_initWithOrgMinimaSystemMain_(OrgMinimaSystemMain *zMain) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkNioNIONetworkHandler, initWithOrgMinimaSystemMain_, zMain)
}

OrgMinimaSystemNetworkNioNIONetworkHandler *create_OrgMinimaSystemNetworkNioNIONetworkHandler_initWithOrgMinimaSystemMain_(OrgMinimaSystemMain *zMain) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkNioNIONetworkHandler, initWithOrgMinimaSystemMain_, zMain)
}

void OrgMinimaSystemNetworkNioNIONetworkHandler_sendToAllWithOrgMinimaUtilsMessagesMessage_(OrgMinimaSystemNetworkNioNIONetworkHandler *self, OrgMinimaUtilsMessagesMessage *zMessage) {
  for (OrgMinimaSystemNetworkNetClient * __strong client in nil_chk(self->mClients_)) {
    [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) PostMessageWithOrgMinimaUtilsMessagesMessage:zMessage];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkNioNIONetworkHandler)
