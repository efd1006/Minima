//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/bootstrap/UserSimulator.java
//

#include "J2ObjC_source.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/SystemHandler.h"
#include "org/minima/system/bootstrap/UserSimulator.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/utils/messages/Message.h"
#include "org/minima/utils/messages/TimerMessage.h"

@implementation OrgMinimaSystemBootstrapUserSimulator

- (instancetype)initWithOrgMinimaSystemMain:(OrgMinimaSystemMain *)zMain {
  OrgMinimaSystemBootstrapUserSimulator_initWithOrgMinimaSystemMain_(self, zMain);
  return self;
}

- (void)setMiningWithBoolean:(jboolean)zMining
                     withInt:(jint)zCount
                 withBoolean:(jboolean)zStress {
  mMiningON_ = zMining;
  mCounter_ = zCount;
  mStressTest_ = zStress;
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:@"DO_WORK"]) {
    if (mMiningON_) {
      if (!mPulseStarted_) {
        mPulseStarted_ = true;
      }
      OrgMinimaUtilsMessagesMessage *mine = nil;
      if (mStressTest_) {
        mine = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_STRESS_TRANS);
      }
      else {
        OrgMinimaObjectsTransaction *trans = create_OrgMinimaObjectsTransaction_init();
        OrgMinimaObjectsWitness *wit = create_OrgMinimaObjectsWitness_init();
        mine = [((OrgMinimaUtilsMessagesMessage *) nil_chk([create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_SENDTRANS) addObjectWithNSString:@"transaction" withId:trans])) addObjectWithNSString:@"witness" withId:wit];
      }
      [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:mine];
      if (mCounter_ != -1) {
        mCounter_--;
        if (mCounter_ <= 0) {
          mMiningON_ = false;
        }
      }
    }
    [self PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:create_OrgMinimaUtilsMessagesTimerMessage_initWithInt_withNSString_(1000, @"DO_WORK")];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemMain:);
  methods[1].selector = @selector(setMiningWithBoolean:withInt:withBoolean:);
  methods[2].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMiningON_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCounter_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mStressTest_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPulseStarted_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaSystemMain;", "setMining", "ZIZ", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemBootstrapUserSimulator = { "UserSimulator", "org.minima.system.bootstrap", ptrTable, methods, fields, 7, 0x1, 3, 4, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBootstrapUserSimulator;
}

@end

void OrgMinimaSystemBootstrapUserSimulator_initWithOrgMinimaSystemMain_(OrgMinimaSystemBootstrapUserSimulator *self, OrgMinimaSystemMain *zMain) {
  OrgMinimaSystemSystemHandler_initWithOrgMinimaSystemMain_withNSString_(self, zMain, @"SIMULATOR");
  self->mMiningON_ = false;
  self->mCounter_ = 0;
  self->mPulseStarted_ = false;
  [self setLOGWithBoolean:false];
  [self PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:create_OrgMinimaUtilsMessagesTimerMessage_initWithInt_withNSString_(1000, @"DO_WORK")];
  self->mLogON_ = false;
  self->mStressTest_ = false;
}

OrgMinimaSystemBootstrapUserSimulator *new_OrgMinimaSystemBootstrapUserSimulator_initWithOrgMinimaSystemMain_(OrgMinimaSystemMain *zMain) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBootstrapUserSimulator, initWithOrgMinimaSystemMain_, zMain)
}

OrgMinimaSystemBootstrapUserSimulator *create_OrgMinimaSystemBootstrapUserSimulator_initWithOrgMinimaSystemMain_(OrgMinimaSystemMain *zMain) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBootstrapUserSimulator, initWithOrgMinimaSystemMain_, zMain)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBootstrapUserSimulator)
