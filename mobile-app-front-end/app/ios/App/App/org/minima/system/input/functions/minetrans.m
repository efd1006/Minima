//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/minetrans.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/minetrans.h"

@implementation OrgMinimaSystemInputFunctionsminetrans

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionsminetrans_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  if (((IOSObjectArray *) nil_chk(zInput))->size_ > 1) {
    jboolean stress = false;
    if (zInput->size_ > 2) {
      if (![((NSString *) nil_chk(IOSObjectArray_Get(zInput, 2))) isEqual:@"stress"]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Incorrect function format."];
        return;
      }
      stress = true;
    }
    if ([((NSString *) nil_chk(IOSObjectArray_Get(zInput, 1))) java_equalsIgnoreCase:@"auto"]) {
      [((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) setSimulatorWithBoolean:true withInt:-1 withBoolean:stress];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"AUTO transaction mining ON stress:", stress)];
    }
    else if ([((NSString *) nil_chk(IOSObjectArray_Get(zInput, 1))) java_equalsIgnoreCase:@"off"]) {
      [((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) setSimulatorWithBoolean:false withInt:0 withBoolean:stress];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$Z", @"AUTO transaction mining OFF stress:", stress)];
    }
    else {
      jint count = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(zInput, 1));
      [((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) setSimulatorWithBoolean:true withInt:count withBoolean:stress];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("I$", count, @" transactions added to mining stack..")];
    }
  }
  else {
    [((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) setSimulatorWithBoolean:true withInt:1 withBoolean:false];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"1 off-chain transaction added to mining stack.."];
  }
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return create_OrgMinimaSystemInputFunctionsminetrans_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionsminetrans = { "minetrans", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionsminetrans;
}

@end

void OrgMinimaSystemInputFunctionsminetrans_init(OrgMinimaSystemInputFunctionsminetrans *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"minetrans");
  [self setHelpWithNSString:@"[number|auto|off] {stress}" withNSString:@"Mine a transaction and only publish if a block is found. Or stress to mine a published transaction." withNSString:@"This function simulates a User sending a random transaction. If not stress then this will only publish if a block is found : an off-chain transaction. If you use auto it will fire a transaction every 200 millisecs."];
}

OrgMinimaSystemInputFunctionsminetrans *new_OrgMinimaSystemInputFunctionsminetrans_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionsminetrans, init)
}

OrgMinimaSystemInputFunctionsminetrans *create_OrgMinimaSystemInputFunctionsminetrans_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionsminetrans, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionsminetrans)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionsminetrans, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
