//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/minetrans.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Thread.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/minetrans.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputFunctionsminetrans

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionsminetrans_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  jint num = 1;
  if (((IOSObjectArray *) nil_chk(zInput))->size_ > 1) {
    num = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(zInput, 1));
  }
  OrgMinimaUtilsMessagesMessage *newtrans = [((OrgMinimaUtilsMessagesMessage *) nil_chk([((OrgMinimaUtilsMessagesMessage *) nil_chk([self getResponseMessageWithNSString:OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_SENDTRANS])) addObjectWithNSString:@"transaction" withId:create_OrgMinimaObjectsTransaction_init()])) addObjectWithNSString:@"witness" withId:create_OrgMinimaObjectsWitness_init()];
  if (num > 1) {
    newtrans = [((OrgMinimaUtilsMessagesMessage *) nil_chk([create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_SENDTRANS) addObjectWithNSString:@"transaction" withId:create_OrgMinimaObjectsTransaction_init()])) addObjectWithNSString:@"witness" withId:create_OrgMinimaObjectsWitness_init()];
  }
  for (jint i = 0; i < num; i++) {
    [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:newtrans];
    if (i < num - 1) {
      JavaLangThread_sleepWithLong_(1000);
    }
  }
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return create_OrgMinimaSystemInputFunctionsminetrans_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionsminetrans = { "minetrans", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionsminetrans;
}

@end

void OrgMinimaSystemInputFunctionsminetrans_init(OrgMinimaSystemInputFunctionsminetrans *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"minetrans");
  [self setHelpWithNSString:@"(number of txns)" withNSString:@"Mine a blank transaction" withNSString:@"1 sec pause between multiple transactions. Useful when debugging and MINIMA_ZERO_DIFF_BLK set to true"];
}

OrgMinimaSystemInputFunctionsminetrans *new_OrgMinimaSystemInputFunctionsminetrans_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionsminetrans, init)
}

OrgMinimaSystemInputFunctionsminetrans *create_OrgMinimaSystemInputFunctionsminetrans_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionsminetrans, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionsminetrans)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionsminetrans, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
