//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/brains/ConsensusNet.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowdb/TxPOWDBRow.h"
#include "org/minima/database/txpowdb/TxPowDB.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/system/backup/SyncPackage.h"
#include "org/minima/system/backup/SyncPacket.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusNet.h"
#include "org/minima/system/brains/TxPOWChecker.h"
#include "org/minima/system/network/NetClient.h"
#include "org/minima/system/network/NetClientReader.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/Streamable.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemBrainsConsensusNet ()

- (OrgMinimaDatabaseMinimaDB *)getMainDB;

- (void)sendNetMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zFromMessage
                       withOrgMinimaObjectsBaseMiniByte:(OrgMinimaObjectsBaseMiniByte *)zMessageType
                           withOrgMinimaUtilsStreamable:(id<OrgMinimaUtilsStreamable>)zObject;

@end

__attribute__((unused)) static OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusNet_getMainDB(OrgMinimaSystemBrainsConsensusNet *self);

__attribute__((unused)) static void OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(OrgMinimaSystemBrainsConsensusNet *self, OrgMinimaUtilsMessagesMessage *zFromMessage, OrgMinimaObjectsBaseMiniByte *zMessageType, id<OrgMinimaUtilsStreamable> zObject);

J2OBJC_INITIALIZED_DEFN(OrgMinimaSystemBrainsConsensusNet)

NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX = @"CONSENSUSNET_";
NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INITIALISE = @"CONSENSUSNET_NET_INITIALISE";
NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INTRO;
NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWID;
NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWREQUEST;
NSString *OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOW;

@implementation OrgMinimaSystemBrainsConsensusNet

- (instancetype)initWithOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB
        withOrgMinimaSystemBrainsConsensusHandler:(OrgMinimaSystemBrainsConsensusHandler *)zHandler {
  OrgMinimaSystemBrainsConsensusNet_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(self, zDB, zHandler);
  return self;
}

- (OrgMinimaDatabaseMinimaDB *)getMainDB {
  return OrgMinimaSystemBrainsConsensusNet_getMainDB(self);
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INITIALISE]) {
    JavaUtilArrayList *nodes = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getAsList];
    if ([((JavaUtilArrayList *) nil_chk(nodes)) size] == 0) {
      return;
    }
    OrgMinimaObjectsBaseMiniNumber *casc = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getCascadeNode])) getTxPow])) getBlockNumber];
    OrgMinimaSystemBackupSyncPackage *sp = create_OrgMinimaSystemBackupSyncPackage_init();
    [sp setCascadeNodeWithOrgMinimaObjectsBaseMiniNumber:casc];
    for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong node in nodes) {
      OrgMinimaObjectsBaseMiniNumber *block = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(node)) getTxPow])) getBlockNumber];
      [((JavaUtilArrayList *) nil_chk([sp getAllNodes])) addWithInt:0 withId:create_OrgMinimaSystemBackupSyncPacket_initWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(node)];
    }
    OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_INTRO), sp);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INTRO]) {
    OrgMinimaSystemBackupSyncPackage *sp = (OrgMinimaSystemBackupSyncPackage *) cast_chk([zMessage getObjectWithNSString:@"sync"], [OrgMinimaSystemBackupSyncPackage class]);
    jboolean hardhack = false;
    if (hardhack || [((JavaUtilArrayList *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getAsList])) size] == 0) {
      [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPowDB])) ClearDB];
      JavaUtilArrayList *packets = [((OrgMinimaSystemBackupSyncPackage *) nil_chk(sp)) getAllNodes];
      for (OrgMinimaSystemBackupSyncPacket * __strong spack in nil_chk(packets)) {
        OrgMinimaObjectsTxPOW *txpow = [((OrgMinimaSystemBackupSyncPacket *) nil_chk(spack)) getTxPOW];
        OrgMinimaDatabaseMmrMMRSet *mmr = [spack getMMRSet];
        jboolean cascade = [spack isCascade];
        OrgMinimaDatabaseTxpowtreeBlockTreeNode *node = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) hardAddTxPOWBlockWithOrgMinimaObjectsTxPOW:txpow withOrgMinimaDatabaseMmrMMRSet:mmr withBoolean:cascade];
        if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) getBlockNumber])) isEqualWithOrgMinimaObjectsBaseMiniNumber:[sp getCascadeNode]]) {
          [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:node];
        }
      }
      [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) hardResetChain];
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Sync Complete.. Current block : ", [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getChainTip]));
    }
    else {
      OrgMinimaObjectsBaseMiniNumber *cross = [self checkCrossoverWithOrgMinimaSystemBackupSyncPackage:sp];
      if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(cross)) isEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)]) {
        OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"IRREGULAR POW INTRO CHAIN. NO CROSSOVER BLOCK.. ", sp));
        return;
      }
      JavaUtilArrayList *intro = [((OrgMinimaSystemBackupSyncPackage *) nil_chk(sp)) getAllNodes];
      jboolean requeston = false;
      jint totalreq = 0;
      for (OrgMinimaSystemBackupSyncPacket * __strong spack in nil_chk(intro)) {
        if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaSystemBackupSyncPacket *) nil_chk(spack)) getTxPOW])) getBlockNumber])) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:cross]) {
          requeston = true;
        }
        if (requeston) {
          OrgMinimaObjectsTxPOW *txpow = [spack getTxPOW];
          JavaUtilArrayList *txns = [((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) getBlockTxns];
          for (OrgMinimaObjectsBaseMiniData32 * __strong txn in nil_chk(txns)) {
            if (![((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) isTxPOWFoundWithOrgMinimaObjectsBaseMiniData32:txn]) {
              OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST), txn);
              totalreq++;
            }
          }
          if (![((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) isTxPOWFoundWithOrgMinimaObjectsBaseMiniData32:[txpow getTxPowID]]) {
            OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST), [txpow getTxPowID]);
            totalreq++;
          }
        }
      }
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I$", @"Sync complete. ", totalreq, @" requests made.. "));
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWID]) {
    OrgMinimaObjectsBaseMiniData32 *txpowid = (OrgMinimaObjectsBaseMiniData32 *) cast_chk([zMessage getObjectWithNSString:@"txpowid"], [OrgMinimaObjectsBaseMiniData32 class]);
    OrgMinimaObjectsTxPOW *txpow = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:txpowid];
    if (txpow == nil) {
      OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST), txpowid);
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWREQUEST]) {
    OrgMinimaObjectsBaseMiniData32 *txpowid = (OrgMinimaObjectsBaseMiniData32 *) cast_chk([zMessage getObjectWithNSString:@"txpowid"], [OrgMinimaObjectsBaseMiniData32 class]);
    OrgMinimaObjectsTxPOW *txpow = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:txpowid];
    if (txpow == nil) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"TXPOWREQUEST OF MISSING TXPOW ", txpowid));
    }
    else {
      OrgMinimaSystemNetworkNetClient *client = (OrgMinimaSystemNetworkNetClient *) cast_chk([zMessage getObjectWithNSString:@"netclient"], [OrgMinimaSystemNetworkNetClient class]);
      OrgMinimaUtilsMessagesMessage *tx = [create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkNetClient_NETCLIENT_SENDTXPOW) addObjectWithNSString:@"txpow" withId:txpow];
      [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) PostMessageWithOrgMinimaUtilsMessagesMessage:tx];
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOW]) {
    OrgMinimaObjectsTxPOW *txpow = (OrgMinimaObjectsTxPOW *) cast_chk([zMessage getObjectWithNSString:@"txpow"], [OrgMinimaObjectsTxPOW class]);
    if (![((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) isBlock] && ![txpow isTransaction]) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"ERROR FAKE - not enough POW : ", txpow));
      return;
    }
    if ([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:[txpow getTxPowID]] != nil) {
      return;
    }
    jboolean sigsok = OrgMinimaSystemBrainsTxPOWChecker_checkSigsWithOrgMinimaObjectsTxPOW_(txpow);
    if (!sigsok) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Invalid Signatures with TXPOW : ", txpow));
      return;
    }
    jboolean trxok = OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMinimaDB_(txpow, OrgMinimaSystemBrainsConsensusNet_getMainDB(self));
    if (!trxok) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"NET TXPOW NOT OK : ", txpow));
      return;
    }
    id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) addNewTxPowWithOrgMinimaObjectsTxPOW:txpow];
    if ([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:[txpow getParentID]] == nil) {
      OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST), [txpow getParentID]);
    }
    JavaUtilArrayList *txns = [txpow getBlockTxns];
    for (OrgMinimaObjectsBaseMiniData32 * __strong txn in nil_chk(txns)) {
      if ([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:txn] == nil) {
        OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zMessage, JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST), txn);
      }
    }
    OrgMinimaUtilsMessagesMessage *newtxpow = [create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_PRE_PROCESSTXPOW) addObjectWithNSString:@"txpow" withId:txpow];
    [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:newtxpow];
  }
}

- (void)sendNetMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zFromMessage
                       withOrgMinimaObjectsBaseMiniByte:(OrgMinimaObjectsBaseMiniByte *)zMessageType
                           withOrgMinimaUtilsStreamable:(id<OrgMinimaUtilsStreamable>)zObject {
  OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(self, zFromMessage, zMessageType, zObject);
}

- (OrgMinimaObjectsBaseMiniNumber *)checkCrossoverWithOrgMinimaSystemBackupSyncPackage:(OrgMinimaSystemBackupSyncPackage *)zIntro {
  JavaUtilArrayList *chain = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getAsList];
  OrgMinimaObjectsBaseMiniNumber *maincascade = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusNet_getMainDB(self))) getMainTree])) getCascadeNode])) getTxPow])) getBlockNumber];
  JavaUtilArrayList *introchain = [((OrgMinimaSystemBackupSyncPackage *) nil_chk(zIntro)) getAllNodes];
  jboolean found = false;
  OrgMinimaObjectsBaseMiniNumber *crossover = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong block in nil_chk(chain)) {
    OrgMinimaObjectsBaseMiniNumber *bnum = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(block)) getTxPow])) getBlockNumber];
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(bnum)) isMoreWithOrgMinimaObjectsBaseMiniNumber:maincascade]) {
      for (OrgMinimaSystemBackupSyncPacket * __strong spack in nil_chk(introchain)) {
        if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaSystemBackupSyncPacket *) nil_chk(spack)) getTxPOW])) getBlockNumber])) isEqualWithOrgMinimaObjectsBaseMiniNumber:bnum]) {
          found = true;
          crossover = bnum;
          break;
        }
      }
    }
    if (found) {
      break;
    }
  }
  return crossover;
}

- (void)dealloc {
  RELEASE_(mDB_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMinimaDB;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaDatabaseMinimaDB:withOrgMinimaSystemBrainsConsensusHandler:);
  methods[1].selector = @selector(getMainDB);
  methods[2].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[3].selector = @selector(sendNetMessageWithOrgMinimaUtilsMessagesMessage:withOrgMinimaObjectsBaseMiniByte:withOrgMinimaUtilsStreamable:);
  methods[4].selector = @selector(checkCrossoverWithOrgMinimaSystemBackupSyncPackage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONSENSUS_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "CONSENSUS_NET_INITIALISE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "CONSENSUS_NET_INTRO", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "CONSENSUS_NET_TXPOWID", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "CONSENSUS_NET_TXPOWREQUEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "CONSENSUS_NET_TXPOW", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "mDB_", "LOrgMinimaDatabaseMinimaDB;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LOrgMinimaSystemBrainsConsensusHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaDatabaseMinimaDB;LOrgMinimaSystemBrainsConsensusHandler;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "sendNetMessage", "LOrgMinimaUtilsMessagesMessage;LOrgMinimaObjectsBaseMiniByte;LOrgMinimaUtilsStreamable;", "checkCrossover", "LOrgMinimaSystemBackupSyncPackage;", &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX, &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INITIALISE, &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INTRO, &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWID, &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWREQUEST, &OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOW };
  static const J2ObjcClassInfo _OrgMinimaSystemBrainsConsensusNet = { "ConsensusNet", "org.minima.system.brains", ptrTable, methods, fields, 7, 0x1, 5, 8, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBrainsConsensusNet;
}

+ (void)initialize {
  if (self == [OrgMinimaSystemBrainsConsensusNet class]) {
    JreStrongAssign(&OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_INTRO, JreStrcat("$$I", OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX, @"NET_MESSAGE_", [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_INTRO))) getValue]));
    JreStrongAssign(&OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWID, JreStrcat("$$I", OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX, @"NET_MESSAGE_", [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOWID))) getValue]));
    JreStrongAssign(&OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOWREQUEST, JreStrcat("$$I", OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX, @"NET_MESSAGE_", [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW_REQUEST))) getValue]));
    JreStrongAssign(&OrgMinimaSystemBrainsConsensusNet_CONSENSUS_NET_TXPOW, JreStrcat("$$I", OrgMinimaSystemBrainsConsensusNet_CONSENSUS_PREFIX, @"NET_MESSAGE_", [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaSystemNetworkNetClientReader, NETMESSAGE_TXPOW))) getValue]));
    J2OBJC_SET_INITIALIZED(OrgMinimaSystemBrainsConsensusNet)
  }
}

@end

void OrgMinimaSystemBrainsConsensusNet_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaSystemBrainsConsensusNet *self, OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->mDB_, zDB);
  JreStrongAssign(&self->mHandler_, zHandler);
}

OrgMinimaSystemBrainsConsensusNet *new_OrgMinimaSystemBrainsConsensusNet_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBrainsConsensusNet, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaSystemBrainsConsensusNet *create_OrgMinimaSystemBrainsConsensusNet_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBrainsConsensusNet, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusNet_getMainDB(OrgMinimaSystemBrainsConsensusNet *self) {
  return self->mDB_;
}

void OrgMinimaSystemBrainsConsensusNet_sendNetMessageWithOrgMinimaUtilsMessagesMessage_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaUtilsStreamable_(OrgMinimaSystemBrainsConsensusNet *self, OrgMinimaUtilsMessagesMessage *zFromMessage, OrgMinimaObjectsBaseMiniByte *zMessageType, id<OrgMinimaUtilsStreamable> zObject) {
  OrgMinimaSystemNetworkNetClient *client = (OrgMinimaSystemNetworkNetClient *) cast_chk([((OrgMinimaUtilsMessagesMessage *) nil_chk(zFromMessage)) getObjectWithNSString:@"netclient"], [OrgMinimaSystemNetworkNetClient class]);
  OrgMinimaUtilsMessagesMessage *msg = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkNetClient_NETCLIENT_SENDOBJECT);
  [msg addObjectWithNSString:@"type" withId:zMessageType];
  if (zObject != nil) {
    [msg addObjectWithNSString:@"object" withId:zObject];
  }
  [((OrgMinimaSystemNetworkNetClient *) nil_chk(client)) PostMessageWithOrgMinimaUtilsMessagesMessage:msg];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBrainsConsensusNet)
