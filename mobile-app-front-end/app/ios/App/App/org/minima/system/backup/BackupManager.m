//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/backup/BackupManager.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataOutputStream.h"
#include "java/io/File.h"
#include "java/io/FileOutputStream.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/SystemHandler.h"
#include "org/minima/system/backup/BackupManager.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/Streamable.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemBackupBackupManager ()

- (JavaIoFile *)ensureFolderWithJavaIoFile:(JavaIoFile *)zFolder;

- (void)initFolders OBJC_METHOD_FAMILY_NONE;

@end

inline NSString *OrgMinimaSystemBackupBackupManager_get_BACKUP_INIT(void);
static NSString *OrgMinimaSystemBackupBackupManager_BACKUP_INIT = @"BACKUP_INIT";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemBackupBackupManager, BACKUP_INIT, NSString *)

inline NSString *OrgMinimaSystemBackupBackupManager_get_BACKUP_CLEAR(void);
static NSString *OrgMinimaSystemBackupBackupManager_BACKUP_CLEAR = @"BACKUP_CLEAR";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemBackupBackupManager, BACKUP_CLEAR, NSString *)

inline NSString *OrgMinimaSystemBackupBackupManager_get_BACKUP_WRITE(void);
static NSString *OrgMinimaSystemBackupBackupManager_BACKUP_WRITE = @"BACKUP_WRITE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemBackupBackupManager, BACKUP_WRITE, NSString *)

inline NSString *OrgMinimaSystemBackupBackupManager_get_BACKUP_DELETE(void);
static NSString *OrgMinimaSystemBackupBackupManager_BACKUP_DELETE = @"BACKUP_DELETE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemBackupBackupManager, BACKUP_DELETE, NSString *)

__attribute__((unused)) static JavaIoFile *OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(OrgMinimaSystemBackupBackupManager *self, JavaIoFile *zFolder);

__attribute__((unused)) static void OrgMinimaSystemBackupBackupManager_initFolders(OrgMinimaSystemBackupBackupManager *self);

@implementation OrgMinimaSystemBackupBackupManager

- (instancetype)initWithOrgMinimaSystemMain:(OrgMinimaSystemMain *)zMain
                               withNSString:(NSString *)zConfFolder {
  OrgMinimaSystemBackupBackupManager_initWithOrgMinimaSystemMain_withNSString_(self, zMain, zConfFolder);
  return self;
}

- (JavaIoFile *)getRootFolder {
  return mRoot_;
}

- (JavaIoFile *)getTxPOWFolder {
  return mTxPOWDB_;
}

- (JavaIoFile *)getBackUpFolder {
  return mBackup_;
}

- (JavaIoFile *)getBackUpFileWithNSString:(NSString *)name {
  return new_JavaIoFile_initWithJavaIoFile_withNSString_(mBackup_, name);
}

- (JavaIoFile *)getTxpowFileWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTxPoWID {
  return new_JavaIoFile_initWithJavaIoFile_withNSString_(mTxPOWDB_, JreStrcat("$$", [((OrgMinimaObjectsBaseMiniData *) nil_chk(zTxPoWID)) to0xString], @".txpow"));
}

- (void)backupTxpowWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  JavaIoFile *back = new_JavaIoFile_initWithJavaIoFile_withNSString_(mTxPOWDB_, JreStrcat("$$", [((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTxPowID])) to0xString], @".txpow"));
  if ([back exists]) {
    return;
  }
  OrgMinimaUtilsMessagesMessage *backup = new_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_WRITE);
  (void) [backup addObjectWithNSString:@"object" withId:zTxPOW];
  (void) [backup addObjectWithNSString:@"file" withId:back];
  [self PostMessageWithOrgMinimaUtilsMessagesMessage:backup];
}

- (void)deleteTxpowWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  JavaIoFile *delfile = new_JavaIoFile_initWithJavaIoFile_withNSString_(mTxPOWDB_, JreStrcat("$$", [((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTxPowID])) description], @".txpow"));
  OrgMinimaUtilsMessagesMessage *delete_ = new_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_DELETE);
  (void) [delete_ addObjectWithNSString:@"file" withId:delfile];
  [self PostMessageWithOrgMinimaUtilsMessagesMessage:delete_];
}

- (JavaIoFile *)ensureFolderWithJavaIoFile:(JavaIoFile *)zFolder {
  return OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(self, zFolder);
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_INIT]) {
    OrgMinimaSystemBackupBackupManager_initFolders(self);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_CLEAR]) {
    JavaIoFile *root = new_JavaIoFile_initWithNSString_(mConfigurationFolder_);
    if ([root exists]) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$", @"Wiping Minima Folder : ", [root getAbsolutePath]));
      OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(root);
    }
    OrgMinimaSystemBackupBackupManager_initFolders(self);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_WRITE]) {
    id<OrgMinimaUtilsStreamable> stream = (id<OrgMinimaUtilsStreamable>) cast_check([zMessage getObjectWithNSString:@"object"], OrgMinimaUtilsStreamable_class_());
    JavaIoFile *ff = (JavaIoFile *) cast_chk([zMessage getObjectWithNSString:@"file"], [JavaIoFile class]);
    OrgMinimaSystemBackupBackupManager_writeObjectToFileWithJavaIoFile_withOrgMinimaUtilsStreamable_(ff, stream);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_DELETE]) {
    JavaIoFile *ff = (JavaIoFile *) cast_chk([zMessage getObjectWithNSString:@"file"], [JavaIoFile class]);
    OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(ff);
  }
}

- (void)initFolders {
  OrgMinimaSystemBackupBackupManager_initFolders(self);
}

+ (void)deleteAllButMiniDAPPSWithJavaIoFile:(JavaIoFile *)zFolder {
  OrgMinimaSystemBackupBackupManager_deleteAllButMiniDAPPSWithJavaIoFile_(zFolder);
}

+ (void)deleteFileOrFolderWithJavaIoFile:(JavaIoFile *)zFile {
  OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(zFile);
}

+ (void)writeObjectToFileWithJavaIoFile:(JavaIoFile *)zFile
           withOrgMinimaUtilsStreamable:(id<OrgMinimaUtilsStreamable>)zObject {
  OrgMinimaSystemBackupBackupManager_writeObjectToFileWithJavaIoFile_withOrgMinimaUtilsStreamable_(zFile, zObject);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, 12, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 16, 17, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemMain:withNSString:);
  methods[1].selector = @selector(getRootFolder);
  methods[2].selector = @selector(getTxPOWFolder);
  methods[3].selector = @selector(getBackUpFolder);
  methods[4].selector = @selector(getBackUpFileWithNSString:);
  methods[5].selector = @selector(getTxpowFileWithOrgMinimaObjectsBaseMiniData:);
  methods[6].selector = @selector(backupTxpowWithOrgMinimaObjectsTxPOW:);
  methods[7].selector = @selector(deleteTxpowWithOrgMinimaObjectsTxPOW:);
  methods[8].selector = @selector(ensureFolderWithJavaIoFile:);
  methods[9].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[10].selector = @selector(initFolders);
  methods[11].selector = @selector(deleteAllButMiniDAPPSWithJavaIoFile:);
  methods[12].selector = @selector(deleteFileOrFolderWithJavaIoFile:);
  methods[13].selector = @selector(writeObjectToFileWithJavaIoFile:withOrgMinimaUtilsStreamable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BACKUP_INIT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "BACKUP_CLEAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "BACKUP_WRITE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 20, -1, -1 },
    { "BACKUP_DELETE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "mConfigurationFolder_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRoot_", "LJavaIoFile;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBackup_", "LJavaIoFile;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTxPOWDB_", "LJavaIoFile;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMiniDAPPS_", "LJavaIoFile;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaSystemMain;LNSString;", "getBackUpFile", "LNSString;", "getTxpowFile", "LOrgMinimaObjectsBaseMiniData;", "backupTxpow", "LOrgMinimaObjectsTxPOW;", "deleteTxpow", "ensureFolder", "LJavaIoFile;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "deleteAllButMiniDAPPS", "deleteFileOrFolder", "writeObjectToFile", "LJavaIoFile;LOrgMinimaUtilsStreamable;", "LJavaIoIOException;", &OrgMinimaSystemBackupBackupManager_BACKUP_INIT, &OrgMinimaSystemBackupBackupManager_BACKUP_CLEAR, &OrgMinimaSystemBackupBackupManager_BACKUP_WRITE, &OrgMinimaSystemBackupBackupManager_BACKUP_DELETE };
  static const J2ObjcClassInfo _OrgMinimaSystemBackupBackupManager = { "BackupManager", "org.minima.system.backup", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBackupBackupManager;
}

@end

void OrgMinimaSystemBackupBackupManager_initWithOrgMinimaSystemMain_withNSString_(OrgMinimaSystemBackupBackupManager *self, OrgMinimaSystemMain *zMain, NSString *zConfFolder) {
  OrgMinimaSystemSystemHandler_initWithOrgMinimaSystemMain_withNSString_(self, zMain, @"BACKUP");
  self->mConfigurationFolder_ = @"";
  self->mConfigurationFolder_ = zConfFolder;
  [self PostMessageWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_INIT];
}

OrgMinimaSystemBackupBackupManager *new_OrgMinimaSystemBackupBackupManager_initWithOrgMinimaSystemMain_withNSString_(OrgMinimaSystemMain *zMain, NSString *zConfFolder) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBackupBackupManager, initWithOrgMinimaSystemMain_withNSString_, zMain, zConfFolder)
}

OrgMinimaSystemBackupBackupManager *create_OrgMinimaSystemBackupBackupManager_initWithOrgMinimaSystemMain_withNSString_(OrgMinimaSystemMain *zMain, NSString *zConfFolder) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBackupBackupManager, initWithOrgMinimaSystemMain_withNSString_, zMain, zConfFolder)
}

JavaIoFile *OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(OrgMinimaSystemBackupBackupManager *self, JavaIoFile *zFolder) {
  if (![((JavaIoFile *) nil_chk(zFolder)) exists]) {
    [zFolder mkdirs];
  }
  return zFolder;
}

void OrgMinimaSystemBackupBackupManager_initFolders(OrgMinimaSystemBackupBackupManager *self) {
  self->mRoot_ = OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(self, new_JavaIoFile_initWithNSString_(self->mConfigurationFolder_));
  self->mTxPOWDB_ = OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(self, new_JavaIoFile_initWithJavaIoFile_withNSString_(self->mRoot_, @"txpow"));
  self->mBackup_ = OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(self, new_JavaIoFile_initWithJavaIoFile_withNSString_(self->mRoot_, @"backup"));
  self->mMiniDAPPS_ = OrgMinimaSystemBackupBackupManager_ensureFolderWithJavaIoFile_(self, new_JavaIoFile_initWithJavaIoFile_withNSString_(self->mRoot_, @"minidapps"));
}

void OrgMinimaSystemBackupBackupManager_deleteAllButMiniDAPPSWithJavaIoFile_(JavaIoFile *zFolder) {
  OrgMinimaSystemBackupBackupManager_initialize();
  OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(new_JavaIoFile_initWithJavaIoFile_withNSString_(zFolder, @"txpow"));
  OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(new_JavaIoFile_initWithJavaIoFile_withNSString_(zFolder, @"backup"));
}

void OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(JavaIoFile *zFile) {
  OrgMinimaSystemBackupBackupManager_initialize();
  if (zFile == nil || ![zFile exists]) {
    return;
  }
  if ([zFile isDirectory]) {
    IOSObjectArray *files = [zFile listFiles];
    if (files != nil) {
      {
        IOSObjectArray *a__ = files;
        JavaIoFile * const *b__ = a__->buffer_;
        JavaIoFile * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          JavaIoFile *ff = *b__++;
          OrgMinimaSystemBackupBackupManager_deleteFileOrFolderWithJavaIoFile_(ff);
        }
      }
    }
  }
  if ([((NSString *) nil_chk([((NSString *) nil_chk([zFile getAbsolutePath])) lowercaseString])) java_contains:@"minima"]) {
    [zFile delete__];
  }
}

void OrgMinimaSystemBackupBackupManager_writeObjectToFileWithJavaIoFile_withOrgMinimaUtilsStreamable_(JavaIoFile *zFile, id<OrgMinimaUtilsStreamable> zObject) {
  OrgMinimaSystemBackupBackupManager_initialize();
  JavaIoFile *parent = [((JavaIoFile *) nil_chk(zFile)) getParentFile];
  if (![((JavaIoFile *) nil_chk(parent)) exists]) {
    [parent mkdirs];
  }
  if ([zFile exists]) {
    [zFile delete__];
  }
  [zFile createNewFile];
  JavaIoFileOutputStream *fos = new_JavaIoFileOutputStream_initWithJavaIoFile_withBoolean_(zFile, false);
  JavaIoDataOutputStream *dos = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(fos);
  [((id<OrgMinimaUtilsStreamable>) nil_chk(zObject)) writeDataStreamWithJavaIoDataOutputStream:dos];
  [dos flush];
  [fos flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBackupBackupManager)
