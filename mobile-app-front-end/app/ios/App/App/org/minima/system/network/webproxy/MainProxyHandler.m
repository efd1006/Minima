//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/webproxy/MainProxyHandler.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Random.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/minima/system/network/webproxy/MainProxyHandler.h"
#include "org/minima/system/network/webproxy/NIOServerHost.h"
#include "org/minima/system/network/webproxy/ProxyRPCServer.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"
#include "org/minima/utils/messages/MessageProcessor.h"

NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_STARTUP = @"PROXY_STARTUP";
NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_SHUTDOWN = @"PROXY_SHUTDOWN";
NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_RPC_REQUEST = @"PROXY_RPC_REQUEST";
NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_MESSAGE = @"PROXY_USER_MESSAGE";
NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_CLOSE = @"PROXY_USER_CLOSE";
NSString *OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_ADMIN_MESSAGE = @"PROXY_ADMIN_MESSAGE";

@implementation OrgMinimaSystemNetworkWebproxyMainProxyHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemNetworkWebproxyMainProxyHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:zMessage];
  if ([((NSString *) nil_chk([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_STARTUP]) {
    JreStrongAssignAndConsume(&mGETProxy_, new_OrgMinimaSystemNetworkWebproxyProxyRPCServer_initWithOrgMinimaSystemNetworkWebproxyMainProxyHandler_withInt_(self, 8001));
    JreStrongAssignAndConsume(&mUserHost_, new_OrgMinimaSystemNetworkWebproxyNIOServerHost_initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(8000, self));
  }
  else if ([((NSString *) nil_chk([zMessage getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_SHUTDOWN]) {
    [((OrgMinimaSystemNetworkWebproxyNIOServerHost *) nil_chk(mUserHost_)) stop];
    [((OrgMinimaSystemNetworkWebproxyProxyRPCServer *) nil_chk(mGETProxy_)) stop];
    [self stopMessageProcessor];
  }
  else if ([((NSString *) nil_chk([zMessage getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_RPC_REQUEST]) {
    NSString *request = [zMessage getStringWithNSString:@"request"];
    NSString *webid = [zMessage getStringWithNSString:@"webid"];
    OrgMinimaUtilsResponseStream *resp = (OrgMinimaUtilsResponseStream *) cast_chk([zMessage getObjectWithNSString:@"response"], [OrgMinimaUtilsResponseStream class]);
    JavaLangInteger *userid = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mWebToUser_)) getWithId:webid];
    if (userid == nil) {
      [((OrgMinimaUtilsResponseStream *) nil_chk(resp)) endStatusWithBoolean:false withNSString:@"User not found.."];
      return;
    }
    NSString *randid = JreStrcat("$I", webid, [((JavaUtilRandom *) nil_chk(mRand_)) nextInt]);
    while ([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mResponses_)) containsKeyWithId:randid]) {
      randid = JreStrcat("$I", webid, [((JavaUtilRandom *) nil_chk(mRand_)) nextInt]);
    }
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mResponses_)) putWithId:randid withId:resp];
    NSString *message = JreStrcat("$C$", randid, ':', request);
    [((OrgMinimaSystemNetworkWebproxyNIOServerHost *) nil_chk(mUserHost_)) sendToUserWithNSString:message withJavaLangInteger:userid];
  }
  else if ([((NSString *) nil_chk([zMessage getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_ADMIN_MESSAGE]) {
    NSString *msg = [zMessage getStringWithNSString:@"data"];
    if ([((NSString *) nil_chk(msg)) isEqual:@"exit"]) {
      [self PostMessageWithNSString:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_SHUTDOWN];
    }
    else if ([msg isEqual:@"channels"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"All channels : ", ((OrgMinimaSystemNetworkWebproxyNIOServerHost *) nil_chk(mUserHost_))->mChannels_)];
    }
    else if ([msg isEqual:@"requests"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Pending requests : ", mResponses_)];
    }
    else if ([msg isEqual:@"users"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"All user weblinks : ", mUserToWeb_)];
    }
    else if ([msg isEqual:@"help"]) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"channels requests users help exit"];
    }
  }
  else if ([((NSString *) nil_chk([zMessage getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_CLOSE]) {
    JavaLangInteger *userid = create_JavaLangInteger_initWithInt_([zMessage getIntegerWithNSString:@"userid"]);
    NSString *webid = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mUserToWeb_)) getWithId:userid];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mWebToUser_)) removeWithId:webid];
    [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mUserToWeb_)) removeWithId:userid];
  }
  else if ([((NSString *) nil_chk([zMessage getMessageType])) isEqual:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_MESSAGE]) {
    NSString *data = [zMessage getStringWithNSString:@"data"];
    JavaLangInteger *userid = create_JavaLangInteger_initWithInt_([zMessage getIntegerWithNSString:@"userid"]);
    jint index = [((NSString *) nil_chk(data)) java_indexOfString:@":"];
    if ([data java_hasPrefix:@"init:"]) {
      NSString *webid = [data java_substring:index + 1];
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mUserToWeb_)) putWithId:userid withId:webid];
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mWebToUser_)) putWithId:webid withId:userid];
    }
    else if ([data java_hasPrefix:@"notify:"]) {
      NSString *webid = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mUserToWeb_)) getWithId:userid];
    }
    else {
      NSString *randid = [data java_substring:0 endIndex:index];
      NSString *result = [data java_substring:index + 1];
      OrgMinimaUtilsResponseStream *resp = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mResponses_)) getWithId:randid];
      [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mResponses_)) removeWithId:randid];
      [((OrgMinimaUtilsResponseStream *) nil_chk(resp)) hardEndStatusWithNSString:result];
    }
  }
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaSystemNetworkWebproxyMainProxyHandler_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mUserHost_);
  RELEASE_(mGETProxy_);
  RELEASE_(mResponses_);
  RELEASE_(mUserToWeb_);
  RELEASE_(mWebToUser_);
  RELEASE_(mRand_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PROXY_STARTUP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "PROXY_SHUTDOWN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "PROXY_RPC_REQUEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "PROXY_USER_MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "PROXY_USER_CLOSE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "PROXY_ADMIN_MESSAGE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "mUserHost_", "LOrgMinimaSystemNetworkWebproxyNIOServerHost;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGETProxy_", "LOrgMinimaSystemNetworkWebproxyProxyRPCServer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mResponses_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 11, -1 },
    { "mUserToWeb_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "mWebToUser_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 13, -1 },
    { "mRand_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "main", "[LNSString;", &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_STARTUP, &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_SHUTDOWN, &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_RPC_REQUEST, &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_MESSAGE, &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_CLOSE, &OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_ADMIN_MESSAGE, "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Lorg/minima/utils/ResponseStream;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Integer;Ljava/lang/String;>;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebproxyMainProxyHandler = { "MainProxyHandler", "org.minima.system.network.webproxy", ptrTable, methods, fields, 7, 0x1, 3, 12, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkWebproxyMainProxyHandler;
}

@end

void OrgMinimaSystemNetworkWebproxyMainProxyHandler_init(OrgMinimaSystemNetworkWebproxyMainProxyHandler *self) {
  OrgMinimaUtilsMessagesMessageProcessor_initWithNSString_(self, @"proxyhandler");
  JreStrongAssignAndConsume(&self->mResponses_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->mUserToWeb_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->mWebToUser_, new_JavaUtilConcurrentConcurrentHashMap_init());
  JreStrongAssignAndConsume(&self->mRand_, new_JavaUtilRandom_init());
  [self PostMessageWithNSString:OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_STARTUP];
}

OrgMinimaSystemNetworkWebproxyMainProxyHandler *new_OrgMinimaSystemNetworkWebproxyMainProxyHandler_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebproxyMainProxyHandler, init)
}

OrgMinimaSystemNetworkWebproxyMainProxyHandler *create_OrgMinimaSystemNetworkWebproxyMainProxyHandler_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebproxyMainProxyHandler, init)
}

void OrgMinimaSystemNetworkWebproxyMainProxyHandler_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaSystemNetworkWebproxyMainProxyHandler_initialize();
  OrgMinimaSystemNetworkWebproxyMainProxyHandler *PROXY = create_OrgMinimaSystemNetworkWebproxyMainProxyHandler_init();
  JavaIoInputStreamReader *is = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(JreLoadStatic(JavaLangSystem, in));
  JavaIoBufferedReader *bis = create_JavaIoBufferedReader_initWithJavaIoReader_(is);
  while (true) {
    @try {
      NSString *input = [((NSString *) nil_chk([bis readLine])) java_trim];
      if (![((NSString *) nil_chk(input)) isEqual:@""]) {
        [PROXY PostMessageWithOrgMinimaUtilsMessagesMessage:[create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_ADMIN_MESSAGE) addStringWithNSString:@"data" withNSString:input]];
        if ([input isEqual:@"exit"]) {
          break;
        }
      }
    }
    @catch (JavaIoIOException *ex) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("@", ex));
    }
  }
  @try {
    [bis close];
    [is close];
  }
  @catch (JavaIoIOException *ex) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("@", ex));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkWebproxyMainProxyHandler)
