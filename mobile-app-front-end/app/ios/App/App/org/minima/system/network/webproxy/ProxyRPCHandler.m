//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/webproxy/ProxyRPCHandler.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/Socket.h"
#include "java/net/URLDecoder.h"
#include "java/util/Date.h"
#include "java/util/StringTokenizer.h"
#include "org/minima/system/network/webproxy/MainProxyHandler.h"
#include "org/minima/system/network/webproxy/ProxyRPCHandler.h"
#include "org/minima/utils/MiniFormat.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemNetworkWebproxyProxyRPCHandler

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)zSocket
withOrgMinimaSystemNetworkWebproxyMainProxyHandler:(OrgMinimaSystemNetworkWebproxyMainProxyHandler *)zHandler {
  OrgMinimaSystemNetworkWebproxyProxyRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(self, zSocket, zHandler);
  return self;
}

- (void)run {
  JavaIoBufferedReader *in = nil;
  JavaIoPrintWriter *out = nil;
  NSString *fileRequested = nil;
  @try {
    in = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getInputStream]));
    out = create_JavaIoPrintWriter_initWithJavaIoOutputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getOutputStream]);
    NSString *input = [in readLine];
    JavaUtilStringTokenizer *parse = create_JavaUtilStringTokenizer_initWithNSString_(input);
    NSString *method = [((NSString *) nil_chk([parse nextToken])) uppercaseString];
    fileRequested = [((NSString *) nil_chk([parse nextToken])) lowercaseString];
    if ([((NSString *) nil_chk(method)) isEqual:@"GET"]) {
      NSString *function = [NSString stringWithString:fileRequested];
      if ([function java_hasPrefix:@"/"]) {
        function = [function java_substring:1];
      }
      function = [((NSString *) nil_chk(JavaNetURLDecoder_decodeWithNSString_withNSString_(function, @"UTF-8"))) java_trim];
      if ([((NSString *) nil_chk(function)) isEqual:@"favicon.ico"] || [function isEqual:@""]) {
        @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$$$", @"favion.ico or blank [", function, @"] is nooo good.."));
      }
      jint index = [function java_indexOfString:@"&"];
      NSString *uid = [function java_substring:0 endIndex:index];
      NSString *req = [function java_substring:index + 1];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"proxy function : ", req)];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"proxy uid      : ", uid)];
      OrgMinimaUtilsResponseStream *response = create_OrgMinimaUtilsResponseStream_init();
      OrgMinimaUtilsMessagesMessage *proxyreq = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_RPC_REQUEST);
      [proxyreq addObjectWithNSString:@"response" withId:response];
      [proxyreq addStringWithNSString:@"request" withNSString:req];
      [proxyreq addObjectWithNSString:@"webid" withId:uid];
      [((OrgMinimaSystemNetworkWebproxyMainProxyHandler *) nil_chk(mHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:proxyreq];
      [response waitToFinish];
      NSString *resp = [response getResponse];
      if ([((NSString *) nil_chk(resp)) java_hasPrefix:@"{"]) {
        resp = OrgMinimaUtilsMiniFormat_PrettyJSONWithNSString_(resp);
      }
      [out printlnWithNSString:@"HTTP/1.1 200 OK"];
      [out printlnWithNSString:@"Server: HTTP RPC Server from Minima : 1.0"];
      [out printlnWithNSString:JreStrcat("$@", @"Date: ", create_JavaUtilDate_init())];
      [out printlnWithNSString:@"Content-type: text/plain"];
      [out printlnWithNSString:JreStrcat("$I", @"Content-length: ", [((NSString *) nil_chk(resp)) java_length])];
      [out printlnWithNSString:@"Access-Control-Allow-Origin: *"];
      [out println];
      [out printlnWithNSString:resp];
      [out flush];
    }
  }
  @catch (JavaIoIOException *ioe) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$@", @"Server error : ", ioe)];
  }
  @finally {
    @try {
      [((JavaIoBufferedReader *) nil_chk(in)) close];
      [((JavaIoPrintWriter *) nil_chk(out)) close];
      [((JavaNetSocket *) nil_chk(mSocket_)) close];
    }
    @catch (JavaLangException *e) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error closing stream : ", [e getMessage])];
    }
  }
}

- (void)dealloc {
  RELEASE_(mSocket_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetSocket:withOrgMinimaSystemNetworkWebproxyMainProxyHandler:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LOrgMinimaSystemNetworkWebproxyMainProxyHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetSocket;LOrgMinimaSystemNetworkWebproxyMainProxyHandler;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebproxyProxyRPCHandler = { "ProxyRPCHandler", "org.minima.system.network.webproxy", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkWebproxyProxyRPCHandler;
}

@end

void OrgMinimaSystemNetworkWebproxyProxyRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(OrgMinimaSystemNetworkWebproxyProxyRPCHandler *self, JavaNetSocket *zSocket, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->mSocket_, zSocket);
  JreStrongAssign(&self->mHandler_, zHandler);
}

OrgMinimaSystemNetworkWebproxyProxyRPCHandler *new_OrgMinimaSystemNetworkWebproxyProxyRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(JavaNetSocket *zSocket, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebproxyProxyRPCHandler, initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_, zSocket, zHandler)
}

OrgMinimaSystemNetworkWebproxyProxyRPCHandler *create_OrgMinimaSystemNetworkWebproxyProxyRPCHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(JavaNetSocket *zSocket, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebproxyProxyRPCHandler, initWithJavaNetSocket_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_, zSocket, zHandler)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkWebproxyProxyRPCHandler)
