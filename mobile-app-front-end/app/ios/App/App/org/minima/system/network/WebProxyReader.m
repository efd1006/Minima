//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/WebProxyReader.java
//

#include "J2ObjC_source.h"
#include "java/io/BufferedReader.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/net/Socket.h"
#include "org/minima/system/network/WebProxyManager.h"
#include "org/minima/system/network/WebProxyReader.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemNetworkWebProxyReader

- (instancetype)initWithOrgMinimaSystemNetworkWebProxyManager:(OrgMinimaSystemNetworkWebProxyManager *)zManager {
  OrgMinimaSystemNetworkWebProxyReader_initWithOrgMinimaSystemNetworkWebProxyManager_(self, zManager);
  return self;
}

- (void)run {
  @try {
    JavaIoBufferedReader *bis = create_JavaIoBufferedReader_initWithJavaIoReader_(create_JavaIoInputStreamReader_initWithJavaIoInputStream_([((JavaNetSocket *) nil_chk([((OrgMinimaSystemNetworkWebProxyManager *) nil_chk(mManager_)) getSocket])) getInputStream]));
    while (true) {
      NSString *request = [bis readLine];
      if (request == nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Proxy Web Link null input.. shutdown"];
        break;
      }
      jint index = [request java_indexOfString:@":"];
      NSString *rid = [request java_substring:0 endIndex:index];
      NSString *function = [request java_substring:index + 1];
      OrgMinimaUtilsMessagesMessage *reqmsg = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_REQUEST);
      [reqmsg addStringWithNSString:@"function" withNSString:function];
      [reqmsg addStringWithNSString:@"randid" withNSString:rid];
      [((OrgMinimaSystemNetworkWebProxyManager *) nil_chk(mManager_)) PostMessageWithOrgMinimaUtilsMessagesMessage:reqmsg];
    }
  }
  @catch (JavaLangException *exc) {
  }
  [((OrgMinimaSystemNetworkWebProxyManager *) nil_chk(mManager_)) PostMessageWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_SHUTDOWN];
}

- (void)dealloc {
  RELEASE_(mManager_);

}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemNetworkWebProxyManager:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mManager_", "LOrgMinimaSystemNetworkWebProxyManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaSystemNetworkWebProxyManager;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebProxyReader = { "WebProxyReader", "org.minima.system.network", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkWebProxyReader;
}

@end

void OrgMinimaSystemNetworkWebProxyReader_initWithOrgMinimaSystemNetworkWebProxyManager_(OrgMinimaSystemNetworkWebProxyReader *self, OrgMinimaSystemNetworkWebProxyManager *zManager) {
  NSObject_init(self);
  JreStrongAssign(&self->mManager_, zManager);
}

OrgMinimaSystemNetworkWebProxyReader *new_OrgMinimaSystemNetworkWebProxyReader_initWithOrgMinimaSystemNetworkWebProxyManager_(OrgMinimaSystemNetworkWebProxyManager *zManager) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebProxyReader, initWithOrgMinimaSystemNetworkWebProxyManager_, zManager)
}

OrgMinimaSystemNetworkWebProxyReader *create_OrgMinimaSystemNetworkWebProxyReader_initWithOrgMinimaSystemNetworkWebProxyManager_(OrgMinimaSystemNetworkWebProxyManager *zManager) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebProxyReader, initWithOrgMinimaSystemNetworkWebProxyManager_, zManager)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkWebProxyReader)
