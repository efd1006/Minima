//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/brains/ConsensusPrint.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "org/minima/GlobalParams.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/coindb/CoinDB.h"
#include "org/minima/database/coindb/CoinDBPrinter.h"
#include "org/minima/database/coindb/CoinDBRow.h"
#include "org/minima/database/mmr/MMRPrint.h"
#include "org/minima/database/mmr/MMRProof.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowdb/TxPowDB.h"
#include "org/minima/database/txpowdb/TxPowDBPrinter.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/database/txpowtree/BlockTreePrinter.h"
#include "org/minima/database/userdb/UserDB.h"
#include "org/minima/objects/Address.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/PubPrivKey.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/backup/BackupManager.h"
#include "org/minima/system/bootstrap/UserSimulator.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusPrint.h"
#include "org/minima/system/input/InputHandler.h"
#include "org/minima/system/network/MultiServer.h"
#include "org/minima/system/network/NetClient.h"
#include "org/minima/system/network/NetworkHandler.h"
#include "org/minima/system/network/rpc/RPCServer.h"
#include "org/minima/utils/Maths.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemBrainsConsensusPrint ()

- (OrgMinimaDatabaseMinimaDB *)getMainDB;

- (OrgMinimaSystemBrainsConsensusHandler *)getHandler;

- (OrgMinimaObjectsBaseMiniNumber *)getIfExistsWithJavaUtilHashtable:(JavaUtilHashtable *)zHashTable
                                  withOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zToken;

@end

__attribute__((unused)) static OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusPrint_getMainDB(OrgMinimaSystemBrainsConsensusPrint *self);

__attribute__((unused)) static OrgMinimaSystemBrainsConsensusHandler *OrgMinimaSystemBrainsConsensusPrint_getHandler(OrgMinimaSystemBrainsConsensusPrint *self);

__attribute__((unused)) static OrgMinimaObjectsBaseMiniNumber *OrgMinimaSystemBrainsConsensusPrint_getIfExistsWithJavaUtilHashtable_withOrgMinimaObjectsBaseMiniData32_(OrgMinimaSystemBrainsConsensusPrint *self, JavaUtilHashtable *zHashTable, OrgMinimaObjectsBaseMiniData32 *zToken);

NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PREFIX = @"CONSENSUSPRINT_";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_BALANCE = @"CONSENSUSPRINT_BALANCE";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_COINS = @"CONSENSUSPRINT_COINS";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_TXPOW = @"CONSENSUSPRINT_TXPOW";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_KEYS = @"CONSENSUSPRINT_KEYS";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_STATUS = @"CONSENSUSPRINT_STATUS";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN = @"CONSENSUSPRINT_PRINTCHAIN";
NSString *OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN_TREE = @"CONSENSUSPRINT_PRINTCHAIN_TREE";

@implementation OrgMinimaSystemBrainsConsensusPrint

- (instancetype)initWithOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB
        withOrgMinimaSystemBrainsConsensusHandler:(OrgMinimaSystemBrainsConsensusHandler *)zHandler {
  OrgMinimaSystemBrainsConsensusPrint_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(self, zDB, zHandler);
  return self;
}

- (OrgMinimaDatabaseMinimaDB *)getMainDB {
  return OrgMinimaSystemBrainsConsensusPrint_getMainDB(self);
}

- (OrgMinimaSystemBrainsConsensusHandler *)getHandler {
  return OrgMinimaSystemBrainsConsensusPrint_getHandler(self);
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN]) {
    OrgMinimaDatabaseTxpowtreeBlockTreePrinter *treeprint = create_OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree], false);
    [treeprint printtree];
    OrgMinimaDatabaseTxpowdbTxPowDBPrinter_PrintDBWithOrgMinimaDatabaseTxpowdbTxPowDB_([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getTxPowDB]);
    OrgMinimaDatabaseCoindbCoinDBPrinter_PrintWithOrgMinimaDatabaseCoindbCoinDB_([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getCoinDB]);
    if ([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainRoot] == nil) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(@"NO BLOCKS!");
      return;
    }
    OrgMinimaUtilsMinimaLogger_logWithNSString_(@"---");
    OrgMinimaUtilsMinimaLogger_logWithNSString_(@"MMR");
    OrgMinimaUtilsMinimaLogger_logWithNSString_(@"---");
    OrgMinimaDatabaseMmrMMRSet *set = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainTip])) getMMRSet];
    OrgMinimaDatabaseMmrMMRPrint_PrintWithOrgMinimaDatabaseMmrMMRSet_(set);
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN_TREE]) {
    OrgMinimaDatabaseTxpowtreeBlockTreePrinter *treeprint = create_OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree], true);
    [treeprint printtree];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_BALANCE]) {
    OrgMinimaObjectsBaseMiniNumber *top = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getTopBlock];
    JavaUtilHashtable *totals_confirmed = create_JavaUtilHashtable_init();
    JavaUtilHashtable *totals_unconfirmed = create_JavaUtilHashtable_init();
    JavaUtilArrayList *coins = [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getCoinDB])) getComplete];
    for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong coin in nil_chk(coins)) {
      if ([((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(coin)) isInBlock]) {
        NSString *tokid = [((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk([coin getCoin])) getTokenID])) to0xString];
        OrgMinimaObjectsBaseMiniNumber *depth = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(top)) subWithOrgMinimaObjectsBaseMiniNumber:[coin getInBlockNumber]];
        if (![coin isSpent]) {
          if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(depth)) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaGlobalParams, MINIMA_CONFIRM_DEPTH)]) {
            OrgMinimaObjectsBaseMiniNumber *curr = [totals_confirmed getWithId:tokid];
            if (curr == nil) {
              curr = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
            }
            curr = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(curr)) addWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsCoin *) nil_chk([coin getCoin])) getAmount]];
            [totals_confirmed putWithId:tokid withId:curr];
          }
          else {
            OrgMinimaObjectsBaseMiniNumber *curr = [totals_unconfirmed getWithId:tokid];
            if (curr == nil) {
              curr = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
            }
            curr = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(curr)) addWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsCoin *) nil_chk([coin getCoin])) getAmount]];
            [totals_unconfirmed putWithId:tokid withId:curr];
          }
        }
      }
    }
    OrgMinimaUtilsJsonJSONObject *allbal = OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage);
    OrgMinimaUtilsJsonJSONArray *totbal = create_OrgMinimaUtilsJsonJSONArray_init();
    id<JavaUtilEnumeration> keys = [totals_confirmed keys];
    while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
      NSString *key = [keys nextElement];
      OrgMinimaObjectsBaseMiniNumber *tot = [totals_confirmed getWithId:key];
      OrgMinimaUtilsJsonJSONObject *minbal = create_OrgMinimaUtilsJsonJSONObject_init();
      [minbal putWithId:@"tokenid" withId:key];
      [minbal putWithId:@"amount" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) description]];
      [totbal addWithId:minbal];
    }
    [((OrgMinimaUtilsJsonJSONObject *) nil_chk(allbal)) putWithId:@"confirmed" withId:totbal];
    totbal = create_OrgMinimaUtilsJsonJSONArray_init();
    keys = [totals_unconfirmed keys];
    while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
      NSString *key = [keys nextElement];
      OrgMinimaObjectsBaseMiniNumber *tot = [totals_unconfirmed getWithId:key];
      OrgMinimaUtilsJsonJSONObject *minbal = create_OrgMinimaUtilsJsonJSONObject_init();
      [minbal putWithId:@"tokenid" withId:key];
      [minbal putWithId:@"amount" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) description]];
      [totbal addWithId:minbal];
    }
    [allbal putWithId:@"unconfirmed" withId:totbal];
    OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, true, @"");
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_COINS]) {
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *tip = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainTip];
    OrgMinimaDatabaseMmrMMRSet *baseset = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(tip)) getMMRSet];
    OrgMinimaObjectsBaseMiniNumber *top = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getTopBlock];
    JavaUtilArrayList *coins = [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getCoinDB])) getComplete];
    jint counter = 0;
    for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong coin in nil_chk(coins)) {
      if (![((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(coin)) isSpent]) {
        [((OrgMinimaUtilsJsonJSONObject *) nil_chk(OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage))) putWithId:JavaLangInteger_valueOfWithInt_(counter++) withId:[((OrgMinimaDatabaseMmrMMRSet *) nil_chk(baseset)) getProofWithOrgMinimaObjectsBaseMiniNumber:[coin getMMREntry]]];
      }
    }
    OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, true, @"");
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_TXPOW]) {
    NSString *txpow = [zMessage getStringWithNSString:@"txpow"];
    OrgMinimaObjectsBaseMiniData32 *txp = create_OrgMinimaObjectsBaseMiniData32_initWithNSString_(txpow);
    OrgMinimaObjectsTxPOW *pow = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getTxPOWWithOrgMinimaObjectsBaseMiniData32:txp];
    if (pow == nil) {
      OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, false, JreStrcat("$$", @"No TxPOW found for ", txpow));
    }
    else {
      [((OrgMinimaUtilsJsonJSONObject *) nil_chk(OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage))) putWithId:@"txpow" withId:[pow toJSON]];
      OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, true, @"");
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_KEYS]) {
    JavaUtilArrayList *keys = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getUserDB])) getKeys];
    OrgMinimaUtilsJsonJSONArray *arrpub = create_OrgMinimaUtilsJsonJSONArray_init();
    for (OrgMinimaObjectsPubPrivKey * __strong key in nil_chk(keys)) {
      [arrpub addWithId:[((OrgMinimaObjectsPubPrivKey *) nil_chk(key)) description]];
    }
    [((OrgMinimaUtilsJsonJSONObject *) nil_chk(OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage))) putWithId:@"publickeys" withId:arrpub];
    JavaUtilArrayList *addresses = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getUserDB])) getAllAddresses];
    OrgMinimaUtilsJsonJSONArray *arraddr = create_OrgMinimaUtilsJsonJSONArray_init();
    for (OrgMinimaObjectsAddress * __strong addr in nil_chk(addresses)) {
      [arraddr addWithId:[((OrgMinimaObjectsAddress *) nil_chk(addr)) toJSON]];
    }
    [((OrgMinimaUtilsJsonJSONObject *) nil_chk(OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage))) putWithId:@"addresses" withId:arraddr];
    OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, true, @"");
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_STATUS]) {
    OrgMinimaSystemMain *main = [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getHandler(self))) getMainHandler];
    if ([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainRoot] == nil) {
      OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, false, @"No blocks!");
      return;
    }
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *tip = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainTip];
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *root = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainRoot];
    OrgMinimaObjectsBaseMiniNumber *lastblock = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(tip)) getTxPow])) getBlockNumber];
    OrgMinimaUtilsJsonJSONObject *status = OrgMinimaSystemInputInputHandler_getResponseJSONWithOrgMinimaUtilsMessagesMessage_(zMessage);
    [((OrgMinimaUtilsJsonJSONObject *) nil_chk(status)) putWithId:@"version" withId:JavaLangDouble_valueOfWithDouble_(0.4)];
    jlong timediff = JavaLangSystem_currentTimeMillis() - [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getHandler(self))) getMainHandler])) getNodeStartTime];
    NSString *uptime = OrgMinimaUtilsMaths_ConvertMilliToTimeWithLong_(timediff);
    [status putWithId:@"milliuptime" withId:JavaLangLong_valueOfWithLong_(timediff)];
    [status putWithId:@"stringuptime" withId:uptime];
    [status putWithId:@"conf" withId:[((OrgMinimaSystemBackupBackupManager *) nil_chk([((OrgMinimaSystemMain *) nil_chk(main)) getBackupManager])) getRootFolder]];
    [status putWithId:@"host" withId:[((OrgMinimaSystemNetworkMultiServer *) nil_chk([((OrgMinimaSystemNetworkNetworkHandler *) nil_chk([main getNetworkHandler])) getServer])) getHost]];
    [status putWithId:@"port" withId:JavaLangInteger_valueOfWithInt_([((OrgMinimaSystemNetworkMultiServer *) nil_chk([((OrgMinimaSystemNetworkNetworkHandler *) nil_chk([main getNetworkHandler])) getServer])) getPort])];
    [status putWithId:@"rpcport" withId:JavaLangInteger_valueOfWithInt_([((OrgMinimaSystemNetworkRpcRPCServer *) nil_chk([((OrgMinimaSystemNetworkNetworkHandler *) nil_chk([main getNetworkHandler])) getRPCServer])) getPort])];
    [status putWithId:@"pulse" withId:JavaLangBoolean_valueOfWithBoolean_(((OrgMinimaSystemBootstrapUserSimulator *) nil_chk([main getsimulator]))->mMiningON_)];
    [status putWithId:@"root" withId:[((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(root)) getTxPow])) toJSON]];
    [status putWithId:@"tip" withId:[((OrgMinimaObjectsTxPOW *) nil_chk([tip getTxPow])) toJSON]];
    [status putWithId:@"chainspeed" withId:JavaLangDouble_valueOfWithDouble_([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusPrint_getMainDB(self))) getMainTree])) getChainSpeed])];
    [status putWithId:@"lastblock" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(lastblock)) description]];
    [status putWithId:@"totalpow" withId:[((JavaMathBigInteger *) nil_chk([root getTotalWeight])) description]];
    JavaUtilArrayList *nets = [((OrgMinimaSystemNetworkNetworkHandler *) nil_chk([main getNetworkHandler])) getNetClients];
    OrgMinimaUtilsJsonJSONArray *netarr = create_OrgMinimaUtilsJsonJSONArray_init();
    if ([((JavaUtilArrayList *) nil_chk(nets)) size] > 0) {
      for (OrgMinimaSystemNetworkNetClient * __strong net in nets) {
        [netarr addWithId:[((OrgMinimaSystemNetworkNetClient *) nil_chk(net)) toJSON]];
      }
    }
    [status putWithId:@"network" withId:netarr];
    OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(zMessage, true, @"");
    {
      return;
    }
  }
}

- (OrgMinimaObjectsBaseMiniNumber *)getIfExistsWithJavaUtilHashtable:(JavaUtilHashtable *)zHashTable
                                  withOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zToken {
  return OrgMinimaSystemBrainsConsensusPrint_getIfExistsWithJavaUtilHashtable_withOrgMinimaObjectsBaseMiniData32_(self, zHashTable, zToken);
}

- (void)dealloc {
  RELEASE_(mDB_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMinimaDB;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemBrainsConsensusHandler;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x2, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaDatabaseMinimaDB:withOrgMinimaSystemBrainsConsensusHandler:);
  methods[1].selector = @selector(getMainDB);
  methods[2].selector = @selector(getHandler);
  methods[3].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[4].selector = @selector(getIfExistsWithJavaUtilHashtable:withOrgMinimaObjectsBaseMiniData32:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONSENSUS_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "CONSENSUS_BALANCE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "CONSENSUS_COINS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "CONSENSUS_TXPOW", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "CONSENSUS_KEYS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 11, -1, -1 },
    { "CONSENSUS_STATUS", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "CONSENSUS_PRINTCHAIN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "CONSENSUS_PRINTCHAIN_TREE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "mDB_", "LOrgMinimaDatabaseMinimaDB;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LOrgMinimaSystemBrainsConsensusHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaDatabaseMinimaDB;LOrgMinimaSystemBrainsConsensusHandler;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "getIfExists", "LJavaUtilHashtable;LOrgMinimaObjectsBaseMiniData32;", "(Ljava/util/Hashtable<Lorg/minima/objects/base/MiniData32;Lorg/minima/objects/base/MiniNumber;>;Lorg/minima/objects/base/MiniData32;)Lorg/minima/objects/base/MiniNumber;", &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PREFIX, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_BALANCE, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_COINS, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_TXPOW, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_KEYS, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_STATUS, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN, &OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_PRINTCHAIN_TREE };
  static const J2ObjcClassInfo _OrgMinimaSystemBrainsConsensusPrint = { "ConsensusPrint", "org.minima.system.brains", ptrTable, methods, fields, 7, 0x1, 5, 10, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBrainsConsensusPrint;
}

@end

void OrgMinimaSystemBrainsConsensusPrint_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaSystemBrainsConsensusPrint *self, OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->mDB_, zDB);
  JreStrongAssign(&self->mHandler_, zHandler);
}

OrgMinimaSystemBrainsConsensusPrint *new_OrgMinimaSystemBrainsConsensusPrint_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBrainsConsensusPrint, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaSystemBrainsConsensusPrint *create_OrgMinimaSystemBrainsConsensusPrint_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBrainsConsensusPrint, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusPrint_getMainDB(OrgMinimaSystemBrainsConsensusPrint *self) {
  return self->mDB_;
}

OrgMinimaSystemBrainsConsensusHandler *OrgMinimaSystemBrainsConsensusPrint_getHandler(OrgMinimaSystemBrainsConsensusPrint *self) {
  return self->mHandler_;
}

OrgMinimaObjectsBaseMiniNumber *OrgMinimaSystemBrainsConsensusPrint_getIfExistsWithJavaUtilHashtable_withOrgMinimaObjectsBaseMiniData32_(OrgMinimaSystemBrainsConsensusPrint *self, JavaUtilHashtable *zHashTable, OrgMinimaObjectsBaseMiniData32 *zToken) {
  id<JavaUtilEnumeration> keys = [((JavaUtilHashtable *) nil_chk(zHashTable)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    OrgMinimaObjectsBaseMiniData32 *key = [keys nextElement];
    if ([((OrgMinimaObjectsBaseMiniData32 *) nil_chk(key)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zToken]) {
      return [zHashTable getWithId:key];
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBrainsConsensusPrint)
