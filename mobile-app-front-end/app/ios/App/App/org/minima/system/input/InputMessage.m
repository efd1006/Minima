//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/InputMessage.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/system/input/InputHandler.h"
#include "org/minima/system/input/InputMessage.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputInputMessage

- (instancetype)initWithNSString:(NSString *)zInput
withOrgMinimaUtilsResponseStream:(OrgMinimaUtilsResponseStream *)zResponseStream {
  OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(self, zInput, zResponseStream);
  return self;
}

+ (IOSObjectArray *)splitStringWithNSString:(NSString *)zInput {
  return OrgMinimaSystemInputInputMessage_splitStringWithNSString_(zInput);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaSystemInputInputMessage_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgMinimaUtilsResponseStream:);
  methods[1].selector = @selector(splitStringWithNSString:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;LOrgMinimaUtilsResponseStream;", "splitString", "LNSString;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputInputMessage = { "InputMessage", "org.minima.system.input", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputInputMessage;
}

@end

void OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(OrgMinimaSystemInputInputMessage *self, NSString *zInput, OrgMinimaUtilsResponseStream *zResponseStream) {
  OrgMinimaUtilsMessagesMessage_initWithNSString_(self, OrgMinimaSystemInputInputHandler_INPUT_COMMAND);
  (void) [self addObjectWithNSString:OrgMinimaSystemInputInputHandler_INPUT_FUNCTION withId:[((NSString *) nil_chk(zInput)) java_trim]];
  (void) [self addObjectWithNSString:OrgMinimaSystemInputInputHandler_INPUT_RESPONSE withId:zResponseStream];
}

OrgMinimaSystemInputInputMessage *new_OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(NSString *zInput, OrgMinimaUtilsResponseStream *zResponseStream) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputInputMessage, initWithNSString_withOrgMinimaUtilsResponseStream_, zInput, zResponseStream)
}

OrgMinimaSystemInputInputMessage *create_OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(NSString *zInput, OrgMinimaUtilsResponseStream *zResponseStream) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputInputMessage, initWithNSString_withOrgMinimaUtilsResponseStream_, zInput, zResponseStream)
}

IOSObjectArray *OrgMinimaSystemInputInputMessage_splitStringWithNSString_(NSString *zInput) {
  OrgMinimaSystemInputInputMessage_initialize();
  JavaUtilArrayList *token = new_JavaUtilArrayList_init();
  NSString *ss = [((NSString *) nil_chk(zInput)) java_trim];
  NSString *current = [NSString string];
  jboolean quoted = false;
  jint len = [((NSString *) nil_chk(ss)) java_length];
  for (jint i = 0; i < len; i++) {
    jchar cc = [ss charAtWithInt:i];
    if (cc == ' ') {
      if (!quoted) {
        if (![current isEqual:@""]) {
          [token addWithId:current];
        }
        current = [NSString string];
      }
      else {
        (void) JreStrAppendStrong(&current, "C", cc);
      }
    }
    else if (cc == '"') {
      if (quoted) {
        quoted = false;
      }
      else {
        quoted = true;
      }
    }
    else {
      (void) JreStrAppendStrong(&current, "C", cc);
    }
  }
  if (![current isEqual:@""]) {
    [token addWithId:current];
  }
  return [token toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]];
}

void OrgMinimaSystemInputInputMessage_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaSystemInputInputMessage_initialize();
  NSString *tester = @"  send   0   0xff  ";
  IOSObjectArray *tt = OrgMinimaSystemInputInputMessage_splitStringWithNSString_(tester);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tt))->size_; i++) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(IOSObjectArray_Get(tt, i));
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"FINISHED!!");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputInputMessage)
