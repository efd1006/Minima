//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/brains/ConsensusBackup.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowdb/TxPOWDBRow.h"
#include "org/minima/database/txpowdb/TxPowDB.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/database/userdb/UserDB.h"
#include "org/minima/database/userdb/java/JavaUserDB.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/backup/BackupManager.h"
#include "org/minima/system/backup/SyncPackage.h"
#include "org/minima/system/backup/SyncPacket.h"
#include "org/minima/system/brains/ConsensusBackup.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemBrainsConsensusBackup ()

- (OrgMinimaDatabaseMinimaDB *)getMainDB;

- (OrgMinimaSystemBackupBackupManager *)getBackup;

@end

__attribute__((unused)) static OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusBackup_getMainDB(OrgMinimaSystemBrainsConsensusBackup *self);

__attribute__((unused)) static OrgMinimaSystemBackupBackupManager *OrgMinimaSystemBrainsConsensusBackup_getBackup(OrgMinimaSystemBrainsConsensusBackup *self);

NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUS_PREFIX = @"CONSENSUSBACKUP_";
NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_BACKUP = @"CONSENSUSBACKUP_BACKUP";
NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORE = @"CONSENSUSBACKUP_RESTORE";
NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTOREUSERDB = @"CONSENSUSBACKUP_RESTOREUSERDB";
NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETXPOW = @"CONSENSUSBACKUP_RESTORETXPOW";
NSString *OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETREEDB = @"CONSENSUSBACKUP_RESTORETREEDB";

@implementation OrgMinimaSystemBrainsConsensusBackup

- (instancetype)initWithOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB
        withOrgMinimaSystemBrainsConsensusHandler:(OrgMinimaSystemBrainsConsensusHandler *)zHandler {
  OrgMinimaSystemBrainsConsensusBackup_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(self, zDB, zHandler);
  return self;
}

- (OrgMinimaDatabaseMinimaDB *)getMainDB {
  return OrgMinimaSystemBrainsConsensusBackup_getMainDB(self);
}

- (OrgMinimaSystemBackupBackupManager *)getBackup {
  return OrgMinimaSystemBrainsConsensusBackup_getBackup(self);
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_BACKUP]) {
    jboolean shutdown = false;
    if ([zMessage existsWithNSString:@"shutdown"]) {
      shutdown = [zMessage getBooleanWithNSString:@"shutdown"];
    }
    OrgMinimaDatabaseUserdbJavaJavaUserDB *userdb = (OrgMinimaDatabaseUserdbJavaJavaUserDB *) cast_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) getUserDB], [OrgMinimaDatabaseUserdbJavaJavaUserDB class]);
    NSString *nameu = @"user.minima";
    JavaIoFile *ffu = [((OrgMinimaSystemBackupBackupManager *) nil_chk([((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) getBackupManager])) getBackUpFileWithNSString:nameu];
    OrgMinimaUtilsMessagesMessage *backupu = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_WRITE);
    [backupu addObjectWithNSString:@"file" withId:ffu];
    [backupu addObjectWithNSString:@"object" withId:userdb];
    [backupu addBooleanWithNSString:@"overwrite" withBoolean:true];
    [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) PostMessageWithOrgMinimaUtilsMessagesMessage:backupu];
    JavaUtilArrayList *nodes = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) getMainTree])) getAsList];
    if ([((JavaUtilArrayList *) nil_chk(nodes)) size] > 0) {
      OrgMinimaSystemBackupSyncPackage *sp = create_OrgMinimaSystemBackupSyncPackage_init();
      [sp setCascadeNodeWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) getMainTree])) getCascadeNode])) getTxPow])) getBlockNumber]];
      for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong node in nodes) {
        [((JavaUtilArrayList *) nil_chk([sp getAllNodes])) addWithInt:0 withId:create_OrgMinimaSystemBackupSyncPacket_initWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(node)];
      }
      NSString *name = @"latest.txbackup";
      JavaIoFile *ff = [((OrgMinimaSystemBackupBackupManager *) nil_chk([((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) getBackupManager])) getBackUpFileWithNSString:name];
      OrgMinimaUtilsMessagesMessage *post = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemMain_SYSTEM_FULLSHUTDOWN);
      OrgMinimaUtilsMessagesMessage *backup = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_WRITE);
      [backup addObjectWithNSString:@"file" withId:ff];
      [backup addObjectWithNSString:@"object" withId:sp];
      [backup addBooleanWithNSString:@"overwrite" withBoolean:true];
      if (shutdown) {
        [backup addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTIONMSG withId:post];
        [backup addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTION_HANDLER withId:[((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler]];
      }
      [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) PostMessageWithOrgMinimaUtilsMessagesMessage:backup];
    }
    else {
      if (shutdown) {
        [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) PostMessageWithNSString:OrgMinimaSystemMain_SYSTEM_FULLSHUTDOWN];
      }
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORE]) {
    NSString *name = @"user.minima";
    JavaIoFile *ff = [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) getBackUpFileWithNSString:name];
    OrgMinimaUtilsMessagesMessage *backupman = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_READ);
    if ([((JavaIoFile *) nil_chk(ff)) exists]) {
      backupman = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_READ);
      [backupman addObjectWithNSString:@"file" withId:ff];
      [backupman addStringWithNSString:@"type" withNSString:OrgMinimaSystemBackupBackupManager_BACKUP_READUSER];
      [backupman addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTIONMSG withId:create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTOREUSERDB)];
      [backupman addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTION_HANDLER withId:mHandler_];
      [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) PostMessageWithOrgMinimaUtilsMessagesMessage:backupman];
    }
    else {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$$", @"No user restore file found ", [ff getAbsolutePath], @". Start normal."));
      [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) PostMessageWithNSString:OrgMinimaSystemMain_SYSTEM_INIT];
      return;
    }
    name = @"latest.txbackup";
    ff = [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) getBackUpFileWithNSString:name];
    if ([((JavaIoFile *) nil_chk(ff)) exists]) {
      backupman = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBackupBackupManager_BACKUP_READ);
      [backupman addObjectWithNSString:@"file" withId:ff];
      [backupman addStringWithNSString:@"type" withNSString:OrgMinimaSystemBackupBackupManager_BACKUP_READSYNC];
      [backupman addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTIONMSG withId:create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETREEDB)];
      [backupman addObjectWithNSString:OrgMinimaSystemBackupBackupManager_BACKUP_POSTACTION_HANDLER withId:mHandler_];
      [((OrgMinimaSystemBackupBackupManager *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getBackup(self))) PostMessageWithOrgMinimaUtilsMessagesMessage:backupman];
    }
    else {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$$", @"No tree backup file found ", [ff getAbsolutePath], @". Start normal."));
      [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) PostMessageWithNSString:OrgMinimaSystemMain_SYSTEM_INIT];
      return;
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTOREUSERDB]) {
    OrgMinimaDatabaseUserdbJavaJavaUserDB *jdb = (OrgMinimaDatabaseUserdbJavaJavaUserDB *) cast_chk([zMessage getObjectWithNSString:@"readobject"], [OrgMinimaDatabaseUserdbJavaJavaUserDB class]);
    [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) setUserDBWithOrgMinimaDatabaseUserdbJavaJavaUserDB:jdb];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETXPOW]) {
    OrgMinimaObjectsTxPOW *txPOW = (OrgMinimaObjectsTxPOW *) cast_chk([zMessage getObjectWithNSString:@"readobject"], [OrgMinimaObjectsTxPOW class]);
    [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) addNewTxPowWithOrgMinimaObjectsTxPOW:txPOW];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETREEDB]) {
    OrgMinimaSystemBackupSyncPackage *sp = (OrgMinimaSystemBackupSyncPackage *) cast_chk([zMessage getObjectWithNSString:@"readobject"], [OrgMinimaSystemBackupSyncPackage class]);
    OrgMinimaObjectsBaseMiniNumber *casc = [((OrgMinimaSystemBackupSyncPackage *) nil_chk(sp)) getCascadeNode];
    [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) getTxPowDB])) ClearDB];
    JavaUtilArrayList *packets = [sp getAllNodes];
    for (OrgMinimaSystemBackupSyncPacket * __strong spack in nil_chk(packets)) {
      OrgMinimaObjectsTxPOW *txpow = [((OrgMinimaSystemBackupSyncPacket *) nil_chk(spack)) getTxPOW];
      OrgMinimaDatabaseMmrMMRSet *mmrset = [spack getMMRSet];
      jboolean cascade = [spack isCascade];
      if (mmrset != nil) {
        if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([mmrset getBlockTime])) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:casc]) {
          [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) scanMMRSetForCoinsWithOrgMinimaDatabaseMmrMMRSet:mmrset withBoolean:true];
        }
      }
      OrgMinimaDatabaseTxpowtreeBlockTreeNode *node = [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) hardAddTxPOWBlockWithOrgMinimaObjectsTxPOW:txpow withOrgMinimaDatabaseMmrMMRSet:mmrset withBoolean:cascade];
      if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) getBlockNumber])) isEqualWithOrgMinimaObjectsBaseMiniNumber:[sp getCascadeNode]]) {
        [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:node];
      }
    }
    [((OrgMinimaDatabaseMinimaDB *) nil_chk(OrgMinimaSystemBrainsConsensusBackup_getMainDB(self))) hardResetChain];
    [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(mHandler_)) getMainHandler])) PostMessageWithNSString:OrgMinimaSystemMain_SYSTEM_INIT];
  }
}

- (void)dealloc {
  RELEASE_(mDB_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMinimaDB;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemBackupBackupManager;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaDatabaseMinimaDB:withOrgMinimaSystemBrainsConsensusHandler:);
  methods[1].selector = @selector(getMainDB);
  methods[2].selector = @selector(getBackup);
  methods[3].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONSENSUS_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "CONSENSUSBACKUP_BACKUP", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 5, -1, -1 },
    { "CONSENSUSBACKUP_RESTORE", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 6, -1, -1 },
    { "CONSENSUSBACKUP_RESTOREUSERDB", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 7, -1, -1 },
    { "CONSENSUSBACKUP_RESTORETXPOW", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 8, -1, -1 },
    { "CONSENSUSBACKUP_RESTORETREEDB", "LNSString;", .constantValue.asLong = 0, 0x9, -1, 9, -1, -1 },
    { "mDB_", "LOrgMinimaDatabaseMinimaDB;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LOrgMinimaSystemBrainsConsensusHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaDatabaseMinimaDB;LOrgMinimaSystemBrainsConsensusHandler;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", &OrgMinimaSystemBrainsConsensusBackup_CONSENSUS_PREFIX, &OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_BACKUP, &OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORE, &OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTOREUSERDB, &OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETXPOW, &OrgMinimaSystemBrainsConsensusBackup_CONSENSUSBACKUP_RESTORETREEDB };
  static const J2ObjcClassInfo _OrgMinimaSystemBrainsConsensusBackup = { "ConsensusBackup", "org.minima.system.brains", ptrTable, methods, fields, 7, 0x1, 4, 8, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemBrainsConsensusBackup;
}

@end

void OrgMinimaSystemBrainsConsensusBackup_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaSystemBrainsConsensusBackup *self, OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  NSObject_init(self);
  JreStrongAssign(&self->mDB_, zDB);
  JreStrongAssign(&self->mHandler_, zHandler);
}

OrgMinimaSystemBrainsConsensusBackup *new_OrgMinimaSystemBrainsConsensusBackup_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemBrainsConsensusBackup, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaSystemBrainsConsensusBackup *create_OrgMinimaSystemBrainsConsensusBackup_initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_(OrgMinimaDatabaseMinimaDB *zDB, OrgMinimaSystemBrainsConsensusHandler *zHandler) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemBrainsConsensusBackup, initWithOrgMinimaDatabaseMinimaDB_withOrgMinimaSystemBrainsConsensusHandler_, zDB, zHandler)
}

OrgMinimaDatabaseMinimaDB *OrgMinimaSystemBrainsConsensusBackup_getMainDB(OrgMinimaSystemBrainsConsensusBackup *self) {
  return self->mDB_;
}

OrgMinimaSystemBackupBackupManager *OrgMinimaSystemBrainsConsensusBackup_getBackup(OrgMinimaSystemBrainsConsensusBackup *self) {
  return [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemBrainsConsensusHandler *) nil_chk(self->mHandler_)) getMainHandler])) getBackupManager];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemBrainsConsensusBackup)
