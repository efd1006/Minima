//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/mmrtree.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/objects/base/MiniString.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusUser.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/mmrtree.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputFunctionsmmrtree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionsmmrtree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  OrgMinimaUtilsMessagesMessage *msg = [self getResponseMessageWithNSString:OrgMinimaSystemBrainsConsensusUser_CONSENSUS_MMRTREE];
  [((OrgMinimaUtilsMessagesMessage *) nil_chk(msg)) addStringWithNSString:@"type" withNSString:[((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(zInput), 1))) lowercaseString]];
  JavaUtilArrayList *data = create_JavaUtilArrayList_init();
  for (jint i = 2; i < zInput->size_; i++) {
    [data addWithId:create_OrgMinimaObjectsBaseMiniString_initWithNSString_(OrgMinimaMiniscriptContract_cleanScriptWithNSString_(IOSObjectArray_Get(zInput, i)))];
  }
  [msg addObjectWithNSString:@"leaves" withId:data];
  [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:msg];
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return create_OrgMinimaSystemInputFunctionsmmrtree_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionsmmrtree = { "mmrtree", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionsmmrtree;
}

@end

void OrgMinimaSystemInputFunctionsmmrtree_init(OrgMinimaSystemInputFunctionsmmrtree *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"mmrtree");
  [self setHelpWithNSString:@"[script|hash] [ data_list ]" withNSString:@"Build an MMR Hash Tree from the data list" withNSString:@""];
}

OrgMinimaSystemInputFunctionsmmrtree *new_OrgMinimaSystemInputFunctionsmmrtree_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionsmmrtree, init)
}

OrgMinimaSystemInputFunctionsmmrtree *create_OrgMinimaSystemInputFunctionsmmrtree_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionsmmrtree, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionsmmrtree)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionsmmrtree, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
