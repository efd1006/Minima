//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/coins.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusPrint.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/coins.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputFunctionscoins

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionscoins_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  jint len = ((IOSObjectArray *) nil_chk(zInput))->size_;
  jboolean relevant = false;
  NSString *address = @"";
  NSString *amount = @"";
  NSString *tokenid = @"";
  NSString *type = @"unspent";
  for (jint i = 1; i < len; i++) {
    NSString *param = IOSObjectArray_Get(zInput, i);
    if ([((NSString *) nil_chk(param)) java_hasPrefix:@"relevant"]) {
      relevant = true;
    }
    else if ([param java_hasPrefix:@"address:"]) {
      address = [param java_substring:8];
    }
    else if ([param java_hasPrefix:@"amount:"]) {
      amount = [param java_substring:7];
    }
    else if ([param java_hasPrefix:@"tokenid:"]) {
      tokenid = [param java_substring:8];
    }
    else if ([param java_hasPrefix:@"type:"]) {
      type = [param java_substring:5];
    }
    else {
      [((OrgMinimaUtilsResponseStream *) nil_chk([self getResponseStream])) endStatusWithBoolean:false withNSString:JreStrcat("$$", @"UNKNOWN parameter : ", IOSObjectArray_Get(zInput, i))];
      return;
    }
  }
  OrgMinimaUtilsMessagesMessage *sender = [self getResponseMessageWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_COINS];
  (void) [((OrgMinimaUtilsMessagesMessage *) nil_chk(sender)) addBooleanWithNSString:@"relevant" withBoolean:relevant];
  (void) [sender addStringWithNSString:@"address" withNSString:address];
  (void) [sender addStringWithNSString:@"amount" withNSString:amount];
  (void) [sender addStringWithNSString:@"tokenid" withNSString:tokenid];
  (void) [sender addStringWithNSString:@"type" withNSString:type];
  [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:sender];
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return new_OrgMinimaSystemInputFunctionscoins_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionscoins = { "coins", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionscoins;
}

@end

void OrgMinimaSystemInputFunctionscoins_init(OrgMinimaSystemInputFunctionscoins *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"coins");
  [self setHelpWithNSString:@"(relevant) (address:address) (amount:amount) (tokenid:tokenid) (type:spent|unspent|all)" withNSString:@"Search coin database. Defaults to all unspent coins." withNSString:@""];
}

OrgMinimaSystemInputFunctionscoins *new_OrgMinimaSystemInputFunctionscoins_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionscoins, init)
}

OrgMinimaSystemInputFunctionscoins *create_OrgMinimaSystemInputFunctionscoins_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionscoins, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionscoins)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionscoins, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
