//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/minidapps/DAPPHandler.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedReader.h"
#include "java/io/DataInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/net/Socket.h"
#include "java/net/URLDecoder.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/Base64.h"
#include "java/util/Date.h"
#include "java/util/StringTokenizer.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/system/backup/BackupManager.h"
#include "org/minima/system/network/minidapps/DAPPHandler.h"
#include "org/minima/system/network/minidapps/DAPPManager.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"
#include "org/minima/utils/messages/Message.h"

#import "App-Swift.h"

inline NSString *OrgMinimaSystemNetworkMinidappsDAPPHandler_get_RESOURCE_BASE(void);
static NSString *OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE = @"minidapps/";


J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemNetworkMinidappsDAPPHandler, RESOURCE_BASE, NSString *)

@implementation OrgMinimaSystemNetworkMinidappsDAPPHandler

- (instancetype)initWithJavaNetSocket:(JavaNetSocket *)zSocket
withOrgMinimaSystemNetworkMinidappsDAPPManager:(OrgMinimaSystemNetworkMinidappsDAPPManager *)zDAPPManager {
  OrgMinimaSystemNetworkMinidappsDAPPHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_(self, zSocket, zDAPPManager);
  return self;
}

- (void)run {
  JavaIoBufferedReader *in = nil;
  JavaIoPrintStream *out = nil;
  NSString *fileRequested = nil;
  @try {
    JavaIoInputStreamReader *is = new_JavaIoInputStreamReader_initWithJavaIoInputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getInputStream]);
    in = new_JavaIoBufferedReader_initWithJavaIoReader_(is);
    out = new_JavaIoPrintStream_initWithJavaIoOutputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getOutputStream]);
    NSString *input = [in readLine];
    if (input == nil) {
      @throw new_JavaLangException_initWithNSString_(@"ZERO Input Request..");
    }
    NSString *firstline = input;
    jint contentlength = 0;
    NSString *boundary = @"";
    while (input != nil && ![input java_isEmpty]) {
      if ([input java_indexOfString:@"Content-Length:"] != -1) {
        NSString *contlen = [input java_substring:15];
        contentlength = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(contlen)) java_trim]);
      }
      jint bound = [input java_indexOfString:@"boundary="];
      if (bound != -1) {
        boundary = [input java_substring:bound + 9];
      }
      input = [in readLine];
    }
    JavaUtilStringTokenizer *parse = new_JavaUtilStringTokenizer_initWithNSString_(firstline);
    NSString *method = [((NSString *) nil_chk([parse nextToken])) uppercaseString];
    fileRequested = [parse nextToken];
    if ([((NSString *) nil_chk(fileRequested)) java_hasSuffix:@"/"]) {
      fileRequested = [fileRequested java_concat:@"index.html"];
    }
    if ([((NSString *) nil_chk(fileRequested)) java_hasPrefix:@"/"]) {
      fileRequested = [fileRequested java_substring:1];
    }
    fileRequested = [((NSString *) nil_chk(JavaNetURLDecoder_decodeWithNSString_withNSString_(fileRequested, @"UTF-8"))) java_trim];
    jint questionmark = [((NSString *) nil_chk(fileRequested)) java_indexOfString:@"?"];
    if (questionmark != -1) {
      NSString *query = [fileRequested java_substring:questionmark + 1];
      fileRequested = [fileRequested java_substring:0 endIndex:questionmark];
      if ([((NSString *) nil_chk(fileRequested)) isEqual:@"index.html"] && ![((NSString *) nil_chk(query)) java_contains:@".."]) {
        jint uninstall = [((NSString *) nil_chk(query)) java_indexOfString:@"uninstall="];
        if (uninstall != -1) {
          JavaIoFile *appfolder = new_JavaIoFile_initWithNSString_withNSString_([((OrgMinimaSystemNetworkMinidappsDAPPManager *) nil_chk(mDAPPManager_)) getMiniDAPPSFolder], [query java_substring:uninstall + 10]);
          OrgMinimaSystemBackupBackupManager_deleteFolderWithJavaIoFile_(appfolder);
          (void) [((OrgMinimaSystemNetworkMinidappsDAPPManager *) nil_chk(mDAPPManager_)) recalculateMiniDAPPS];
        }
      }
    }
    IOSByteArray *file = nil;
    jint filelen = 0;
    if ([fileRequested java_hasSuffix:@"minima.js"]) {
      file = [self getResourceBytesWithNSString:@"js/minima.js"];
      filelen = ((IOSByteArray *) nil_chk(file))->size_;
    }
    else if ([fileRequested java_hasPrefix:@"minidapps/"]) {
      NSString *fullfile = JreStrcat("$C$", [((OrgMinimaSystemNetworkMinidappsDAPPManager *) nil_chk(mDAPPManager_)) getMiniDAPPSFolder], '/', [fileRequested java_substring:10]);
      file = [self getFileBytesWithNSString:fullfile];
      filelen = ((IOSByteArray *) nil_chk(file))->size_;
    }
    else if ([fileRequested java_hasPrefix:@"rpc/"]) {
    }
    else {
      file = [self getResourceBytesWithNSString:fileRequested];
      if ([fileRequested isEqual:@"index.html"]) {
        NSString *page = [NSString java_stringWithBytes:file charset:JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8)];
        NSString *newpage = [page java_replace:@"######" withSequence:[self createMiniDAPPList]];
        file = [((NSString *) nil_chk(newpage)) java_getBytes];
      }
      filelen = ((IOSByteArray *) nil_chk(file))->size_;
    }
    jint dot = [fileRequested java_lastIndexOfString:@"."];
    NSString *content = @"text/plain";
    if (dot != -1) {
      content = OrgMinimaSystemNetworkMinidappsDAPPHandler_getContentTypeWithNSString_([fileRequested java_substring:dot + 1]);
    }
    if (filelen == 0) {
      [out printlnWithNSString:@"HTTP/1.1 404 Not Found"];
      [out printlnWithNSString:@"Server: HTTP Server from Minima : 1.0"];
      [out printlnWithNSString:JreStrcat("$@", @"Date: ", new_JavaUtilDate_init())];
      [out printlnWithNSString:@"Content-type: text/html"];
      [out printlnWithNSString:@"Content-length: 0"];
      [out printlnWithNSString:@"Access-Control-Allow-Origin: *"];
      [out println];
      [out flush];
    }
    else {
      if ([((NSString *) nil_chk(method)) isEqual:@"POST"]) {
        IOSCharArray *alldata = [IOSCharArray newArrayWithLength:contentlength];
        [in readWithCharArray:alldata withInt:0 withInt:contentlength];
        NSString *complete = [NSString java_stringWithCharacters:alldata];
        NSString *decoded = JavaNetURLDecoder_decodeWithNSString_withNSString_(complete, @"UTF-8");
        jint index = [((NSString *) nil_chk(decoded)) java_indexOfString:@"base64,"];
        NSString *data = [decoded java_substring:index + 7];
        IOSByteArray *bdata = [((JavaUtilBase64_Decoder *) nil_chk(JavaUtilBase64_getDecoder())) decodeWithNSString:data];
        OrgMinimaObjectsBaseMiniData *dapp = new_OrgMinimaObjectsBaseMiniData_initWithByteArray_(bdata);
        OrgMinimaUtilsMessagesMessage *msg = new_OrgMinimaUtilsMessagesMessage_initWithNSString_(JreLoadStatic(OrgMinimaSystemNetworkMinidappsDAPPManager, DAPP_INSTALL));
        (void) [msg addObjectWithNSString:@"minidapp" withId:dapp];
        [((OrgMinimaSystemNetworkMinidappsDAPPManager *) nil_chk(mDAPPManager_)) PostMessageWithOrgMinimaUtilsMessagesMessage:msg];
      }
      [out printlnWithNSString:@"HTTP/1.1 200 OK"];
      [out printlnWithNSString:@"Server: HTTP RPC Server from Minima : 1.0"];
      [out printlnWithNSString:JreStrcat("$@", @"Date: ", new_JavaUtilDate_init())];
      [out printlnWithNSString:JreStrcat("$$", @"Content-type: ", content)];
      [out printlnWithNSString:JreStrcat("$I", @"Content-length: ", filelen)];
      [out printlnWithNSString:@"Access-Control-Allow-Origin: *"];
      [out println];
      [out writeWithByteArray:file withInt:0 withInt:filelen];
      [out flush];
    }
  }
  @catch (JavaLangException *ioe) {
  }
  @finally {
    @try {
      [((JavaIoBufferedReader *) nil_chk(in)) close];
      [((JavaIoPrintStream *) nil_chk(out)) close];
      [((JavaNetSocket *) nil_chk(mSocket_)) close];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (NSString *)createMiniDAPPList {
  JavaLangStringBuilder *list = new_JavaLangStringBuilder_init();
  OrgMinimaUtilsJsonJSONArray *alldapps = [((OrgMinimaSystemNetworkMinidappsDAPPManager *) nil_chk(mDAPPManager_)) getMiniDAPPS];
  (void) [list appendWithNSString:@"<table width=100%>"];
  jint len = [((OrgMinimaUtilsJsonJSONArray *) nil_chk(alldapps)) size];
  for (jint i = 0; i < len; i++) {
    OrgMinimaUtilsJsonJSONObject *app = (OrgMinimaUtilsJsonJSONObject *) cast_chk([alldapps getWithInt:i], [OrgMinimaUtilsJsonJSONObject class]);
    NSString *root = (NSString *) cast_chk([((OrgMinimaUtilsJsonJSONObject *) nil_chk(app)) getWithId:@"root"], [NSString class]);
    NSString *approot = (NSString *) cast_chk([app getWithId:@"approot"], [NSString class]);
    NSString *name = (NSString *) cast_chk([app getWithId:@"name"], [NSString class]);
    NSString *desc = (NSString *) cast_chk([app getWithId:@"description"], [NSString class]);
    NSString *backg = JreStrcat("$C$", root, '/', (NSString *) cast_chk([app getWithId:@"background"], [NSString class]));
    NSString *icon = JreStrcat("$C$", root, '/', (NSString *) cast_chk([app getWithId:@"icon"], [NSString class]));
    NSString *webpage = JreStrcat("$$", root, @"/index.html");
    (void) [list appendWithNSString:JreStrcat("$$$$$$$$$$$$$$$$$$$", @"<tr><td>\t\t\t<table style='background-size:100%;background-image: url(", backg, @");' width=100% height=100 class=minidapp>\t\t\t \t<tr>\t\t\t\t\t<td style='cursor:pointer;' rowspan=2 onclick=\"window.open('", webpage, @"', '_blank');\">\t\t\t\t\t\t<img src='", icon, @"' height=100>\t\t\t\t\t</td>\t\t\t\t\t<td width=100% class='minidappdescription'>                   <div style='position:relative'>\t\t\t\t        <div onclick='uninstallDAPP(\"", name, @"\",\"", approot, @"\");' style='color:red;cursor:pointer;position:absolute;right:10;top:10'>UNINSTALL</div>\t\t\t\t\t\t<br>\t\t\t\t\t\t<div onclick=\"window.open('", webpage, @"','_blank');\" style='cursor:pointer;font-size:18'><b>", [((NSString *) nil_chk(name)) uppercaseString], @"</b></div>\t\t\t\t\t\t<br><div onclick=\"window.open('", webpage, @"','_blank');\" style='cursor:pointer;font-size:12'>", desc, @"</div>\t\t\t\t\t</div>                     </td>\t\t\t\t</tr>\t\t\t</table>\t\t</td></tr>")];
  }
  if (len == 0) {
    (void) [list appendWithNSString:@"<tr><td><br><br>&nbsp;&nbsp;<b>NO DAPPS INSTALLED YET..</b></td></tr>"];
  }
  (void) [list appendWithNSString:@"</table>"];
  return [list description];
}

// Get main bundle
NSBundle* mainBundle;
- (NSString*)getResourceBytesWithNSString:(NSString *)zResource {
    
    mainBundle = [NSBundle mainBundle];
    
    if(mainBundle == nil) {
        NSLog(@"Main Bundle has not been found!");
        return @"mainBundle non existent";
    }
    NSString* path =[OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE stringByAppendingString:zResource];
    NSString* ns = [mainBundle pathForResource:zResource ofType:@"" ];

    if(ns == nil) {
        NSLog(@"Requested File not found! %@", path);
    } else {
        NSLog(@"Your index file was found in your main bundle.");
    }
    
    NSInputStream* in = [NSInputStream inputStreamWithFileAtPath:ns];
    
    if(in == nil ){
        NSLog(@"Can't create this stream");
    } else {
        NSLog(@"Stream created..");
    }
    
    [in open];
    
    uint8_t byteBuffer[4096];
    
    if(in.hasBytesAvailable){
        NSLog(@"We have bytes to look at..");
        NSInteger bytesRead = [in read:byteBuffer maxLength:sizeof(byteBuffer)];
        NSString *stringFromData = [[NSString alloc] initWithBytes:byteBuffer length:bytesRead encoding:NSUTF8StringEncoding];
        
        NSLog(@"Buffer has been recorded");
        
        return stringFromData;
    }
    // concat path string
//    OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE  = [OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE stringByAppendingString:zResource];
//
//    NSString* path=[mainBundle pathForResource:OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE ofType:@"html"];
//    NSString* content = [NSString stringWithContentsOfFile:path
//    encoding:NSUTF8StringEncoding
//       error:NULL];
//
//    NSURL* url = [[NSURL alloc] initWithString:path];
//    NSInputStream* in = [NSInputStream inputStreamWithURL:url];
//    [in open];
//
//
//  if (in == nil) {
//      NSLog(@"File not found -> %@", zResource);
//      NSLog(@"Looking in.., %@", OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE);
//    return [IOSByteArray newArrayWithLength:0];
//  }
//
//
//  uint8_t byteBuffer[4096];
//
//    if(in.hasBytesAvailable){
//        NSLog(@"bytes available");
//
//        NSInteger bytesRead = [in read:byteBuffer maxLength:sizeof(byteBuffer)]; //max len must match buffer size
//        NSString *stringFromData = [[NSString alloc] initWithBytes:byteBuffer length:bytesRead encoding:NSUTF8StringEncoding];
//
//        NSLog(@"another attempt: %@", stringFromData);
//    }
    
    
//    return [IOSByteArray newArrayWithLength:0];
    return 0;
}

- (IOSByteArray *)getFileBytesWithNSString:(NSString *)zFile {
  JavaIoFile *ff = new_JavaIoFile_initWithNSString_(zFile);
  jlong size = [ff length];
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:(jint) size];
  @try {
    JavaIoFileInputStream *fis = new_JavaIoFileInputStream_initWithNSString_(zFile);
    JavaIoBufferedInputStream *bis = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(fis);
    [bis readWithByteArray:ret];
    [bis close];
    [fis close];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return ret;
}

+ (NSString *)getContentTypeWithNSString:(NSString *)zEnding {
  return OrgMinimaSystemNetworkMinidappsDAPPHandler_getContentTypeWithNSString_(zEnding);
}

+ (jint)indexOfWithByteArray:(IOSByteArray *)outerArray
               withByteArray:(IOSByteArray *)smallerArray
                     withInt:(jint)zOffSet {
  return OrgMinimaSystemNetworkMinidappsDAPPHandler_indexOfWithByteArray_withByteArray_withInt_(outerArray, smallerArray, zOffSet);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "[B", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "[B", 0x1, 5, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaNetSocket:withOrgMinimaSystemNetworkMinidappsDAPPManager:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(createMiniDAPPList);
  methods[3].selector = @selector(getResourceBytesWithNSString:);
  methods[4].selector = @selector(getFileBytesWithNSString:);
  methods[5].selector = @selector(getContentTypeWithNSString:);
  methods[6].selector = @selector(indexOfWithByteArray:withByteArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDAPPManager_", "LOrgMinimaSystemNetworkMinidappsDAPPManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "RESOURCE_BASE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaNetSocket;LOrgMinimaSystemNetworkMinidappsDAPPManager;", "LJavaLangException;", "getResourceBytes", "LNSString;", "LJavaIoIOException;", "getFileBytes", "getContentType", "indexOf", "[B[BI", &OrgMinimaSystemNetworkMinidappsDAPPHandler_RESOURCE_BASE };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkMinidappsDAPPHandler = { "DAPPHandler", "org.minima.system.network.minidapps", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkMinidappsDAPPHandler;
}

@end

void OrgMinimaSystemNetworkMinidappsDAPPHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_(OrgMinimaSystemNetworkMinidappsDAPPHandler *self, JavaNetSocket *zSocket, OrgMinimaSystemNetworkMinidappsDAPPManager *zDAPPManager) {
  NSObject_init(self);
  self->mSocket_ = zSocket;
  self->mDAPPManager_ = zDAPPManager;
}

OrgMinimaSystemNetworkMinidappsDAPPHandler *new_OrgMinimaSystemNetworkMinidappsDAPPHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_(JavaNetSocket *zSocket, OrgMinimaSystemNetworkMinidappsDAPPManager *zDAPPManager) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkMinidappsDAPPHandler, initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_, zSocket, zDAPPManager)
}

OrgMinimaSystemNetworkMinidappsDAPPHandler *create_OrgMinimaSystemNetworkMinidappsDAPPHandler_initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_(JavaNetSocket *zSocket, OrgMinimaSystemNetworkMinidappsDAPPManager *zDAPPManager) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkMinidappsDAPPHandler, initWithJavaNetSocket_withOrgMinimaSystemNetworkMinidappsDAPPManager_, zSocket, zDAPPManager)
}

NSString *OrgMinimaSystemNetworkMinidappsDAPPHandler_getContentTypeWithNSString_(NSString *zEnding) {
  OrgMinimaSystemNetworkMinidappsDAPPHandler_initialize();
  if ([((NSString *) nil_chk(zEnding)) isEqual:@"html"]) {
    return @"text/html";
  }
  else if ([zEnding isEqual:@"htm"]) {
    return @"text/html";
  }
  else if ([zEnding isEqual:@"css"]) {
    return @"text/css";
  }
  else if ([zEnding isEqual:@"js"]) {
    return @"text/javascript";
  }
  else if ([zEnding isEqual:@"txt"]) {
    return @"text/plain";
  }
  else if ([zEnding isEqual:@"xml"]) {
    return @"text/xml";
  }
  else if ([zEnding isEqual:@"jpg"]) {
    return @"image/jpeg";
  }
  else if ([zEnding isEqual:@"jpeg"]) {
    return @"image/jpeg";
  }
  else if ([zEnding isEqual:@"png"]) {
    return @"image/png";
  }
  else if ([zEnding isEqual:@"gif"]) {
    return @"image/gif";
  }
  else if ([zEnding isEqual:@"ico"]) {
    return @"image/ico";
  }
  else if ([zEnding isEqual:@"zip"]) {
    return @"application/zip";
  }
  else if ([zEnding isEqual:@"pdf"]) {
    return @"application/pdf";
  }
  else if ([zEnding isEqual:@"mp3"]) {
    return @"audio/mp3";
  }
  else if ([zEnding isEqual:@"wav"]) {
    return @"audio/wav";
  }
  return @"text/plain";
}

jint OrgMinimaSystemNetworkMinidappsDAPPHandler_indexOfWithByteArray_withByteArray_withInt_(IOSByteArray *outerArray, IOSByteArray *smallerArray, jint zOffSet) {
  OrgMinimaSystemNetworkMinidappsDAPPHandler_initialize();
  for (jint i = zOffSet; i < ((IOSByteArray *) nil_chk(outerArray))->size_ - ((IOSByteArray *) nil_chk(smallerArray))->size_ + 1; ++i) {
    jboolean found = true;
    for (jint j = 0; j < smallerArray->size_; ++j) {
      if (IOSByteArray_Get(outerArray, i + j) != IOSByteArray_Get(smallerArray, j)) {
        found = false;
        break;
      }
    }
    if (found) return i;
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkMinidappsDAPPHandler)
