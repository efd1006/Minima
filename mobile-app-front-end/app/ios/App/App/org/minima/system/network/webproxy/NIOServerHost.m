//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/webproxy/NIOServerHost.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/Random.h"
#include "java/util/Set.h"
#include "java/util/StringTokenizer.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "org/minima/system/network/WebProxyManager.h"
#include "org/minima/system/network/webproxy/MainProxyHandler.h"
#include "org/minima/system/network/webproxy/NIOServerHost.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaSystemNetworkWebproxyNIOServerHost ()

- (void)sendMsgsToRandomClients;

@end

__attribute__((unused)) static void OrgMinimaSystemNetworkWebproxyNIOServerHost_sendMsgsToRandomClients(OrgMinimaSystemNetworkWebproxyNIOServerHost *self);

@interface OrgMinimaSystemNetworkWebproxyNIOServerHost_1 : JavaLangThread {
 @public
  OrgMinimaSystemNetworkWebproxyNIOServerHost *this$0_;
}

- (instancetype)initWithOrgMinimaSystemNetworkWebproxyNIOServerHost:(OrgMinimaSystemNetworkWebproxyNIOServerHost *)outer$
                                                       withNSString:(NSString *)x0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaSystemNetworkWebproxyNIOServerHost_1)

__attribute__((unused)) static void OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *self, OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0);

__attribute__((unused)) static OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *new_OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *create_OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0);

@implementation OrgMinimaSystemNetworkWebproxyNIOServerHost

- (instancetype)initWithInt:(jint)zPort
withOrgMinimaSystemNetworkWebproxyMainProxyHandler:(OrgMinimaSystemNetworkWebproxyMainProxyHandler *)zHandler {
  OrgMinimaSystemNetworkWebproxyNIOServerHost_initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(self, zPort, zHandler);
  return self;
}

- (jboolean)isRunning {
  return mRunning_;
}

- (void)stop {
  mRunning_ = false;
}

- (void)sendToUserWithNSString:(NSString *)request
           withJavaLangInteger:(JavaLangInteger *)zUserID {
  @try {
    JavaNioChannelsSocketChannel *sc = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mChannels_)) getWithId:zUserID];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$@$@", @"Sending message ", request, @" to ", zUserID, @" sc:", sc)];
    NSString *sendstring = JreStrcat("$C", request, 0x000a);
    JavaNioByteBuffer *buf = JavaNioByteBuffer_wrapWithByteArray_([sendstring java_getBytes]);
    [((JavaNioChannelsSocketChannel *) nil_chk(sc)) writeWithJavaNioByteBuffer:buf];
  }
  @catch (JavaLangException *exc) {
    [exc printStackTrace];
  }
}

- (void)run {
  mRunning_ = true;
  jint maxbuffer = 1024;
  JavaNioByteBuffer *readBuffer = JavaNioByteBuffer_allocateWithInt_(maxbuffer);
  IOSByteArray *byteBuffer = [IOSByteArray arrayWithLength:maxbuffer];
  @try {
    JreStrongAssign(&mSelector_, JavaNioChannelsSelector_open());
    JreStrongAssign(&mServerSockerChannel_, JavaNioChannelsServerSocketChannel_open());
    [((JavaNioChannelsServerSocketChannel *) nil_chk(mServerSockerChannel_)) configureBlockingWithBoolean:false];
    JreStrongAssign(&mServerSocket_, [((JavaNioChannelsServerSocketChannel *) nil_chk(mServerSockerChannel_)) socket]);
    [((JavaNetServerSocket *) nil_chk(mServerSocket_)) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithInt_(mPort_)];
    [((JavaNioChannelsServerSocketChannel *) nil_chk(mServerSockerChannel_)) register__WithJavaNioChannelsSelector:mSelector_ withInt:JavaNioChannelsSelectionKey_OP_ACCEPT];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$I", [[self java_getClass] getName], @" Going to listen on ", mPort_)];
    while (mRunning_) {
      [((JavaNioChannelsSelector *) nil_chk(mSelector_)) selectWithLong:1000];
      id<JavaUtilSet> selectedKeys = [((JavaNioChannelsSelector *) nil_chk(mSelector_)) selectedKeys];
      id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk(selectedKeys)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        JavaNioChannelsSelectionKey *key = [it next];
        if (([((JavaNioChannelsSelectionKey *) nil_chk(key)) readyOps] & JavaNioChannelsSelectionKey_OP_ACCEPT) == JavaNioChannelsSelectionKey_OP_ACCEPT) {
          JavaNioChannelsServerSocketChannel *sscNew = (JavaNioChannelsServerSocketChannel *) cast_chk([key channel], [JavaNioChannelsServerSocketChannel class]);
          JavaNioChannelsSocketChannel *sc = [((JavaNioChannelsServerSocketChannel *) nil_chk(sscNew)) accept];
          [((JavaNioChannelsSocketChannel *) nil_chk(sc)) configureBlockingWithBoolean:false];
          JavaLangInteger *user = create_JavaLangInteger_initWithInt_(((jint) [sc hash]));
          [sc register__WithJavaNioChannelsSelector:mSelector_ withInt:JavaNioChannelsSelectionKey_OP_READ withId:user];
          [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mChannels_)) putWithId:user withId:sc];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@C@", @"Accept Channel from ", user, ' ', sc)];
        }
        else if (([key readyOps] & JavaNioChannelsSelectionKey_OP_READ) == JavaNioChannelsSelectionKey_OP_READ) {
          JavaLangInteger *user = (JavaLangInteger *) cast_chk([key attachment], [JavaLangInteger class]);
          JavaNioChannelsSocketChannel *sc = (JavaNioChannelsSocketChannel *) cast_chk([key channel], [JavaNioChannelsSocketChannel class]);
          [((JavaNioByteBuffer *) nil_chk(readBuffer)) clear];
          jint readlen = 0;
          JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
          while ((readlen = [((JavaNioChannelsSocketChannel *) nil_chk(sc)) readWithJavaNioByteBuffer:readBuffer]) > 0) {
            jint pos = [readBuffer position];
            [readBuffer flip];
            [readBuffer getWithByteArray:byteBuffer withInt:0 withInt:pos];
            [baos writeWithByteArray:byteBuffer withInt:0 withInt:pos];
            [readBuffer compact];
          }
          NSString *msg = [[NSString java_stringWithBytes:[baos toByteArray]] java_trim];
          [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Complete Message ", msg)];
          if (readlen == -1) {
            [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(mChannels_)) removeWithId:user];
            [sc close];
            OrgMinimaUtilsMessagesMessage *usermsg = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_CLOSE);
            [usermsg addIntWithNSString:@"userid" withInt:[((JavaLangInteger *) nil_chk(user)) intValue]];
            [((OrgMinimaSystemNetworkWebproxyMainProxyHandler *) nil_chk(mHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:usermsg];
            [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Channel closed :", user)];
          }
          else {
            if ([((NSString *) nil_chk(msg)) java_length] > 0) {
              JavaUtilStringTokenizer *strtok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(msg, OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_MESSAGE_END);
              while ([strtok hasMoreElements]) {
                NSString *msgtok = [((NSString *) nil_chk([strtok nextToken])) java_trim];
                OrgMinimaUtilsMessagesMessage *usermsg = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemNetworkWebproxyMainProxyHandler_PROXY_USER_MESSAGE);
                [usermsg addIntWithNSString:@"userid" withInt:[((JavaLangInteger *) nil_chk(user)) intValue]];
                [usermsg addStringWithNSString:@"data" withNSString:msgtok];
                [((OrgMinimaSystemNetworkWebproxyMainProxyHandler *) nil_chk(mHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:usermsg];
              }
            }
          }
        }
        [it remove];
      }
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Shutting down.."];
    [((JavaNetServerSocket *) nil_chk(mServerSocket_)) close];
    [((JavaNioChannelsServerSocketChannel *) nil_chk(mServerSockerChannel_)) close];
    [((JavaNioChannelsSelector *) nil_chk(mSelector_)) close];
  }
  @catch (JavaLangException *exc) {
    [exc printStackTrace];
  }
}

- (void)sendMsgsToRandomClients {
  OrgMinimaSystemNetworkWebproxyNIOServerHost_sendMsgsToRandomClients(self);
}

- (void)dealloc {
  RELEASE_(mSelector_);
  RELEASE_(mServerSockerChannel_);
  RELEASE_(mServerSocket_);
  RELEASE_(mChannels_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgMinimaSystemNetworkWebproxyMainProxyHandler:);
  methods[1].selector = @selector(isRunning);
  methods[2].selector = @selector(stop);
  methods[3].selector = @selector(sendToUserWithNSString:withJavaLangInteger:);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(sendMsgsToRandomClients);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSelector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mServerSockerChannel_", "LJavaNioChannelsServerSocketChannel;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mServerSocket_", "LJavaNetServerSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mChannels_", "LJavaUtilConcurrentConcurrentHashMap;", .constantValue.asLong = 0, 0x1, -1, -1, 3, -1 },
    { "mPort_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRunning_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LOrgMinimaSystemNetworkWebproxyMainProxyHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgMinimaSystemNetworkWebproxyMainProxyHandler;", "sendToUser", "LNSString;LJavaLangInteger;", "Ljava/util/concurrent/ConcurrentHashMap<Ljava/lang/Integer;Ljava/nio/channels/SocketChannel;>;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebproxyNIOServerHost = { "NIOServerHost", "org.minima.system.network.webproxy", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkWebproxyNIOServerHost;
}

@end

void OrgMinimaSystemNetworkWebproxyNIOServerHost_initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(OrgMinimaSystemNetworkWebproxyNIOServerHost *self, jint zPort, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mChannels_, new_JavaUtilConcurrentConcurrentHashMap_init());
  self->mPort_ = zPort;
  JreStrongAssign(&self->mHandler_, zHandler);
  JavaLangThread *tt = create_JavaLangThread_initWithJavaLangRunnable_(self);
  [tt start];
}

OrgMinimaSystemNetworkWebproxyNIOServerHost *new_OrgMinimaSystemNetworkWebproxyNIOServerHost_initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(jint zPort, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebproxyNIOServerHost, initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_, zPort, zHandler)
}

OrgMinimaSystemNetworkWebproxyNIOServerHost *create_OrgMinimaSystemNetworkWebproxyNIOServerHost_initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_(jint zPort, OrgMinimaSystemNetworkWebproxyMainProxyHandler *zHandler) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebproxyNIOServerHost, initWithInt_withOrgMinimaSystemNetworkWebproxyMainProxyHandler_, zPort, zHandler)
}

void OrgMinimaSystemNetworkWebproxyNIOServerHost_sendMsgsToRandomClients(OrgMinimaSystemNetworkWebproxyNIOServerHost *self) {
  [create_OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(self, @"Send-to-Clients") start];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkWebproxyNIOServerHost)

@implementation OrgMinimaSystemNetworkWebproxyNIOServerHost_1

- (instancetype)initWithOrgMinimaSystemNetworkWebproxyNIOServerHost:(OrgMinimaSystemNetworkWebproxyNIOServerHost *)outer$
                                                       withNSString:(NSString *)x0 {
  OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(self, outer$, x0);
  return self;
}

- (void)run {
  @try {
    jint num = 0;
    while (true) {
      JavaUtilRandom *generator = create_JavaUtilRandom_init();
      if ([((id<JavaUtilSet>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->mChannels_)) keySet])) size] > 0) {
        JavaLangInteger *randomKey = [create_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->mChannels_)) keySet]) getWithInt:[generator nextIntWithInt:[((id<JavaUtilSet>) nil_chk([((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->mChannels_)) keySet])) size]]];
        JavaNioChannelsSocketChannel *sc = [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->mChannels_)) getWithId:randomKey];
        @try {
          num++;
          JavaNioByteBuffer *buf = JavaNioByteBuffer_wrapWithByteArray_([(JreStrcat("$IC", @"From server to Client msg n\u00ba - ", num, 0x000a)) java_getBytes]);
          [((JavaNioChannelsSocketChannel *) nil_chk(sc)) writeWithJavaNioByteBuffer:buf];
        }
        @catch (JavaIoIOException *e) {
          [e printStackTrace];
          [((JavaUtilConcurrentConcurrentHashMap *) nil_chk(this$0_->mChannels_)) removeWithId:randomKey];
        }
      }
      JavaLangThread_sleepWithLong_(1000);
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaSystemNetworkWebproxyNIOServerHost:withNSString:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgMinimaSystemNetworkWebproxyNIOServerHost;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LOrgMinimaSystemNetworkWebproxyNIOServerHost;", "sendMsgsToRandomClients" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebproxyNIOServerHost_1 = { "", "org.minima.system.network.webproxy", ptrTable, methods, fields, 7, 0x8010, 2, 1, 1, -1, 2, -1, -1 };
  return &_OrgMinimaSystemNetworkWebproxyNIOServerHost_1;
}

@end

void OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *self, OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaLangThread_initWithNSString_(self, x0);
}

OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *new_OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebproxyNIOServerHost_1, initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_, outer$, x0)
}

OrgMinimaSystemNetworkWebproxyNIOServerHost_1 *create_OrgMinimaSystemNetworkWebproxyNIOServerHost_1_initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_(OrgMinimaSystemNetworkWebproxyNIOServerHost *outer$, NSString *x0) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebproxyNIOServerHost_1, initWithOrgMinimaSystemNetworkWebproxyNIOServerHost_withNSString_, outer$, x0)
}
