//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/WebProxyManager.java
//

#include "J2ObjC_source.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/Socket.h"
#include "java/util/Random.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/input/InputHandler.h"
#include "org/minima/system/input/InputMessage.h"
#include "org/minima/system/network/NetworkHandler.h"
#include "org/minima/system/network/WebProxyManager.h"
#include "org/minima/system/network/WebProxyReader.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"
#include "org/minima/utils/messages/MessageProcessor.h"
#include "org/minima/utils/messages/TimerMessage.h"

@interface OrgMinimaSystemNetworkWebProxyManager ()

- (void)pushMessageWithNSString:(NSString *)zMessage;

@end

inline NSString *OrgMinimaSystemNetworkWebProxyManager_get_WEBPROXY_TIMEOUT(void);
static NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_TIMEOUT = @"WEBPROXY_TIMEOUT";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaSystemNetworkWebProxyManager, WEBPROXY_TIMEOUT, NSString *)

__attribute__((unused)) static void OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(OrgMinimaSystemNetworkWebProxyManager *self, NSString *zMessage);

NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_MESSAGE_END = @"!$&$!";
NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_STARTUP = @"WEBPROXY_STARTUP";
NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_SHUTDOWN = @"WEBPROXY_SHUTDOWN";
NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_REQUEST = @"WEBPROXY_REQUEST";
NSString *OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_NOTIFY = @"WEBPROXY_NOTIFY";

@implementation OrgMinimaSystemNetworkWebProxyManager

- (instancetype)initWithNSString:(NSString *)zHost
                         withInt:(jint)zPort
                    withNSString:(NSString *)zWebHostID
withOrgMinimaSystemNetworkNetworkHandler:(OrgMinimaSystemNetworkNetworkHandler *)zNetwork {
  OrgMinimaSystemNetworkWebProxyManager_initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_(self, zHost, zPort, zWebHostID, zNetwork);
  return self;
}

- (jboolean)isRunning {
  return mRunning_WebProxyManager_;
}

- (JavaNetSocket *)getSocket {
  return mSocket_;
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) isMessageTypeWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_STARTUP]) {
    JreStrongAssignAndConsume(&mOutput_, new_JavaIoPrintWriter_initWithJavaIoOutputStream_([((JavaNetSocket *) nil_chk(mSocket_)) getOutputStream]));
    JreStrongAssignAndConsume(&mProxyReader_, new_OrgMinimaSystemNetworkWebProxyReader_initWithOrgMinimaSystemNetworkWebProxyManager_(self));
    JreStrongAssignAndConsume(&mInputThread_, new_JavaLangThread_initWithJavaLangRunnable_(mProxyReader_));
    [mInputThread_ start];
    mLastRequest_ = JavaLangSystem_currentTimeMillis();
    OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(self, JreStrcat("$$", @"init:", mWebHostID_));
    [self PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:create_OrgMinimaUtilsMessagesTimerMessage_initWithInt_withNSString_(60000, OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_TIMEOUT)];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_TIMEOUT]) {
    jlong timenow = JavaLangSystem_currentTimeMillis();
    jlong timediff = timenow - mLastRequest_;
    if (timediff > 600000) {
    }
    else {
      [self PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:create_OrgMinimaUtilsMessagesTimerMessage_initWithInt_withNSString_(60000, OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_TIMEOUT)];
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_SHUTDOWN]) {
    mRunning_WebProxyManager_ = false;
    @try {
      [((JavaIoPrintWriter *) nil_chk(mOutput_)) close];
    }
    @catch (JavaLangException *exc) {
    }
    @try {
      [((JavaNetSocket *) nil_chk(mSocket_)) close];
    }
    @catch (JavaLangException *exc) {
    }
    @try {
      [((JavaLangThread *) nil_chk(mInputThread_)) interrupt];
    }
    @catch (JavaLangException *exc) {
    }
    [self stopMessageProcessor];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_NOTIFY]) {
    OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(self, @"notify:change");
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_REQUEST]) {
    mLastRequest_ = JavaLangSystem_currentTimeMillis();
    NSString *function = [zMessage getStringWithNSString:@"function"];
    NSString *rid = [zMessage getStringWithNSString:@"randid"];
    OrgMinimaUtilsResponseStream *response = create_OrgMinimaUtilsResponseStream_init();
    OrgMinimaSystemInputInputMessage *inmsg = create_OrgMinimaSystemInputInputMessage_initWithNSString_withOrgMinimaUtilsResponseStream_(function, response);
    [((OrgMinimaSystemInputInputHandler *) nil_chk(mInputHandler_)) PostMessageWithOrgMinimaUtilsMessagesMessage:inmsg];
    [response waitToFinish];
    NSString *resp = [response getResponse];
    OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(self, JreStrcat("$C$", rid, ':', resp));
  }
}

- (void)pushMessageWithNSString:(NSString *)zMessage {
  OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(self, zMessage);
}

- (void)dealloc {
  RELEASE_(mNetworkMain_);
  RELEASE_(mInputHandler_);
  RELEASE_(mSocket_);
  RELEASE_(mOutput_);
  RELEASE_(mInputThread_);
  RELEASE_(mProxyReader_);
  RELEASE_(mUID_);
  RELEASE_(mHost_);
  RELEASE_(mWebHostID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetSocket;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withNSString:withOrgMinimaSystemNetworkNetworkHandler:);
  methods[1].selector = @selector(isRunning);
  methods[2].selector = @selector(getSocket);
  methods[3].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  methods[4].selector = @selector(pushMessageWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "WEBPROXY_MESSAGE_END", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "WEBPROXY_STARTUP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "WEBPROXY_SHUTDOWN", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 8, -1, -1 },
    { "WEBPROXY_REQUEST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "WEBPROXY_NOTIFY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "WEBPROXY_TIMEOUT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "mNetworkMain_", "LOrgMinimaSystemNetworkNetworkHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInputHandler_", "LOrgMinimaSystemInputInputHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSocket_", "LJavaNetSocket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOutput_", "LJavaIoPrintWriter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInputThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mProxyReader_", "LOrgMinimaSystemNetworkWebProxyReader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUID_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHost_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPort_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWebHostID_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRunning_WebProxyManager_", "Z", .constantValue.asLong = 0, 0x0, 12, -1, -1, -1 },
    { "mLastRequest_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ILNSString;LOrgMinimaSystemNetworkNetworkHandler;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", "pushMessage", "LNSString;", &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_MESSAGE_END, &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_STARTUP, &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_SHUTDOWN, &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_REQUEST, &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_NOTIFY, &OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_TIMEOUT, "mRunning" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkWebProxyManager = { "WebProxyManager", "org.minima.system.network", ptrTable, methods, fields, 7, 0x1, 5, 18, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkWebProxyManager;
}

@end

void OrgMinimaSystemNetworkWebProxyManager_initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_(OrgMinimaSystemNetworkWebProxyManager *self, NSString *zHost, jint zPort, NSString *zWebHostID, OrgMinimaSystemNetworkNetworkHandler *zNetwork) {
  OrgMinimaUtilsMessagesMessageProcessor_initWithNSString_(self, @"NETCLIENT");
  self->mRunning_WebProxyManager_ = false;
  JreStrongAssign(&self->mHost_, zHost);
  self->mPort_ = zPort;
  JreStrongAssign(&self->mWebHostID_, zWebHostID);
  JreStrongAssign(&self->mNetworkMain_, zNetwork);
  JreStrongAssign(&self->mInputHandler_, [((OrgMinimaSystemMain *) nil_chk([((OrgMinimaSystemNetworkNetworkHandler *) nil_chk(zNetwork)) getMainHandler])) getInputHandler]);
  JreStrongAssign(&self->mUID_, JreStrcat("I", JavaLangMath_absWithInt_([create_JavaUtilRandom_init() nextInt])));
  @try {
    JreStrongAssignAndConsume(&self->mSocket_, new_JavaNetSocket_initWithNSString_withInt_(zHost, zPort));
    self->mRunning_WebProxyManager_ = true;
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    return;
  }
  [self PostMessageWithNSString:OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_STARTUP];
}

OrgMinimaSystemNetworkWebProxyManager *new_OrgMinimaSystemNetworkWebProxyManager_initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_(NSString *zHost, jint zPort, NSString *zWebHostID, OrgMinimaSystemNetworkNetworkHandler *zNetwork) {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkWebProxyManager, initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_, zHost, zPort, zWebHostID, zNetwork)
}

OrgMinimaSystemNetworkWebProxyManager *create_OrgMinimaSystemNetworkWebProxyManager_initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_(NSString *zHost, jint zPort, NSString *zWebHostID, OrgMinimaSystemNetworkNetworkHandler *zNetwork) {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkWebProxyManager, initWithNSString_withInt_withNSString_withOrgMinimaSystemNetworkNetworkHandler_, zHost, zPort, zWebHostID, zNetwork)
}

void OrgMinimaSystemNetworkWebProxyManager_pushMessageWithNSString_(OrgMinimaSystemNetworkWebProxyManager *self, NSString *zMessage) {
  [((JavaIoPrintWriter *) nil_chk(self->mOutput_)) printlnWithNSString:JreStrcat("$$", zMessage, OrgMinimaSystemNetworkWebProxyManager_WEBPROXY_MESSAGE_END)];
  [((JavaIoPrintWriter *) nil_chk(self->mOutput_)) flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkWebProxyManager)
