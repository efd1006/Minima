//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/input/functions/txpowsearch.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/system/Main.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/ConsensusPrint.h"
#include "org/minima/system/input/CommandFunction.h"
#include "org/minima/system/input/functions/txpowsearch.h"
#include "org/minima/utils/ResponseStream.h"
#include "org/minima/utils/messages/Message.h"

@implementation OrgMinimaSystemInputFunctionstxpowsearch

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemInputFunctionstxpowsearch_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)doFunctionWithNSStringArray:(IOSObjectArray *)zInput {
  jint len = ((IOSObjectArray *) nil_chk(zInput))->size_;
  if (len == 1) {
    [((OrgMinimaUtilsResponseStream *) nil_chk([self getResponseStream])) endStatusWithBoolean:false withNSString:@"MUST specify some criteria for search.."];
    return;
  }
  NSString *input = @"";
  NSString *output = @"";
  NSString *token = @"";
  for (jint i = 1; i < len; i++) {
    NSString *param = IOSObjectArray_Get(zInput, i);
    if ([((NSString *) nil_chk(param)) java_hasPrefix:@"input:"]) {
      input = [param java_substring:6];
    }
    else if ([param java_hasPrefix:@"output:"]) {
      output = [param java_substring:7];
    }
    else if ([param java_hasPrefix:@"tokenid:"]) {
      token = [param java_substring:8];
    }
  }
  OrgMinimaUtilsMessagesMessage *sender = [self getResponseMessageWithNSString:OrgMinimaSystemBrainsConsensusPrint_CONSENSUS_TXPOWSEARCH];
  (void) [((OrgMinimaUtilsMessagesMessage *) nil_chk(sender)) addStringWithNSString:@"input" withNSString:input];
  (void) [sender addStringWithNSString:@"output" withNSString:output];
  (void) [sender addStringWithNSString:@"tokenid" withNSString:token];
  [((OrgMinimaSystemBrainsConsensusHandler *) nil_chk([((OrgMinimaSystemMain *) nil_chk([self getMainHandler])) getConsensusHandler])) PostMessageWithOrgMinimaUtilsMessagesMessage:sender];
}

- (OrgMinimaSystemInputCommandFunction *)getNewFunction {
  return new_OrgMinimaSystemInputFunctionstxpowsearch_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemInputCommandFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doFunctionWithNSStringArray:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doFunction", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaSystemInputFunctionstxpowsearch = { "txpowsearch", "org.minima.system.input.functions", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemInputFunctionstxpowsearch;
}

@end

void OrgMinimaSystemInputFunctionstxpowsearch_init(OrgMinimaSystemInputFunctionstxpowsearch *self) {
  OrgMinimaSystemInputCommandFunction_initWithNSString_(self, @"txpowsearch");
  [self setHelpWithNSString:@"(input:address) (output:address) (tokenid:tokenid)" withNSString:@"Search for TXPOW messages with given input, output or tokenid" withNSString:@""];
}

OrgMinimaSystemInputFunctionstxpowsearch *new_OrgMinimaSystemInputFunctionstxpowsearch_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemInputFunctionstxpowsearch, init)
}

OrgMinimaSystemInputFunctionstxpowsearch *create_OrgMinimaSystemInputFunctionstxpowsearch_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemInputFunctionstxpowsearch, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemInputFunctionstxpowsearch)

J2OBJC_NAME_MAPPING(OrgMinimaSystemInputFunctionstxpowsearch, "org.minima.system.input.functions", "OrgMinimaSystemInputFunctions")
