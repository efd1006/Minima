//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/system/network/nio/NIOMultiServer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "org/minima/system/network/nio/NIOClient.h"
#include "org/minima/system/network/nio/NIOMultiServer.h"
#include "org/minima/utils/messages/Message.h"
#include "org/minima/utils/messages/MessageProcessor.h"

@interface OrgMinimaSystemNetworkNioNIOMultiServer () {
 @public
  JavaNioChannelsServerSocketChannel *mSockChan_;
  JavaNioChannelsSelector *mSelector_;
  JavaNioByteBuffer *mReadBuffer_;
  JavaNioByteBuffer *mWriteBuffer_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaSystemNetworkNioNIOMultiServer, mSockChan_, JavaNioChannelsServerSocketChannel *)
J2OBJC_FIELD_SETTER(OrgMinimaSystemNetworkNioNIOMultiServer, mSelector_, JavaNioChannelsSelector *)
J2OBJC_FIELD_SETTER(OrgMinimaSystemNetworkNioNIOMultiServer, mReadBuffer_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgMinimaSystemNetworkNioNIOMultiServer, mWriteBuffer_, JavaNioByteBuffer *)

NSString *OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_INIT = @"NIOSERVER_INIT";
NSString *OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_CLOSE = @"NIOSERVER_CLOSE";
NSString *OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_ACCEPT = @"NIOSERVER_ACCEPT";
NSString *OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_READ = @"NIOSERVER_READ";
NSString *OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_WRITE = @"NIOSERVER_WRITE";

@implementation OrgMinimaSystemNetworkNioNIOMultiServer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaSystemNetworkNioNIOMultiServer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  if ([((NSString *) nil_chk([((OrgMinimaUtilsMessagesMessage *) nil_chk(zMessage)) getMessageType])) isEqual:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_INIT]) {
    JreStrongAssign(&mSockChan_, JavaNioChannelsServerSocketChannel_open());
    [((JavaNioChannelsServerSocketChannel *) nil_chk(mSockChan_)) configureBlockingWithBoolean:false];
    JavaNetInetAddress *addr = JavaNetInetAddress_getLocalHost();
    [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(mSockChan_)) socket])) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(addr, 9000)];
    JreStrongAssign(&mSelector_, JavaNioChannelsSelector_open());
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_CLOSE]) {
    [((JavaNioChannelsServerSocketChannel *) nil_chk(mSockChan_)) close];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_ACCEPT]) {
    JavaNioChannelsSocketChannel *clientChannel;
    while ((clientChannel = [((JavaNioChannelsServerSocketChannel *) nil_chk(mSockChan_)) accept]) != nil) {
      [((JavaNioChannelsSocketChannel *) nil_chk(clientChannel)) configureBlockingWithBoolean:false];
      OrgMinimaSystemNetworkNioNIOClient *nio = create_OrgMinimaSystemNetworkNioNIOClient_initWithJavaNioChannelsSocketChannel_(clientChannel);
      JavaNioChannelsSelectionKey *readKey = [clientChannel register__WithJavaNioChannelsSelector:mSelector_ withInt:JavaNioChannelsSelectionKey_OP_READ withId:nio];
      [((JavaUtilArrayList *) nil_chk(mClients_)) addWithId:nio];
    }
    [self PostMessageWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_READ];
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_READ]) {
    [((JavaNioChannelsSelector *) nil_chk(mSelector_)) selectNow];
    id<JavaUtilIterator> keys = [((id<JavaUtilSet>) nil_chk([((JavaNioChannelsSelector *) nil_chk(mSelector_)) selectedKeys])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      JavaNioChannelsSelectionKey *key = (JavaNioChannelsSelectionKey *) cast_chk([keys next], [JavaNioChannelsSelectionKey class]);
      [keys remove];
      JavaNioChannelsSocketChannel *channel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
      OrgMinimaSystemNetworkNioNIOClient *nio = (OrgMinimaSystemNetworkNioNIOClient *) cast_chk([key attachment], [OrgMinimaSystemNetworkNioNIOClient class]);
      [((JavaNioByteBuffer *) nil_chk(mReadBuffer_)) clear];
      jlong nbytes = [((JavaNioChannelsSocketChannel *) nil_chk(channel)) readWithJavaNioByteBuffer:mReadBuffer_];
      if (nbytes == -1) {
      }
      else {
        [((JavaNioByteBuffer *) nil_chk(mReadBuffer_)) flip];
        [((JavaNioByteBuffer *) nil_chk(mReadBuffer_)) clear];
      }
    }
  }
  else if ([zMessage isMessageTypeWithNSString:OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_WRITE]) {
    OrgMinimaSystemNetworkNioNIOClient *cient = (OrgMinimaSystemNetworkNioNIOClient *) cast_chk([zMessage getObjectWithNSString:@"nioclient"], [OrgMinimaSystemNetworkNioNIOClient class]);
    IOSByteArray *data = nil;
    [((JavaNioByteBuffer *) nil_chk(mWriteBuffer_)) clear];
    [((JavaNioByteBuffer *) nil_chk(mWriteBuffer_)) putWithByteArray:data];
    [((JavaNioByteBuffer *) nil_chk(mWriteBuffer_)) flip];
  }
}

- (void)dealloc {
  RELEASE_(mSockChan_);
  RELEASE_(mSelector_);
  RELEASE_(mReadBuffer_);
  RELEASE_(mWriteBuffer_);
  RELEASE_(mClients_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NIOSERVER_INIT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "NIOSERVER_CLOSE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "NIOSERVER_ACCEPT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "NIOSERVER_READ", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "NIOSERVER_WRITE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "mSockChan_", "LJavaNioChannelsServerSocketChannel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReadBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWriteBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mClients_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 8, -1 },
  };
  static const void *ptrTable[] = { "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;", &OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_INIT, &OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_CLOSE, &OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_ACCEPT, &OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_READ, &OrgMinimaSystemNetworkNioNIOMultiServer_NIOSERVER_WRITE, "Ljava/util/ArrayList<Lorg/minima/system/network/nio/NIOClient;>;" };
  static const J2ObjcClassInfo _OrgMinimaSystemNetworkNioNIOMultiServer = { "NIOMultiServer", "org.minima.system.network.nio", ptrTable, methods, fields, 7, 0x1, 2, 10, -1, -1, -1, -1, -1 };
  return &_OrgMinimaSystemNetworkNioNIOMultiServer;
}

@end

void OrgMinimaSystemNetworkNioNIOMultiServer_init(OrgMinimaSystemNetworkNioNIOMultiServer *self) {
  OrgMinimaUtilsMessagesMessageProcessor_initWithNSString_(self, @"NIOServer");
  JreStrongAssignAndConsume(&self->mClients_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mReadBuffer_, JavaNioByteBuffer_allocateDirectWithInt_(16384));
  JreStrongAssign(&self->mWriteBuffer_, JavaNioByteBuffer_allocateDirectWithInt_(16384));
}

OrgMinimaSystemNetworkNioNIOMultiServer *new_OrgMinimaSystemNetworkNioNIOMultiServer_init() {
  J2OBJC_NEW_IMPL(OrgMinimaSystemNetworkNioNIOMultiServer, init)
}

OrgMinimaSystemNetworkNioNIOMultiServer *create_OrgMinimaSystemNetworkNioNIOMultiServer_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaSystemNetworkNioNIOMultiServer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaSystemNetworkNioNIOMultiServer)
