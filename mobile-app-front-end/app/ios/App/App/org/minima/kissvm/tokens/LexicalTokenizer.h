//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/tokens/LexicalTokenizer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaKissvmTokensLexicalTokenizer")
#ifdef RESTRICT_OrgMinimaKissvmTokensLexicalTokenizer
#define INCLUDE_ALL_OrgMinimaKissvmTokensLexicalTokenizer 0
#else
#define INCLUDE_ALL_OrgMinimaKissvmTokensLexicalTokenizer 1
#endif
#undef RESTRICT_OrgMinimaKissvmTokensLexicalTokenizer

#if !defined (OrgMinimaKissvmTokensLexicalTokenizer_) && (INCLUDE_ALL_OrgMinimaKissvmTokensLexicalTokenizer || defined(INCLUDE_OrgMinimaKissvmTokensLexicalTokenizer))
#define OrgMinimaKissvmTokensLexicalTokenizer_

@class OrgMinimaKissvmTokensToken;
@protocol JavaUtilList;

@interface OrgMinimaKissvmTokensLexicalTokenizer : NSObject {
 @public
  id<JavaUtilList> mTokens_;
  jint mPos_;
  jint mSize_;
}

#pragma mark Public

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)zTokens;

- (jboolean)checkAllTokensUsed;

- (jint)getCurrentPosition;

- (OrgMinimaKissvmTokensToken *)getNextToken;

- (void)goBackToken;

- (jboolean)hasMoreElements;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaKissvmTokensLexicalTokenizer)

J2OBJC_FIELD_SETTER(OrgMinimaKissvmTokensLexicalTokenizer, mTokens_, id<JavaUtilList>)

FOUNDATION_EXPORT void OrgMinimaKissvmTokensLexicalTokenizer_initWithJavaUtilList_(OrgMinimaKissvmTokensLexicalTokenizer *self, id<JavaUtilList> zTokens);

FOUNDATION_EXPORT OrgMinimaKissvmTokensLexicalTokenizer *new_OrgMinimaKissvmTokensLexicalTokenizer_initWithJavaUtilList_(id<JavaUtilList> zTokens) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaKissvmTokensLexicalTokenizer *create_OrgMinimaKissvmTokensLexicalTokenizer_initWithJavaUtilList_(id<JavaUtilList> zTokens);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaKissvmTokensLexicalTokenizer)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaKissvmTokensLexicalTokenizer")
