//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/functions/cast/SCRIPT.java
//

#include "J2ObjC_source.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/exceptions/ExecutionException.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/functions/MinimaFunction.h"
#include "org/minima/kissvm/functions/cast/SCRIPT.h"
#include "org/minima/kissvm/values/BooleanValue.h"
#include "org/minima/kissvm/values/HEXValue.h"
#include "org/minima/kissvm/values/NumberValue.h"
#include "org/minima/kissvm/values/ScriptValue.h"
#include "org/minima/kissvm/values/Value.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"

@implementation OrgMinimaKissvmFunctionsCastSCRIPT

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaKissvmFunctionsCastSCRIPT_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaKissvmValuesValue *)runFunctionWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  OrgMinimaKissvmValuesValue *val = [((id<OrgMinimaKissvmExpressionsExpression>) nil_chk([self getParameterWithInt:0])) getValueWithOrgMinimaKissvmContract:zContract];
  jint type = [((OrgMinimaKissvmValuesValue *) nil_chk(val)) getValueType];
  if (type == OrgMinimaKissvmValuesNumberValue_VALUE_NUMBER) {
    return create_OrgMinimaKissvmValuesScriptValue_initWithNSString_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([val getNumber])) description]);
  }
  else if (type == OrgMinimaKissvmValuesHEXValue_VALUE_HEX) {
    return create_OrgMinimaKissvmValuesScriptValue_initWithNSString_([((OrgMinimaObjectsBaseMiniData *) nil_chk([val getMiniData])) to0xString]);
  }
  else if (type == OrgMinimaKissvmValuesBooleanValue_VALUE_BOOLEAN) {
    return create_OrgMinimaKissvmValuesScriptValue_initWithNSString_([val description]);
  }
  else if (type == OrgMinimaKissvmValuesScriptValue_VALUE_SCRIPT) {
    return val;
  }
  @throw create_OrgMinimaKissvmExceptionsExecutionException_initWithNSString_(JreStrcat("$I", @"Incorrect Vaue Type! ", type));
}

- (OrgMinimaKissvmFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaKissvmFunctionsCastSCRIPT_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaKissvmContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaKissvmContract;", "LOrgMinimaKissvmExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaKissvmFunctionsCastSCRIPT = { "SCRIPT", "org.minima.kissvm.functions.cast", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmFunctionsCastSCRIPT;
}

@end

void OrgMinimaKissvmFunctionsCastSCRIPT_init(OrgMinimaKissvmFunctionsCastSCRIPT *self) {
  OrgMinimaKissvmFunctionsMinimaFunction_initWithNSString_(self, @"SCRIPT");
}

OrgMinimaKissvmFunctionsCastSCRIPT *new_OrgMinimaKissvmFunctionsCastSCRIPT_init() {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmFunctionsCastSCRIPT, init)
}

OrgMinimaKissvmFunctionsCastSCRIPT *create_OrgMinimaKissvmFunctionsCastSCRIPT_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmFunctionsCastSCRIPT, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmFunctionsCastSCRIPT)
