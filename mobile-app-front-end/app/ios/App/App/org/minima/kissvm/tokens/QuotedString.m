//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/tokens/QuotedString.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Character.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/tokens/QuotedString.h"

@interface OrgMinimaKissvmTokensQuotedString ()

- (jint)findFinalQuoteWithInt:(jint)zCurrentPos;

@end

__attribute__((unused)) static jint OrgMinimaKissvmTokensQuotedString_findFinalQuoteWithInt_(OrgMinimaKissvmTokensQuotedString *self, jint zCurrentPos);

@implementation OrgMinimaKissvmTokensQuotedString

- (instancetype)initWithNSString:(NSString *)zString {
  OrgMinimaKissvmTokensQuotedString_initWithNSString_(self, zString);
  return self;
}

- (NSString *)getDeQuotedString {
  mCurrentQuote_ = 0;
  mCurrentPos_ = 0;
  JreStrongAssign(&mQuotedString_, @"");
  jint len = [((NSString *) nil_chk(mString_)) java_length];
  while (mCurrentPos_ < len) {
    NSString *next = JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(mString_)) charAtWithInt:mCurrentPos_]);
    if ([((NSString *) nil_chk(next)) isEqual:@"["]) {
      NSString *rep = JreStrcat("CI", ':', mCurrentQuote_);
      jint end = OrgMinimaKissvmTokensQuotedString_findFinalQuoteWithInt_(self, mCurrentPos_ + 1);
      NSString *quote = [((NSString *) nil_chk(mString_)) java_substring:mCurrentPos_ endIndex:end + 1];
      JreStrAppendStrong(&mQuotedString_, "$", rep);
      [((JavaUtilArrayList *) nil_chk(mQuotes_)) addWithId:quote];
      mCurrentQuote_++;
      mCurrentPos_ = end;
    }
    else {
      JreStrAppendStrong(&mQuotedString_, "$", next);
    }
    mCurrentPos_++;
  }
  return mQuotedString_;
}

- (jint)findFinalQuoteWithInt:(jint)zCurrentPos {
  return OrgMinimaKissvmTokensQuotedString_findFinalQuoteWithInt_(self, zCurrentPos);
}

- (NSString *)getQuoteWithInt:(jint)zQuote {
  return [((JavaUtilArrayList *) nil_chk(mQuotes_)) getWithInt:zQuote];
}

- (jint)getQuotesSize {
  return [((JavaUtilArrayList *) nil_chk(mQuotes_)) size];
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaKissvmTokensQuotedString_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mString_);
  RELEASE_(mQuotedString_);
  RELEASE_(mQuotes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getDeQuotedString);
  methods[2].selector = @selector(findFinalQuoteWithInt:);
  methods[3].selector = @selector(getQuoteWithInt:);
  methods[4].selector = @selector(getQuotesSize);
  methods[5].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mString_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mQuotedString_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mQuotes_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "mCurrentPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentQuote_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "findFinalQuote", "I", "getQuote", "main", "[LNSString;", "Ljava/util/ArrayList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgMinimaKissvmTokensQuotedString = { "QuotedString", "org.minima.kissvm.tokens", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmTokensQuotedString;
}

@end

void OrgMinimaKissvmTokensQuotedString_initWithNSString_(OrgMinimaKissvmTokensQuotedString *self, NSString *zString) {
  NSObject_init(self);
  JreStrongAssign(&self->mString_, zString);
  JreStrongAssignAndConsume(&self->mQuotes_, new_JavaUtilArrayList_init());
}

OrgMinimaKissvmTokensQuotedString *new_OrgMinimaKissvmTokensQuotedString_initWithNSString_(NSString *zString) {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmTokensQuotedString, initWithNSString_, zString)
}

OrgMinimaKissvmTokensQuotedString *create_OrgMinimaKissvmTokensQuotedString_initWithNSString_(NSString *zString) {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmTokensQuotedString, initWithNSString_, zString)
}

jint OrgMinimaKissvmTokensQuotedString_findFinalQuoteWithInt_(OrgMinimaKissvmTokensQuotedString *self, jint zCurrentPos) {
  jint pos = zCurrentPos;
  jint len = [((NSString *) nil_chk(self->mString_)) java_length];
  while (pos < len) {
    NSString *next = JavaLangCharacter_toStringWithChar_([((NSString *) nil_chk(self->mString_)) charAtWithInt:pos]);
    if ([((NSString *) nil_chk(next)) isEqual:@"["]) {
      pos = OrgMinimaKissvmTokensQuotedString_findFinalQuoteWithInt_(self, pos + 1);
    }
    else if ([next isEqual:@"]"]) {
      return pos;
    }
    pos++;
  }
  return -1;
}

void OrgMinimaKissvmTokensQuotedString_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaKissvmTokensQuotedString_initialize();
  NSString *tester = @" let x = [   asjd let s=3  hajs [ asd asd ]asdad ]LET Y=[ 87876 ] ";
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"String : ", tester)];
  tester = OrgMinimaKissvmContract_cleanScriptWithNSString_(tester);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Clean : ", tester)];
  OrgMinimaKissvmTokensQuotedString *qs = create_OrgMinimaKissvmTokensQuotedString_initWithNSString_(tester);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"String : ", tester)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Quoted : ", [qs getDeQuotedString])];
  for (jint i = 0; i < [qs getQuotesSize]; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$", @"Quote [", i, @"]: ", [qs getQuoteWithInt:i])];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmTokensQuotedString)
