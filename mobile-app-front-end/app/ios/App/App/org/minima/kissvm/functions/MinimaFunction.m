//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/functions/MinimaFunction.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/exceptions/ExecutionException.h"
#include "org/minima/kissvm/exceptions/MinimaParseException.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/functions/MinimaFunction.h"
#include "org/minima/kissvm/functions/base/GET.h"
#include "org/minima/kissvm/functions/base/HEXCAT.h"
#include "org/minima/kissvm/functions/base/LEN.h"
#include "org/minima/kissvm/functions/base/REV.h"
#include "org/minima/kissvm/functions/base/RPLVAR.h"
#include "org/minima/kissvm/functions/base/STRCAT.h"
#include "org/minima/kissvm/functions/base/SUBSET.h"
#include "org/minima/kissvm/functions/cast/ASCII.h"
#include "org/minima/kissvm/functions/cast/BOOL.h"
#include "org/minima/kissvm/functions/cast/HEX.h"
#include "org/minima/kissvm/functions/cast/NUMBER.h"
#include "org/minima/kissvm/functions/cast/SCRIPT.h"
#include "org/minima/kissvm/functions/maths/ABS.h"
#include "org/minima/kissvm/functions/maths/BITGET.h"
#include "org/minima/kissvm/functions/maths/BITSET.h"
#include "org/minima/kissvm/functions/maths/CEIL.h"
#include "org/minima/kissvm/functions/maths/DEC.h"
#include "org/minima/kissvm/functions/maths/FLOOR.h"
#include "org/minima/kissvm/functions/maths/INC.h"
#include "org/minima/kissvm/functions/maths/MAX.h"
#include "org/minima/kissvm/functions/maths/MIN.h"
#include "org/minima/kissvm/functions/maths/POW.h"
#include "org/minima/kissvm/functions/maths/SIGDIG.h"
#include "org/minima/kissvm/functions/sha/CHAINSHA.h"
#include "org/minima/kissvm/functions/sha/SHA2.h"
#include "org/minima/kissvm/functions/sha/SHA3.h"
#include "org/minima/kissvm/functions/sigs/CHECKSIG.h"
#include "org/minima/kissvm/functions/sigs/MULTISIG.h"
#include "org/minima/kissvm/functions/sigs/SIGNEDBY.h"
#include "org/minima/kissvm/functions/state/DYNSTATE.h"
#include "org/minima/kissvm/functions/state/PREVSTATE.h"
#include "org/minima/kissvm/functions/state/SAMESTATE.h"
#include "org/minima/kissvm/functions/state/STATE.h"
#include "org/minima/kissvm/functions/txn/output/GETOUTADDR.h"
#include "org/minima/kissvm/functions/txn/output/GETOUTAMT.h"
#include "org/minima/kissvm/functions/txn/output/GETOUTTOK.h"
#include "org/minima/kissvm/functions/txn/output/VERIFYOUT.h"
#include "org/minima/kissvm/values/Value.h"

@interface OrgMinimaKissvmFunctionsMinimaFunction () {
 @public
  NSString *mName_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaKissvmFunctionsMinimaFunction, mName_, NSString *)

J2OBJC_INITIALIZED_DEFN(OrgMinimaKissvmFunctionsMinimaFunction)

IOSObjectArray *OrgMinimaKissvmFunctionsMinimaFunction_ALL_FUNCTIONS;

@implementation OrgMinimaKissvmFunctionsMinimaFunction

- (instancetype)initWithNSString:(NSString *)zName {
  OrgMinimaKissvmFunctionsMinimaFunction_initWithNSString_(self, zName);
  return self;
}

- (void)addParameterWithOrgMinimaKissvmExpressionsExpression:(id<OrgMinimaKissvmExpressionsExpression>)zParam {
  [((JavaUtilArrayList *) nil_chk(mParameters_)) addWithId:zParam];
}

- (id<OrgMinimaKissvmExpressionsExpression>)getParameterWithInt:(jint)zParamNum {
  if (zParamNum >= [self getParameterNum]) {
    @throw new_OrgMinimaKissvmExceptionsExecutionException_initWithNSString_(JreStrcat("$$$I", @"Parameter missing for ", [self getName], @" num:", zParamNum));
  }
  return [((JavaUtilArrayList *) nil_chk(mParameters_)) getWithInt:zParamNum];
}

- (jint)getParameterNum {
  return [((JavaUtilArrayList *) nil_chk(mParameters_)) size];
}

- (JavaUtilArrayList *)getAllParameters {
  return mParameters_;
}

- (NSString *)getName {
  return mName_;
}

- (OrgMinimaKissvmValuesValue *)runFunctionWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgMinimaKissvmFunctionsMinimaFunction *)getNewFunction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (OrgMinimaKissvmFunctionsMinimaFunction *)getFunctionWithNSString:(NSString *)zFunction {
  return OrgMinimaKissvmFunctionsMinimaFunction_getFunctionWithNSString_(zFunction);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmValuesValue;", 0x401, 7, 8, 5, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmFunctionsMinimaFunction;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmFunctionsMinimaFunction;", 0x9, 9, 0, 10, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(addParameterWithOrgMinimaKissvmExpressionsExpression:);
  methods[2].selector = @selector(getParameterWithInt:);
  methods[3].selector = @selector(getParameterNum);
  methods[4].selector = @selector(getAllParameters);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(runFunctionWithOrgMinimaKissvmContract:);
  methods[7].selector = @selector(getNewFunction);
  methods[8].selector = @selector(getFunctionWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALL_FUNCTIONS", "[LOrgMinimaKissvmFunctionsMinimaFunction;", .constantValue.asLong = 0, 0x9, -1, 11, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParameters_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "addParameter", "LOrgMinimaKissvmExpressionsExpression;", "getParameter", "I", "LOrgMinimaKissvmExceptionsExecutionException;", "()Ljava/util/ArrayList<Lorg/minima/kissvm/expressions/Expression;>;", "runFunction", "LOrgMinimaKissvmContract;", "getFunction", "LOrgMinimaKissvmExceptionsMinimaParseException;", &OrgMinimaKissvmFunctionsMinimaFunction_ALL_FUNCTIONS, "Ljava/util/ArrayList<Lorg/minima/kissvm/expressions/Expression;>;" };
  static const J2ObjcClassInfo _OrgMinimaKissvmFunctionsMinimaFunction = { "MinimaFunction", "org.minima.kissvm.functions", ptrTable, methods, fields, 7, 0x401, 9, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmFunctionsMinimaFunction;
}

+ (void)initialize {
  if (self == [OrgMinimaKissvmFunctionsMinimaFunction class]) {
    OrgMinimaKissvmFunctionsMinimaFunction_ALL_FUNCTIONS = [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgMinimaKissvmFunctionsBaseSTRCAT_init(), create_OrgMinimaKissvmFunctionsBaseHEXCAT_init(), create_OrgMinimaKissvmFunctionsBaseLEN_init(), create_OrgMinimaKissvmFunctionsBaseRPLVAR_init(), create_OrgMinimaKissvmFunctionsBaseREV_init(), create_OrgMinimaKissvmFunctionsBaseSUBSET_init(), create_OrgMinimaKissvmFunctionsBaseGET_init(), create_OrgMinimaKissvmFunctionsCastBOOL_init(), create_OrgMinimaKissvmFunctionsCastNUMBER_init(), create_OrgMinimaKissvmFunctionsCastHEX_init(), create_OrgMinimaKissvmFunctionsCastSCRIPT_init(), create_OrgMinimaKissvmFunctionsCastASCII_init(), create_OrgMinimaKissvmFunctionsMathsABS_init(), create_OrgMinimaKissvmFunctionsMathsCEIL_init(), create_OrgMinimaKissvmFunctionsMathsFLOOR_init(), create_OrgMinimaKissvmFunctionsMathsMAX_init(), create_OrgMinimaKissvmFunctionsMathsMIN_init(), create_OrgMinimaKissvmFunctionsMathsDEC_init(), create_OrgMinimaKissvmFunctionsMathsINC_init(), create_OrgMinimaKissvmFunctionsMathsSIGDIG_init(), create_OrgMinimaKissvmFunctionsMathsPOW_init(), create_OrgMinimaKissvmFunctionsShaSHA3_init(), create_OrgMinimaKissvmFunctionsShaSHA2_init(), create_OrgMinimaKissvmFunctionsShaCHAINSHA_init(), create_OrgMinimaKissvmFunctionsMathsBITSET_init(), create_OrgMinimaKissvmFunctionsMathsBITGET_init(), create_OrgMinimaKissvmFunctionsSigsSIGNEDBY_init(), create_OrgMinimaKissvmFunctionsSigsMULTISIG_init(), create_OrgMinimaKissvmFunctionsSigsCHECKSIG_init(), create_OrgMinimaKissvmFunctionsTxnOutputGETOUTADDR_init(), create_OrgMinimaKissvmFunctionsTxnOutputGETOUTAMT_init(), create_OrgMinimaKissvmFunctionsTxnOutputGETOUTTOK_init(), create_OrgMinimaKissvmFunctionsTxnOutputVERIFYOUT_init(), create_OrgMinimaKissvmFunctionsStateSTATE_init(), create_OrgMinimaKissvmFunctionsStatePREVSTATE_init(), create_OrgMinimaKissvmFunctionsStateSAMESTATE_init(), create_OrgMinimaKissvmFunctionsStateDYNSTATE_init() } count:37 type:OrgMinimaKissvmFunctionsMinimaFunction_class_()];
    J2OBJC_SET_INITIALIZED(OrgMinimaKissvmFunctionsMinimaFunction)
  }
}

@end

void OrgMinimaKissvmFunctionsMinimaFunction_initWithNSString_(OrgMinimaKissvmFunctionsMinimaFunction *self, NSString *zName) {
  NSObject_init(self);
  self->mName_ = [((NSString *) nil_chk(zName)) uppercaseString];
  self->mParameters_ = new_JavaUtilArrayList_init();
}

OrgMinimaKissvmFunctionsMinimaFunction *OrgMinimaKissvmFunctionsMinimaFunction_getFunctionWithNSString_(NSString *zFunction) {
  OrgMinimaKissvmFunctionsMinimaFunction_initialize();
  {
    IOSObjectArray *a__ = OrgMinimaKissvmFunctionsMinimaFunction_ALL_FUNCTIONS;
    OrgMinimaKissvmFunctionsMinimaFunction * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMinimaKissvmFunctionsMinimaFunction * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMinimaKissvmFunctionsMinimaFunction *func = *b__++;
      if ([((NSString *) nil_chk([((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(func)) getName])) java_equalsIgnoreCase:zFunction]) {
        return [func getNewFunction];
      }
    }
  }
  @throw new_OrgMinimaKissvmExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Invalid Function : ", zFunction));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmFunctionsMinimaFunction)
