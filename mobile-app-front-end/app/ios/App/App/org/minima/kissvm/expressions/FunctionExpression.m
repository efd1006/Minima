//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/expressions/FunctionExpression.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/expressions/FunctionExpression.h"
#include "org/minima/kissvm/functions/MinimaFunction.h"
#include "org/minima/kissvm/values/Value.h"

@implementation OrgMinimaKissvmExpressionsFunctionExpression

- (instancetype)initWithOrgMinimaKissvmFunctionsMinimaFunction:(OrgMinimaKissvmFunctionsMinimaFunction *)zFunction {
  OrgMinimaKissvmExpressionsFunctionExpression_initWithOrgMinimaKissvmFunctionsMinimaFunction_(self, zFunction);
  return self;
}

- (OrgMinimaKissvmValuesValue *)getValueWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  [((OrgMinimaKissvmContract *) nil_chk(zContract)) incrementInstructions];
  OrgMinimaKissvmValuesValue *val = [((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(mFunction_)) runFunctionWithOrgMinimaKissvmContract:zContract];
  [zContract traceLogWithNSString:JreStrcat("$$$", [self description], @" returns:", [((OrgMinimaKissvmValuesValue *) nil_chk(val)) description])];
  return val;
}

- (NSString *)description {
  return JreStrcat("$$$@", @"function:", [((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(mFunction_)) getName], @", params:", [((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(mFunction_)) getAllParameters]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmValuesValue;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaKissvmFunctionsMinimaFunction:);
  methods[1].selector = @selector(getValueWithOrgMinimaKissvmContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFunction_", "LOrgMinimaKissvmFunctionsMinimaFunction;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaKissvmFunctionsMinimaFunction;", "getValue", "LOrgMinimaKissvmContract;", "LOrgMinimaKissvmExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaKissvmExpressionsFunctionExpression = { "FunctionExpression", "org.minima.kissvm.expressions", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmExpressionsFunctionExpression;
}

@end

void OrgMinimaKissvmExpressionsFunctionExpression_initWithOrgMinimaKissvmFunctionsMinimaFunction_(OrgMinimaKissvmExpressionsFunctionExpression *self, OrgMinimaKissvmFunctionsMinimaFunction *zFunction) {
  NSObject_init(self);
  self->mFunction_ = zFunction;
}

OrgMinimaKissvmExpressionsFunctionExpression *new_OrgMinimaKissvmExpressionsFunctionExpression_initWithOrgMinimaKissvmFunctionsMinimaFunction_(OrgMinimaKissvmFunctionsMinimaFunction *zFunction) {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmExpressionsFunctionExpression, initWithOrgMinimaKissvmFunctionsMinimaFunction_, zFunction)
}

OrgMinimaKissvmExpressionsFunctionExpression *create_OrgMinimaKissvmExpressionsFunctionExpression_initWithOrgMinimaKissvmFunctionsMinimaFunction_(OrgMinimaKissvmFunctionsMinimaFunction *zFunction) {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmExpressionsFunctionExpression, initWithOrgMinimaKissvmFunctionsMinimaFunction_, zFunction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmExpressionsFunctionExpression)
