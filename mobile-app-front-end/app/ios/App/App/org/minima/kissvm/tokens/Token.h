//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/tokens/Token.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaKissvmTokensToken")
#ifdef RESTRICT_OrgMinimaKissvmTokensToken
#define INCLUDE_ALL_OrgMinimaKissvmTokensToken 0
#else
#define INCLUDE_ALL_OrgMinimaKissvmTokensToken 1
#endif
#undef RESTRICT_OrgMinimaKissvmTokensToken

#if !defined (OrgMinimaKissvmTokensToken_) && (INCLUDE_ALL_OrgMinimaKissvmTokensToken || defined(INCLUDE_OrgMinimaKissvmTokensToken))
#define OrgMinimaKissvmTokensToken_

@class IOSObjectArray;
@protocol JavaUtilList;

@interface OrgMinimaKissvmTokensToken : NSObject

#pragma mark Public

- (instancetype)initWithInt:(jint)zTokenType
               withNSString:(NSString *)zToken;

- (NSString *)getToken;

- (jint)getTokenType;

- (NSString *)getTokenTypeString;

+ (jboolean)isNumericWithNSString:(NSString *)str;

+ (jboolean)isVariableWithNSString:(NSString *)str;

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs;

+ (id<JavaUtilList>)tokenizeWithNSString:(NSString *)zMiniScript;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgMinimaKissvmTokensToken)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_COMMAND(void);
#define OrgMinimaKissvmTokensToken_TOKEN_COMMAND 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_COMMAND, jint)

inline IOSObjectArray *OrgMinimaKissvmTokensToken_get_TOKENS_COMMAND(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgMinimaKissvmTokensToken_TOKENS_COMMAND;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaKissvmTokensToken, TOKENS_COMMAND, IOSObjectArray *)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_FUNCTIION(void);
#define OrgMinimaKissvmTokensToken_TOKEN_FUNCTIION 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_FUNCTIION, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_OPERATOR(void);
#define OrgMinimaKissvmTokensToken_TOKEN_OPERATOR 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_OPERATOR, jint)

inline IOSObjectArray *OrgMinimaKissvmTokensToken_get_TOKENS_OPERATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *OrgMinimaKissvmTokensToken_TOKENS_OPERATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaKissvmTokensToken, TOKENS_OPERATOR, IOSObjectArray *)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_VALUE(void);
#define OrgMinimaKissvmTokensToken_TOKEN_VALUE 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_VALUE, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_VARIABLE(void);
#define OrgMinimaKissvmTokensToken_TOKEN_VARIABLE 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_VARIABLE, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_GLOBAL(void);
#define OrgMinimaKissvmTokensToken_TOKEN_GLOBAL 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_GLOBAL, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_OPENBRACKET(void);
#define OrgMinimaKissvmTokensToken_TOKEN_OPENBRACKET 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_OPENBRACKET, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_CLOSEBRACKET(void);
#define OrgMinimaKissvmTokensToken_TOKEN_CLOSEBRACKET 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_CLOSEBRACKET, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_TRUE(void);
#define OrgMinimaKissvmTokensToken_TOKEN_TRUE 9
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_TRUE, jint)

inline jint OrgMinimaKissvmTokensToken_get_TOKEN_FALSE(void);
#define OrgMinimaKissvmTokensToken_TOKEN_FALSE 10
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaKissvmTokensToken, TOKEN_FALSE, jint)

FOUNDATION_EXPORT void OrgMinimaKissvmTokensToken_initWithInt_withNSString_(OrgMinimaKissvmTokensToken *self, jint zTokenType, NSString *zToken);

FOUNDATION_EXPORT OrgMinimaKissvmTokensToken *new_OrgMinimaKissvmTokensToken_initWithInt_withNSString_(jint zTokenType, NSString *zToken) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaKissvmTokensToken *create_OrgMinimaKissvmTokensToken_initWithInt_withNSString_(jint zTokenType, NSString *zToken);

FOUNDATION_EXPORT id<JavaUtilList> OrgMinimaKissvmTokensToken_tokenizeWithNSString_(NSString *zMiniScript);

FOUNDATION_EXPORT jboolean OrgMinimaKissvmTokensToken_isNumericWithNSString_(NSString *str);

FOUNDATION_EXPORT jboolean OrgMinimaKissvmTokensToken_isVariableWithNSString_(NSString *str);

FOUNDATION_EXPORT void OrgMinimaKissvmTokensToken_mainWithNSStringArray_(IOSObjectArray *zArgs);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaKissvmTokensToken)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaKissvmTokensToken")
