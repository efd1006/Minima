//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/expressions/ExpressionParser.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/minima/kissvm/exceptions/MinimaParseException.h"
#include "org/minima/kissvm/expressions/BooleanExpression.h"
#include "org/minima/kissvm/expressions/ConstantExpression.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/expressions/ExpressionParser.h"
#include "org/minima/kissvm/expressions/FunctionExpression.h"
#include "org/minima/kissvm/expressions/GlobalExpression.h"
#include "org/minima/kissvm/expressions/OperatorExpression.h"
#include "org/minima/kissvm/expressions/VariableExpression.h"
#include "org/minima/kissvm/functions/MinimaFunction.h"
#include "org/minima/kissvm/tokens/LexicalTokenizer.h"
#include "org/minima/kissvm/tokens/Token.h"
#include "org/minima/kissvm/values/BooleanValue.h"
#include "org/minima/kissvm/values/Value.h"

@interface OrgMinimaKissvmExpressionsExpressionParser ()

+ (id<OrgMinimaKissvmExpressionsExpression>)getRelationWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaKissvmExpressionsExpression>)getLogicWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaKissvmExpressionsExpression>)getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaKissvmExpressionsExpression>)getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaKissvmExpressionsExpression>)getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaKissvmExpressionsExpression>)getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens;

@end

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens);

@implementation OrgMinimaKissvmExpressionsExpressionParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaKissvmExpressionsExpressionParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OrgMinimaKissvmExpressionsExpression>)getExpressionWithJavaUtilList:(id<JavaUtilList>)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithJavaUtilList_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getRelationWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getLogicWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaKissvmExpressionsExpression>)getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer:(OrgMinimaKissvmTokensLexicalTokenizer *)zTokens {
  return OrgMinimaKissvmExpressionsExpressionParser_getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0x9, 0, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 5, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 6, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 7, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 8, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 9, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmExpressionsExpression;", 0xa, 10, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExpressionWithJavaUtilList:);
  methods[2].selector = @selector(getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[3].selector = @selector(getRelationWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[4].selector = @selector(getLogicWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[5].selector = @selector(getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[6].selector = @selector(getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[7].selector = @selector(getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer:);
  methods[8].selector = @selector(getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getExpression", "LJavaUtilList;", "LOrgMinimaKissvmExceptionsMinimaParseException;", "(Ljava/util/List<Lorg/minima/kissvm/tokens/Token;>;)Lorg/minima/kissvm/expressions/Expression;", "LOrgMinimaKissvmTokensLexicalTokenizer;", "getRelation", "getLogic", "getAddSub", "getMulDiv", "getPrimary", "getBaseUnit" };
  static const J2ObjcClassInfo _OrgMinimaKissvmExpressionsExpressionParser = { "ExpressionParser", "org.minima.kissvm.expressions", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmExpressionsExpressionParser;
}

@end

void OrgMinimaKissvmExpressionsExpressionParser_init(OrgMinimaKissvmExpressionsExpressionParser *self) {
  NSObject_init(self);
}

OrgMinimaKissvmExpressionsExpressionParser *new_OrgMinimaKissvmExpressionsExpressionParser_init() {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmExpressionsExpressionParser, init)
}

OrgMinimaKissvmExpressionsExpressionParser *create_OrgMinimaKissvmExpressionsExpressionParser_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmExpressionsExpressionParser, init)
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithJavaUtilList_(id<JavaUtilList> zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  OrgMinimaKissvmTokensLexicalTokenizer *lt = new_OrgMinimaKissvmTokensLexicalTokenizer_initWithJavaUtilList_(zTokens);
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer_(lt);
  if (![lt checkAllTokensUsed]) {
    @throw new_OrgMinimaKissvmExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Incorrect token number in expression @ ", [((OrgMinimaKissvmTokensToken *) nil_chk([lt getNextToken])) getToken]));
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"AND"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_AND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"OR"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_OR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"XOR"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_XOR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NAND"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_NAND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NOR"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_NOR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NXOR"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_NXOR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getRelationWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"EQ"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_EQ);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NEQ"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_NEQ);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"GT"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_GT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"GTE"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_GTE);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"LT"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_LT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"LTE"]) {
      exp = new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_LTE);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getLogicWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"&"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_AND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"|"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_OR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"^"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_XOR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getAddSubWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"+"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_ADD);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"-"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_SUB);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"%"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_MODULO);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"<<"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_SHIFTL);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@">>"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_SHIFTR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getMulDivWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"*"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_MUL);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"/"]) {
      exp = new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmExpressionsExpression_withInt_(exp, OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_DIV);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = nil;
  while ([((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaKissvmTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getToken])) isEqual:@"NOT"]) {
      return new_OrgMinimaKissvmExpressionsBooleanExpression_initWithOrgMinimaKissvmExpressionsExpression_withInt_(OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsBooleanExpression_BOOLEAN_NOT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NEG"]) {
      return new_OrgMinimaKissvmExpressionsOperatorExpression_initWithOrgMinimaKissvmExpressionsExpression_withInt_(OrgMinimaKissvmExpressionsExpressionParser_getPrimaryWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens), OrgMinimaKissvmExpressionsOperatorExpression_OPERATOR_NEG);
    }
    else {
      [zTokens goBackToken];
      exp = OrgMinimaKissvmExpressionsExpressionParser_getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
      break;
    }
  }
  return exp;
}

id<OrgMinimaKissvmExpressionsExpression> OrgMinimaKissvmExpressionsExpressionParser_getBaseUnitWithOrgMinimaKissvmTokensLexicalTokenizer_(OrgMinimaKissvmTokensLexicalTokenizer *zTokens) {
  OrgMinimaKissvmExpressionsExpressionParser_initialize();
  id<OrgMinimaKissvmExpressionsExpression> exp = nil;
  OrgMinimaKissvmTokensToken *tok = [((OrgMinimaKissvmTokensLexicalTokenizer *) nil_chk(zTokens)) getNextToken];
  if ([((OrgMinimaKissvmTokensToken *) nil_chk(tok)) getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_VALUE) {
    exp = new_OrgMinimaKissvmExpressionsConstantExpression_initWithOrgMinimaKissvmValuesValue_(OrgMinimaKissvmValuesValue_getValueWithNSString_([tok getToken]));
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_GLOBAL) {
    exp = new_OrgMinimaKissvmExpressionsGlobalExpression_initWithNSString_([tok getToken]);
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_VARIABLE) {
    exp = new_OrgMinimaKissvmExpressionsVariableExpression_initWithNSString_([tok getToken]);
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_TRUE) {
    exp = new_OrgMinimaKissvmExpressionsConstantExpression_initWithOrgMinimaKissvmValuesValue_(JreLoadStatic(OrgMinimaKissvmValuesBooleanValue, TRUE));
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_FALSE) {
    exp = new_OrgMinimaKissvmExpressionsConstantExpression_initWithOrgMinimaKissvmValuesValue_(JreLoadStatic(OrgMinimaKissvmValuesBooleanValue, FALSE));
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_FUNCTIION) {
    OrgMinimaKissvmFunctionsMinimaFunction *func = OrgMinimaKissvmFunctionsMinimaFunction_getFunctionWithNSString_([tok getToken]);
    OrgMinimaKissvmTokensToken *bracket = [zTokens getNextToken];
    if ([((OrgMinimaKissvmTokensToken *) nil_chk(bracket)) getTokenType] != OrgMinimaKissvmTokensToken_TOKEN_OPENBRACKET) {
      @throw new_OrgMinimaKissvmExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Missing opening bracket at start of function ", [((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(func)) getName]));
    }
    while (true) {
      OrgMinimaKissvmTokensToken *isclosebracket = [zTokens getNextToken];
      if ([((OrgMinimaKissvmTokensToken *) nil_chk(isclosebracket)) getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_CLOSEBRACKET) {
        break;
      }
      else {
        [zTokens goBackToken];
        [((OrgMinimaKissvmFunctionsMinimaFunction *) nil_chk(func)) addParameterWithOrgMinimaKissvmExpressionsExpression:OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens)];
      }
    }
    exp = new_OrgMinimaKissvmExpressionsFunctionExpression_initWithOrgMinimaKissvmFunctionsMinimaFunction_(func);
  }
  else if ([tok getTokenType] == OrgMinimaKissvmTokensToken_TOKEN_OPENBRACKET) {
    exp = OrgMinimaKissvmExpressionsExpressionParser_getExpressionWithOrgMinimaKissvmTokensLexicalTokenizer_(zTokens);
    OrgMinimaKissvmTokensToken *closebracket = [zTokens getNextToken];
    if ([((OrgMinimaKissvmTokensToken *) nil_chk(closebracket)) getTokenType] != OrgMinimaKissvmTokensToken_TOKEN_CLOSEBRACKET) {
      @throw new_OrgMinimaKissvmExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Missing close bracket. Found : ", [closebracket getToken]));
    }
  }
  else {
    @throw new_OrgMinimaKissvmExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Incorrect Token in script ", [tok getToken]));
  }
  return exp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmExpressionsExpressionParser)
