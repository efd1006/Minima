//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/statements/commands/MASTstatement.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/List.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/exceptions/ExecutionException.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/statements/StatementBlock.h"
#include "org/minima/kissvm/statements/StatementParser.h"
#include "org/minima/kissvm/statements/commands/MASTstatement.h"
#include "org/minima/kissvm/tokens/Token.h"
#include "org/minima/kissvm/values/HEXValue.h"
#include "org/minima/kissvm/values/Value.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniScript.h"
#include "org/minima/objects/proofs/ScriptProof.h"

@implementation OrgMinimaKissvmStatementsCommandsMASTstatement

- (instancetype)initWithOrgMinimaKissvmExpressionsExpression:(id<OrgMinimaKissvmExpressionsExpression>)zMAST {
  OrgMinimaKissvmStatementsCommandsMASTstatement_initWithOrgMinimaKissvmExpressionsExpression_(self, zMAST);
  return self;
}

- (void)executeWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  OrgMinimaKissvmValuesHEXValue *mast = (OrgMinimaKissvmValuesHEXValue *) cast_chk([((id<OrgMinimaKissvmExpressionsExpression>) nil_chk(mMASTScript_)) getValueWithOrgMinimaKissvmContract:zContract], [OrgMinimaKissvmValuesHEXValue class]);
  OrgMinimaObjectsWitness *wit = [((OrgMinimaKissvmContract *) nil_chk(zContract)) getWitness];
  OrgMinimaObjectsProofsScriptProof *scrpr = [((OrgMinimaObjectsWitness *) nil_chk(wit)) getScriptWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaKissvmValuesHEXValue *) nil_chk(mast)) getMiniData]];
  if (scrpr == nil) {
    [zContract traceLogWithNSString:JreStrcat("$@", @"MAST ", mMASTScript_)];
    @throw create_OrgMinimaKissvmExceptionsExecutionException_initWithNSString_(JreStrcat("$@", @"No script found for MAST ", [mast getMiniData]));
  }
  NSString *script = [((OrgMinimaObjectsBaseMiniScript *) nil_chk([scrpr getScript])) description];
  [zContract traceLogWithNSString:JreStrcat("$@$$$", @"MAST ", mMASTScript_, @" [ ", script, @" ]")];
  @try {
    id<JavaUtilList> tokens = OrgMinimaKissvmTokensToken_tokenizeWithNSString_(script);
    OrgMinimaKissvmStatementsStatementBlock *mBlock = OrgMinimaKissvmStatementsStatementParser_parseTokensWithJavaUtilList_(tokens);
    [((OrgMinimaKissvmStatementsStatementBlock *) nil_chk(mBlock)) runWithOrgMinimaKissvmContract:zContract];
  }
  @catch (JavaLangException *e) {
    @throw create_OrgMinimaKissvmExceptionsExecutionException_initWithNSString_([e description]);
  }
}

- (NSString *)description {
  return JreStrcat("$$", @"MAST ", [((id<OrgMinimaKissvmExpressionsExpression>) nil_chk(mMASTScript_)) description]);
}

- (void)dealloc {
  RELEASE_(mMASTScript_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaKissvmExpressionsExpression:);
  methods[1].selector = @selector(executeWithOrgMinimaKissvmContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMASTScript_", "LOrgMinimaKissvmExpressionsExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaKissvmExpressionsExpression;", "execute", "LOrgMinimaKissvmContract;", "LOrgMinimaKissvmExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaKissvmStatementsCommandsMASTstatement = { "MASTstatement", "org.minima.kissvm.statements.commands", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmStatementsCommandsMASTstatement;
}

@end

void OrgMinimaKissvmStatementsCommandsMASTstatement_initWithOrgMinimaKissvmExpressionsExpression_(OrgMinimaKissvmStatementsCommandsMASTstatement *self, id<OrgMinimaKissvmExpressionsExpression> zMAST) {
  NSObject_init(self);
  JreStrongAssign(&self->mMASTScript_, zMAST);
}

OrgMinimaKissvmStatementsCommandsMASTstatement *new_OrgMinimaKissvmStatementsCommandsMASTstatement_initWithOrgMinimaKissvmExpressionsExpression_(id<OrgMinimaKissvmExpressionsExpression> zMAST) {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmStatementsCommandsMASTstatement, initWithOrgMinimaKissvmExpressionsExpression_, zMAST)
}

OrgMinimaKissvmStatementsCommandsMASTstatement *create_OrgMinimaKissvmStatementsCommandsMASTstatement_initWithOrgMinimaKissvmExpressionsExpression_(id<OrgMinimaKissvmExpressionsExpression> zMAST) {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmStatementsCommandsMASTstatement, initWithOrgMinimaKissvmExpressionsExpression_, zMAST)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmStatementsCommandsMASTstatement)
