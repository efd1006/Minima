//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/functions/sha/SHA3.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/exceptions/ExecutionException.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/functions/MinimaFunction.h"
#include "org/minima/kissvm/functions/sha/SHA3.h"
#include "org/minima/kissvm/values/HEXValue.h"
#include "org/minima/kissvm/values/Value.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/Crypto.h"

@implementation OrgMinimaKissvmFunctionsShaSHA3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaKissvmFunctionsShaSHA3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaKissvmValuesValue *)runFunctionWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  jint bitlength = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaKissvmValuesValue *) nil_chk([((id<OrgMinimaKissvmExpressionsExpression>) nil_chk([self getParameterWithInt:0])) getValueWithOrgMinimaKissvmContract:zContract])) getNumber])) getAsInt];
  IOSByteArray *data = [((OrgMinimaKissvmValuesValue *) nil_chk([((id<OrgMinimaKissvmExpressionsExpression>) nil_chk([self getParameterWithInt:1])) getValueWithOrgMinimaKissvmContract:zContract])) getRawData];
  if (bitlength > 512 || bitlength < 160 || (bitlength % 32 != 0)) {
    @throw create_OrgMinimaKissvmExceptionsExecutionException_initWithNSString_(JreStrcat("$I", @"Bitlength incompatible with SHA3 ", bitlength));
  }
  IOSByteArray *ans = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashDataWithByteArray:data withInt:bitlength];
  return create_OrgMinimaKissvmValuesHEXValue_initWithByteArray_(ans);
}

- (OrgMinimaKissvmFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaKissvmFunctionsShaSHA3_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaKissvmFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaKissvmContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaKissvmContract;", "LOrgMinimaKissvmExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaKissvmFunctionsShaSHA3 = { "SHA3", "org.minima.kissvm.functions.sha", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmFunctionsShaSHA3;
}

@end

void OrgMinimaKissvmFunctionsShaSHA3_init(OrgMinimaKissvmFunctionsShaSHA3 *self) {
  OrgMinimaKissvmFunctionsMinimaFunction_initWithNSString_(self, @"SHA3");
}

OrgMinimaKissvmFunctionsShaSHA3 *new_OrgMinimaKissvmFunctionsShaSHA3_init() {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmFunctionsShaSHA3, init)
}

OrgMinimaKissvmFunctionsShaSHA3 *create_OrgMinimaKissvmFunctionsShaSHA3_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmFunctionsShaSHA3, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmFunctionsShaSHA3)
