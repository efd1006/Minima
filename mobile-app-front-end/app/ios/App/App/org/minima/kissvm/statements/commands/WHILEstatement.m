//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/kissvm/statements/commands/WHILEstatement.java
//

#include "J2ObjC_source.h"
#include "org/minima/kissvm/Contract.h"
#include "org/minima/kissvm/expressions/Expression.h"
#include "org/minima/kissvm/statements/StatementBlock.h"
#include "org/minima/kissvm/statements/commands/WHILEstatement.h"
#include "org/minima/kissvm/values/Value.h"

@implementation OrgMinimaKissvmStatementsCommandsWHILEstatement

- (instancetype)initWithOrgMinimaKissvmExpressionsExpression:(id<OrgMinimaKissvmExpressionsExpression>)zWhileCheck
                 withOrgMinimaKissvmStatementsStatementBlock:(OrgMinimaKissvmStatementsStatementBlock *)zCodeBlock {
  OrgMinimaKissvmStatementsCommandsWHILEstatement_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_(self, zWhileCheck, zCodeBlock);
  return self;
}

- (void)executeWithOrgMinimaKissvmContract:(OrgMinimaKissvmContract *)zContract {
  while ([((OrgMinimaKissvmValuesValue *) nil_chk([((id<OrgMinimaKissvmExpressionsExpression>) nil_chk(mWhileCheck_)) getValueWithOrgMinimaKissvmContract:zContract])) isTrue]) {
    [((OrgMinimaKissvmContract *) nil_chk(zContract)) traceLogWithNSString:JreStrcat("$$", [self description], @" result:true")];
    [((OrgMinimaKissvmStatementsStatementBlock *) nil_chk(mWhileBlock_)) runWithOrgMinimaKissvmContract:zContract];
  }
  [((OrgMinimaKissvmContract *) nil_chk(zContract)) traceLogWithNSString:JreStrcat("$$", [self description], @" result:false")];
}

- (NSString *)description {
  return JreStrcat("$@", @"WHILE ", mWhileCheck_);
}

- (void)dealloc {
  RELEASE_(mWhileCheck_);
  RELEASE_(mWhileBlock_);

}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaKissvmExpressionsExpression:withOrgMinimaKissvmStatementsStatementBlock:);
  methods[1].selector = @selector(executeWithOrgMinimaKissvmContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWhileCheck_", "LOrgMinimaKissvmExpressionsExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWhileBlock_", "LOrgMinimaKissvmStatementsStatementBlock;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaKissvmExpressionsExpression;LOrgMinimaKissvmStatementsStatementBlock;", "execute", "LOrgMinimaKissvmContract;", "LOrgMinimaKissvmExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaKissvmStatementsCommandsWHILEstatement = { "WHILEstatement", "org.minima.kissvm.statements.commands", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaKissvmStatementsCommandsWHILEstatement;
}

@end

void OrgMinimaKissvmStatementsCommandsWHILEstatement_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_(OrgMinimaKissvmStatementsCommandsWHILEstatement *self, id<OrgMinimaKissvmExpressionsExpression> zWhileCheck, OrgMinimaKissvmStatementsStatementBlock *zCodeBlock) {
  NSObject_init(self);
  JreStrongAssign(&self->mWhileCheck_, zWhileCheck);
  JreStrongAssign(&self->mWhileBlock_, zCodeBlock);
}

OrgMinimaKissvmStatementsCommandsWHILEstatement *new_OrgMinimaKissvmStatementsCommandsWHILEstatement_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_(id<OrgMinimaKissvmExpressionsExpression> zWhileCheck, OrgMinimaKissvmStatementsStatementBlock *zCodeBlock) {
  J2OBJC_NEW_IMPL(OrgMinimaKissvmStatementsCommandsWHILEstatement, initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_, zWhileCheck, zCodeBlock)
}

OrgMinimaKissvmStatementsCommandsWHILEstatement *create_OrgMinimaKissvmStatementsCommandsWHILEstatement_initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_(id<OrgMinimaKissvmExpressionsExpression> zWhileCheck, OrgMinimaKissvmStatementsStatementBlock *zCodeBlock) {
  J2OBJC_CREATE_IMPL(OrgMinimaKissvmStatementsCommandsWHILEstatement, initWithOrgMinimaKissvmExpressionsExpression_withOrgMinimaKissvmStatementsStatementBlock_, zWhileCheck, zCodeBlock)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaKissvmStatementsCommandsWHILEstatement)
