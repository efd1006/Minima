//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/statements/commands/EXECstatement.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/util/List.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/exceptions/ExecutionException.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/statements/StatementBlock.h"
#include "org/minima/miniscript/statements/StatementParser.h"
#include "org/minima/miniscript/statements/commands/EXECstatement.h"
#include "org/minima/miniscript/tokens/Token.h"
#include "org/minima/miniscript/values/ScriptValue.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptStatementsCommandsEXECstatement

- (instancetype)initWithOrgMinimaMiniscriptExpressionsExpression:(id<OrgMinimaMiniscriptExpressionsExpression>)zScript {
  OrgMinimaMiniscriptStatementsCommandsEXECstatement_initWithOrgMinimaMiniscriptExpressionsExpression_(self, zScript);
  return self;
}

- (void)executeWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  OrgMinimaMiniscriptValuesScriptValue *script = (OrgMinimaMiniscriptValuesScriptValue *) cast_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk(mScript_)) getValueWithOrgMinimaMiniscriptContract:zContract], [OrgMinimaMiniscriptValuesScriptValue class]);
  @try {
    id<JavaUtilList> tokens = OrgMinimaMiniscriptTokensToken_tokenizeWithNSString_([((OrgMinimaMiniscriptValuesScriptValue *) nil_chk(script)) description]);
    OrgMinimaMiniscriptStatementsStatementBlock *mBlock = OrgMinimaMiniscriptStatementsStatementParser_parseTokensWithJavaUtilList_(tokens);
    [((OrgMinimaMiniscriptContract *) nil_chk(zContract)) traceLogWithNSString:JreStrcat("$$$", @"EXEC [ ", [script description], @" ]")];
    [((OrgMinimaMiniscriptStatementsStatementBlock *) nil_chk(mBlock)) runWithOrgMinimaMiniscriptContract:zContract];
  }
  @catch (JavaLangException *exc) {
    @throw create_OrgMinimaMiniscriptExceptionsExecutionException_initWithNSString_([exc description]);
  }
}

- (NSString *)description {
  return JreStrcat("$@", @"EXEC ", mScript_);
}

- (void)dealloc {
  RELEASE_(mScript_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaMiniscriptExpressionsExpression:);
  methods[1].selector = @selector(executeWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mScript_", "LOrgMinimaMiniscriptExpressionsExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaMiniscriptExpressionsExpression;", "execute", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptStatementsCommandsEXECstatement = { "EXECstatement", "org.minima.miniscript.statements.commands", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptStatementsCommandsEXECstatement;
}

@end

void OrgMinimaMiniscriptStatementsCommandsEXECstatement_initWithOrgMinimaMiniscriptExpressionsExpression_(OrgMinimaMiniscriptStatementsCommandsEXECstatement *self, id<OrgMinimaMiniscriptExpressionsExpression> zScript) {
  NSObject_init(self);
  JreStrongAssign(&self->mScript_, zScript);
}

OrgMinimaMiniscriptStatementsCommandsEXECstatement *new_OrgMinimaMiniscriptStatementsCommandsEXECstatement_initWithOrgMinimaMiniscriptExpressionsExpression_(id<OrgMinimaMiniscriptExpressionsExpression> zScript) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptStatementsCommandsEXECstatement, initWithOrgMinimaMiniscriptExpressionsExpression_, zScript)
}

OrgMinimaMiniscriptStatementsCommandsEXECstatement *create_OrgMinimaMiniscriptStatementsCommandsEXECstatement_initWithOrgMinimaMiniscriptExpressionsExpression_(id<OrgMinimaMiniscriptExpressionsExpression> zScript) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptStatementsCommandsEXECstatement, initWithOrgMinimaMiniscriptExpressionsExpression_, zScript)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptStatementsCommandsEXECstatement)
