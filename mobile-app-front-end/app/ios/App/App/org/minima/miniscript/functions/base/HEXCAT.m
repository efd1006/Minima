//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/functions/base/HEXCAT.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/exceptions/ExecutionException.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/functions/base/HEXCAT.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptFunctionsBaseHEXCAT

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptFunctionsBaseHEXCAT_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaMiniscriptValuesValue *)runFunctionWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  JavaUtilArrayList *params = [self getAllParameters];
  jint paramnum = [((JavaUtilArrayList *) nil_chk(params)) size];
  IOSObjectArray *parambytes = [IOSObjectArray arrayWithLength:paramnum type:IOSClass_byteArray(1)];
  if (paramnum < 1) {
    @throw create_OrgMinimaMiniscriptExceptionsExecutionException_initWithNSString_(@"HEXCAT requires at least 1 parameter");
  }
  jint totlen = 0;
  jint counter = 0;
  for (id<OrgMinimaMiniscriptExpressionsExpression> __strong exp in params) {
    IOSObjectArray_Set(parambytes, counter, [((OrgMinimaMiniscriptValuesValue *) nil_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk(exp)) getValueWithOrgMinimaMiniscriptContract:zContract])) getRawData]);
    totlen += ((IOSByteArray *) nil_chk(IOSObjectArray_Get(parambytes, counter)))->size_;
    counter++;
  }
  IOSByteArray *result = [IOSByteArray arrayWithLength:totlen];
  jint pos = 0;
  for (jint i = 0; i < counter; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(parambytes, i), 0, result, pos, ((IOSByteArray *) nil_chk(IOSObjectArray_Get(parambytes, i)))->size_);
    pos += ((IOSByteArray *) nil_chk(IOSObjectArray_Get(parambytes, i)))->size_;
  }
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(result);
}

- (OrgMinimaMiniscriptFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaMiniscriptFunctionsBaseHEXCAT_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptFunctionsBaseHEXCAT = { "HEXCAT", "org.minima.miniscript.functions.base", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptFunctionsBaseHEXCAT;
}

@end

void OrgMinimaMiniscriptFunctionsBaseHEXCAT_init(OrgMinimaMiniscriptFunctionsBaseHEXCAT *self) {
  OrgMinimaMiniscriptFunctionsMinimaFunction_initWithNSString_(self, @"HEXCAT");
}

OrgMinimaMiniscriptFunctionsBaseHEXCAT *new_OrgMinimaMiniscriptFunctionsBaseHEXCAT_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptFunctionsBaseHEXCAT, init)
}

OrgMinimaMiniscriptFunctionsBaseHEXCAT *create_OrgMinimaMiniscriptFunctionsBaseHEXCAT_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptFunctionsBaseHEXCAT, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptFunctionsBaseHEXCAT)
