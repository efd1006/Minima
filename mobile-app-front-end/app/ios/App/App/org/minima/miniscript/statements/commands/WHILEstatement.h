//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/statements/commands/WHILEstatement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaMiniscriptStatementsCommandsWHILEstatement")
#ifdef RESTRICT_OrgMinimaMiniscriptStatementsCommandsWHILEstatement
#define INCLUDE_ALL_OrgMinimaMiniscriptStatementsCommandsWHILEstatement 0
#else
#define INCLUDE_ALL_OrgMinimaMiniscriptStatementsCommandsWHILEstatement 1
#endif
#undef RESTRICT_OrgMinimaMiniscriptStatementsCommandsWHILEstatement

#if !defined (OrgMinimaMiniscriptStatementsCommandsWHILEstatement_) && (INCLUDE_ALL_OrgMinimaMiniscriptStatementsCommandsWHILEstatement || defined(INCLUDE_OrgMinimaMiniscriptStatementsCommandsWHILEstatement))
#define OrgMinimaMiniscriptStatementsCommandsWHILEstatement_

#define RESTRICT_OrgMinimaMiniscriptStatementsStatement 1
#define INCLUDE_OrgMinimaMiniscriptStatementsStatement 1
#include "org/minima/miniscript/statements/Statement.h"

@class OrgMinimaMiniscriptContract;
@class OrgMinimaMiniscriptStatementsStatementBlock;
@protocol OrgMinimaMiniscriptExpressionsExpression;

@interface OrgMinimaMiniscriptStatementsCommandsWHILEstatement : NSObject < OrgMinimaMiniscriptStatementsStatement > {
 @public
  id<OrgMinimaMiniscriptExpressionsExpression> mWhileCheck_;
  OrgMinimaMiniscriptStatementsStatementBlock *mWhileBlock_;
}

#pragma mark Public

- (instancetype)initWithOrgMinimaMiniscriptExpressionsExpression:(id<OrgMinimaMiniscriptExpressionsExpression>)zWhileCheck
                 withOrgMinimaMiniscriptStatementsStatementBlock:(OrgMinimaMiniscriptStatementsStatementBlock *)zCodeBlock;

- (void)executeWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaMiniscriptStatementsCommandsWHILEstatement)

J2OBJC_FIELD_SETTER(OrgMinimaMiniscriptStatementsCommandsWHILEstatement, mWhileCheck_, id<OrgMinimaMiniscriptExpressionsExpression>)
J2OBJC_FIELD_SETTER(OrgMinimaMiniscriptStatementsCommandsWHILEstatement, mWhileBlock_, OrgMinimaMiniscriptStatementsStatementBlock *)

FOUNDATION_EXPORT void OrgMinimaMiniscriptStatementsCommandsWHILEstatement_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptStatementsStatementBlock_(OrgMinimaMiniscriptStatementsCommandsWHILEstatement *self, id<OrgMinimaMiniscriptExpressionsExpression> zWhileCheck, OrgMinimaMiniscriptStatementsStatementBlock *zCodeBlock);

FOUNDATION_EXPORT OrgMinimaMiniscriptStatementsCommandsWHILEstatement *new_OrgMinimaMiniscriptStatementsCommandsWHILEstatement_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptStatementsStatementBlock_(id<OrgMinimaMiniscriptExpressionsExpression> zWhileCheck, OrgMinimaMiniscriptStatementsStatementBlock *zCodeBlock) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaMiniscriptStatementsCommandsWHILEstatement *create_OrgMinimaMiniscriptStatementsCommandsWHILEstatement_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptStatementsStatementBlock_(id<OrgMinimaMiniscriptExpressionsExpression> zWhileCheck, OrgMinimaMiniscriptStatementsStatementBlock *zCodeBlock);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaMiniscriptStatementsCommandsWHILEstatement)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaMiniscriptStatementsCommandsWHILEstatement")
