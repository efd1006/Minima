//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/statements/commands/LETstatement.java
//

#include "J2ObjC_source.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/statements/commands/LETstatement.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptStatementsCommandsLETstatement

- (instancetype)initWithNSString:(NSString *)zVariableName
withOrgMinimaMiniscriptExpressionsExpression:(id<OrgMinimaMiniscriptExpressionsExpression>)zExpression {
  OrgMinimaMiniscriptStatementsCommandsLETstatement_initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_(self, zVariableName, zExpression);
  return self;
}

- (void)executeWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  [((OrgMinimaMiniscriptContract *) nil_chk(zContract)) traceLogWithNSString:[self description]];
  [zContract setVariableWithNSString:mName_ withOrgMinimaMiniscriptValuesValue:[((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk(mValue_)) getValueWithOrgMinimaMiniscriptContract:zContract]];
}

- (NSString *)description {
  return JreStrcat("$$$@", @"LET ", mName_, @" = ", mValue_);
}

- (void)dealloc {
  RELEASE_(mName_);
  RELEASE_(mValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withOrgMinimaMiniscriptExpressionsExpression:);
  methods[1].selector = @selector(executeWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValue_", "LOrgMinimaMiniscriptExpressionsExpression;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LOrgMinimaMiniscriptExpressionsExpression;", "execute", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptStatementsCommandsLETstatement = { "LETstatement", "org.minima.miniscript.statements.commands", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptStatementsCommandsLETstatement;
}

@end

void OrgMinimaMiniscriptStatementsCommandsLETstatement_initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_(OrgMinimaMiniscriptStatementsCommandsLETstatement *self, NSString *zVariableName, id<OrgMinimaMiniscriptExpressionsExpression> zExpression) {
  NSObject_init(self);
  JreStrongAssign(&self->mName_, zVariableName);
  JreStrongAssign(&self->mValue_, zExpression);
}

OrgMinimaMiniscriptStatementsCommandsLETstatement *new_OrgMinimaMiniscriptStatementsCommandsLETstatement_initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_(NSString *zVariableName, id<OrgMinimaMiniscriptExpressionsExpression> zExpression) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptStatementsCommandsLETstatement, initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_, zVariableName, zExpression)
}

OrgMinimaMiniscriptStatementsCommandsLETstatement *create_OrgMinimaMiniscriptStatementsCommandsLETstatement_initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_(NSString *zVariableName, id<OrgMinimaMiniscriptExpressionsExpression> zExpression) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptStatementsCommandsLETstatement, initWithNSString_withOrgMinimaMiniscriptExpressionsExpression_, zVariableName, zExpression)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptStatementsCommandsLETstatement)
