//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/functions/sha/SHA3.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/functions/sha/SHA3.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/Value.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/utils/Crypto.h"

@implementation OrgMinimaMiniscriptFunctionsShaSHA3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptFunctionsShaSHA3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaMiniscriptValuesValue *)runFunctionWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  IOSByteArray *data = [((OrgMinimaMiniscriptValuesValue *) nil_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk([self getParameterWithInt:0])) getValueWithOrgMinimaMiniscriptContract:zContract])) getRawData];
  IOSByteArray *ans = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashDataWithByteArray:data];
  OrgMinimaObjectsBaseMiniData32 *hash_ = create_OrgMinimaObjectsBaseMiniData32_initWithByteArray_(ans);
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_([hash_ getData]);
}

- (OrgMinimaMiniscriptFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaMiniscriptFunctionsShaSHA3_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptFunctionsShaSHA3 = { "SHA3", "org.minima.miniscript.functions.sha", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptFunctionsShaSHA3;
}

@end

void OrgMinimaMiniscriptFunctionsShaSHA3_init(OrgMinimaMiniscriptFunctionsShaSHA3 *self) {
  OrgMinimaMiniscriptFunctionsMinimaFunction_initWithNSString_(self, @"SHA3");
}

OrgMinimaMiniscriptFunctionsShaSHA3 *new_OrgMinimaMiniscriptFunctionsShaSHA3_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptFunctionsShaSHA3, init)
}

OrgMinimaMiniscriptFunctionsShaSHA3 *create_OrgMinimaMiniscriptFunctionsShaSHA3_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptFunctionsShaSHA3, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptFunctionsShaSHA3)
