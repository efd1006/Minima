//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/statements/StatementParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaMiniscriptStatementsStatementParser")
#ifdef RESTRICT_OrgMinimaMiniscriptStatementsStatementParser
#define INCLUDE_ALL_OrgMinimaMiniscriptStatementsStatementParser 0
#else
#define INCLUDE_ALL_OrgMinimaMiniscriptStatementsStatementParser 1
#endif
#undef RESTRICT_OrgMinimaMiniscriptStatementsStatementParser

#if !defined (OrgMinimaMiniscriptStatementsStatementParser_) && (INCLUDE_ALL_OrgMinimaMiniscriptStatementsStatementParser || defined(INCLUDE_OrgMinimaMiniscriptStatementsStatementParser))
#define OrgMinimaMiniscriptStatementsStatementParser_

@class OrgMinimaMiniscriptStatementsStatementBlock;
@protocol JavaUtilList;

@interface OrgMinimaMiniscriptStatementsStatementParser : NSObject

#pragma mark Public

- (instancetype)init;

+ (OrgMinimaMiniscriptStatementsStatementBlock *)parseTokensWithJavaUtilList:(id<JavaUtilList>)zTokens;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaMiniscriptStatementsStatementParser)

FOUNDATION_EXPORT void OrgMinimaMiniscriptStatementsStatementParser_init(OrgMinimaMiniscriptStatementsStatementParser *self);

FOUNDATION_EXPORT OrgMinimaMiniscriptStatementsStatementParser *new_OrgMinimaMiniscriptStatementsStatementParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaMiniscriptStatementsStatementParser *create_OrgMinimaMiniscriptStatementsStatementParser_init(void);

FOUNDATION_EXPORT OrgMinimaMiniscriptStatementsStatementBlock *OrgMinimaMiniscriptStatementsStatementParser_parseTokensWithJavaUtilList_(id<JavaUtilList> zTokens);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaMiniscriptStatementsStatementParser)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaMiniscriptStatementsStatementParser")
