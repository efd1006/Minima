//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/statements/commands/IFstatement.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/statements/StatementBlock.h"
#include "org/minima/miniscript/statements/commands/IFstatement.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptStatementsCommandsIFstatement

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptStatementsCommandsIFstatement_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addConditionWithOrgMinimaMiniscriptExpressionsExpression:(id<OrgMinimaMiniscriptExpressionsExpression>)zCondition
                 withOrgMinimaMiniscriptStatementsStatementBlock:(OrgMinimaMiniscriptStatementsStatementBlock *)zCodeBlock {
  [((JavaUtilArrayList *) nil_chk(mConditions_)) addWithId:zCondition];
  [((JavaUtilArrayList *) nil_chk(mActions_)) addWithId:zCodeBlock];
}

- (void)executeWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  [((OrgMinimaMiniscriptContract *) nil_chk(zContract)) traceLogWithNSString:[self description]];
  jint size = [((JavaUtilArrayList *) nil_chk(mConditions_)) size];
  for (jint loop = 0; loop < size; loop++) {
    id<OrgMinimaMiniscriptExpressionsExpression> conditional = [((JavaUtilArrayList *) nil_chk(mConditions_)) getWithInt:loop];
    if ([((OrgMinimaMiniscriptValuesValue *) nil_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk(conditional)) getValueWithOrgMinimaMiniscriptContract:zContract])) isTrue]) {
      OrgMinimaMiniscriptStatementsStatementBlock *codeblock = [((JavaUtilArrayList *) nil_chk(mActions_)) getWithInt:loop];
      [((OrgMinimaMiniscriptStatementsStatementBlock *) nil_chk(codeblock)) runWithOrgMinimaMiniscriptContract:zContract];
      break;
    }
  }
}

- (NSString *)description {
  NSString *ret = @"";
  jint size = [((JavaUtilArrayList *) nil_chk(mConditions_)) size];
  for (jint loop = 0; loop < size; loop++) {
    id<OrgMinimaMiniscriptExpressionsExpression> conditional = [((JavaUtilArrayList *) nil_chk(mConditions_)) getWithInt:loop];
    if (loop == 0) {
      ret = JreStrcat("$@", @"IF ", conditional);
    }
    else {
      JreStrAppend(&ret, "$@", @", ELSEIF ", conditional);
    }
  }
  return ret;
}

- (void)dealloc {
  RELEASE_(mConditions_);
  RELEASE_(mActions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addConditionWithOrgMinimaMiniscriptExpressionsExpression:withOrgMinimaMiniscriptStatementsStatementBlock:);
  methods[2].selector = @selector(executeWithOrgMinimaMiniscriptContract:);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mConditions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 6, -1 },
    { "mActions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "addCondition", "LOrgMinimaMiniscriptExpressionsExpression;LOrgMinimaMiniscriptStatementsStatementBlock;", "execute", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;", "toString", "Ljava/util/ArrayList<Lorg/minima/miniscript/expressions/Expression;>;", "Ljava/util/ArrayList<Lorg/minima/miniscript/statements/StatementBlock;>;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptStatementsCommandsIFstatement = { "IFstatement", "org.minima.miniscript.statements.commands", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptStatementsCommandsIFstatement;
}

@end

void OrgMinimaMiniscriptStatementsCommandsIFstatement_init(OrgMinimaMiniscriptStatementsCommandsIFstatement *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mConditions_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mActions_, new_JavaUtilArrayList_init());
}

OrgMinimaMiniscriptStatementsCommandsIFstatement *new_OrgMinimaMiniscriptStatementsCommandsIFstatement_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptStatementsCommandsIFstatement, init)
}

OrgMinimaMiniscriptStatementsCommandsIFstatement *create_OrgMinimaMiniscriptStatementsCommandsIFstatement_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptStatementsCommandsIFstatement, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptStatementsCommandsIFstatement)
