//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/expressions/ExpressionParser.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/minima/miniscript/exceptions/MinimaParseException.h"
#include "org/minima/miniscript/expressions/BooleanExpression.h"
#include "org/minima/miniscript/expressions/ConstantExpression.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/expressions/ExpressionParser.h"
#include "org/minima/miniscript/expressions/FunctionExpression.h"
#include "org/minima/miniscript/expressions/GlobalExpression.h"
#include "org/minima/miniscript/expressions/OperatorExpression.h"
#include "org/minima/miniscript/expressions/VariableExpression.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/tokens/LexicalTokenizer.h"
#include "org/minima/miniscript/tokens/Token.h"
#include "org/minima/miniscript/values/BooleanValue.h"
#include "org/minima/miniscript/values/Value.h"

@interface OrgMinimaMiniscriptExpressionsExpressionParser ()

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens;

@end

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

__attribute__((unused)) static id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens);

@implementation OrgMinimaMiniscriptExpressionsExpressionParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptExpressionsExpressionParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getExpressionWithJavaUtilList:(id<JavaUtilList>)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithJavaUtilList_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (id<OrgMinimaMiniscriptExpressionsExpression>)getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer:(OrgMinimaMiniscriptTokensLexicalTokenizer *)zTokens {
  return OrgMinimaMiniscriptExpressionsExpressionParser_getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0x9, 0, 1, 2, 3, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 0, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 5, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 6, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 7, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 8, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 9, 4, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptExpressionsExpression;", 0xa, 10, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getExpressionWithJavaUtilList:);
  methods[2].selector = @selector(getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[3].selector = @selector(getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[4].selector = @selector(getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[5].selector = @selector(getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[6].selector = @selector(getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[7].selector = @selector(getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  methods[8].selector = @selector(getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getExpression", "LJavaUtilList;", "LOrgMinimaMiniscriptExceptionsMinimaParseException;", "(Ljava/util/List<Lorg/minima/miniscript/tokens/Token;>;)Lorg/minima/miniscript/expressions/Expression;", "LOrgMinimaMiniscriptTokensLexicalTokenizer;", "getRelation", "getLogic", "getAddSub", "getMulDiv", "getPrimary", "getBaseUnit" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptExpressionsExpressionParser = { "ExpressionParser", "org.minima.miniscript.expressions", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptExpressionsExpressionParser;
}

@end

void OrgMinimaMiniscriptExpressionsExpressionParser_init(OrgMinimaMiniscriptExpressionsExpressionParser *self) {
  NSObject_init(self);
}

OrgMinimaMiniscriptExpressionsExpressionParser *new_OrgMinimaMiniscriptExpressionsExpressionParser_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptExpressionsExpressionParser, init)
}

OrgMinimaMiniscriptExpressionsExpressionParser *create_OrgMinimaMiniscriptExpressionsExpressionParser_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptExpressionsExpressionParser, init)
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithJavaUtilList_(id<JavaUtilList> zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  OrgMinimaMiniscriptTokensLexicalTokenizer *lt = create_OrgMinimaMiniscriptTokensLexicalTokenizer_initWithJavaUtilList_(zTokens);
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(lt);
  if (![lt checkAllTokensUsed]) {
    @throw create_OrgMinimaMiniscriptExceptionsMinimaParseException_initWithNSString_(@"Incorrect token number in expression!");
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"AND"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_AND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"OR"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_OR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"XOR"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_XOR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NAND"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_NAND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NOR"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_NOR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NXOR"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_NXOR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getRelationWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"EQ"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_EQ);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NEQ"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_NEQ);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"GT"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_GT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"GTE"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_GTE);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"LT"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_LT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"LTE"]) {
      exp = create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_LTE);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getLogicWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"&"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_AND);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"|"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_OR);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"^"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_XOR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getAddSubWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"+"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_ADD);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"-"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_SUB);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"%"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_MODULO);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"<<"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_SHIFTL);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@">>"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_SHIFTR);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getMulDivWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"*"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_MUL);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"/"]) {
      exp = create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withOrgMinimaMiniscriptExpressionsExpression_withInt_(exp, OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_DIV);
    }
    else {
      [zTokens goBackToken];
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = nil;
  while ([((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) hasMoreElements]) {
    OrgMinimaMiniscriptTokensToken *tok = [zTokens getNextToken];
    if ([((NSString *) nil_chk([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getToken])) isEqual:@"NOT"]) {
      return create_OrgMinimaMiniscriptExpressionsBooleanExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withInt_(OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsBooleanExpression_BOOLEAN_NOT);
    }
    else if ([((NSString *) nil_chk([tok getToken])) isEqual:@"NEG"]) {
      return create_OrgMinimaMiniscriptExpressionsOperatorExpression_initWithOrgMinimaMiniscriptExpressionsExpression_withInt_(OrgMinimaMiniscriptExpressionsExpressionParser_getPrimaryWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens), OrgMinimaMiniscriptExpressionsOperatorExpression_OPERATOR_NEG);
    }
    else {
      [zTokens goBackToken];
      exp = OrgMinimaMiniscriptExpressionsExpressionParser_getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
      break;
    }
  }
  return exp;
}

id<OrgMinimaMiniscriptExpressionsExpression> OrgMinimaMiniscriptExpressionsExpressionParser_getBaseUnitWithOrgMinimaMiniscriptTokensLexicalTokenizer_(OrgMinimaMiniscriptTokensLexicalTokenizer *zTokens) {
  OrgMinimaMiniscriptExpressionsExpressionParser_initialize();
  id<OrgMinimaMiniscriptExpressionsExpression> exp = nil;
  OrgMinimaMiniscriptTokensToken *tok = [((OrgMinimaMiniscriptTokensLexicalTokenizer *) nil_chk(zTokens)) getNextToken];
  if ([((OrgMinimaMiniscriptTokensToken *) nil_chk(tok)) getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_VALUE) {
    exp = create_OrgMinimaMiniscriptExpressionsConstantExpression_initWithOrgMinimaMiniscriptValuesValue_(OrgMinimaMiniscriptValuesValue_getValueWithNSString_([tok getToken]));
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_GLOBAL) {
    exp = create_OrgMinimaMiniscriptExpressionsGlobalExpression_initWithNSString_([tok getToken]);
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_VARIABLE) {
    exp = create_OrgMinimaMiniscriptExpressionsVariableExpression_initWithNSString_([tok getToken]);
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_TRUE) {
    exp = create_OrgMinimaMiniscriptExpressionsConstantExpression_initWithOrgMinimaMiniscriptValuesValue_(JreLoadStatic(OrgMinimaMiniscriptValuesBooleanValue, TRUE));
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_FALSE) {
    exp = create_OrgMinimaMiniscriptExpressionsConstantExpression_initWithOrgMinimaMiniscriptValuesValue_(JreLoadStatic(OrgMinimaMiniscriptValuesBooleanValue, FALSE));
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_FUNCTIION) {
    OrgMinimaMiniscriptFunctionsMinimaFunction *func = OrgMinimaMiniscriptFunctionsMinimaFunction_getFunctionWithNSString_([tok getToken]);
    OrgMinimaMiniscriptTokensToken *bracket = [zTokens getNextToken];
    if ([((OrgMinimaMiniscriptTokensToken *) nil_chk(bracket)) getTokenType] != OrgMinimaMiniscriptTokensToken_TOKEN_OPENBRACKET) {
      @throw create_OrgMinimaMiniscriptExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Missing opening bracket at start of function ", [((OrgMinimaMiniscriptFunctionsMinimaFunction *) nil_chk(func)) getName]));
    }
    while (true) {
      OrgMinimaMiniscriptTokensToken *isclosebracket = [zTokens getNextToken];
      if ([((OrgMinimaMiniscriptTokensToken *) nil_chk(isclosebracket)) getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_CLOSEBRACKET) {
        break;
      }
      else {
        [zTokens goBackToken];
        [((OrgMinimaMiniscriptFunctionsMinimaFunction *) nil_chk(func)) addParameterWithOrgMinimaMiniscriptExpressionsExpression:OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens)];
      }
    }
    exp = create_OrgMinimaMiniscriptExpressionsFunctionExpression_initWithOrgMinimaMiniscriptFunctionsMinimaFunction_(func);
  }
  else if ([tok getTokenType] == OrgMinimaMiniscriptTokensToken_TOKEN_OPENBRACKET) {
    exp = OrgMinimaMiniscriptExpressionsExpressionParser_getExpressionWithOrgMinimaMiniscriptTokensLexicalTokenizer_(zTokens);
    OrgMinimaMiniscriptTokensToken *closebracket = [zTokens getNextToken];
    if ([((OrgMinimaMiniscriptTokensToken *) nil_chk(closebracket)) getTokenType] != OrgMinimaMiniscriptTokensToken_TOKEN_CLOSEBRACKET) {
      @throw create_OrgMinimaMiniscriptExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Missing close bracket. Found : ", [closebracket getToken]));
    }
  }
  else {
    @throw create_OrgMinimaMiniscriptExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Incorrect Token in script ", [tok getToken]));
  }
  return exp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptExpressionsExpressionParser)
