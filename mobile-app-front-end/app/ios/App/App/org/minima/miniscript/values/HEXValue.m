//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/values/HEXValue.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/Value.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"

@implementation OrgMinimaMiniscriptValuesHEXValue

- (instancetype)initWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zData {
  OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_(self, zData);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)zData {
  OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(self, zData);
  return self;
}

- (instancetype)initWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_(self, zNumber);
  return self;
}

- (instancetype)initWithNSString:(NSString *)zHex {
  OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(self, zHex);
  return self;
}

- (jint)getValueType {
  return OrgMinimaMiniscriptValuesHEXValue_VALUE_HEX;
}

- (jboolean)isEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getMiniData]];
}

- (jboolean)isLessWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) isLessWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getMiniData]];
}

- (jboolean)isLessEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) isLessEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getMiniData]];
}

- (jboolean)isMoreWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) isMoreWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getMiniData]];
}

- (jboolean)isMoreEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) isMoreEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getMiniData]];
}

- (OrgMinimaMiniscriptValuesValue *)addWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) addWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)subWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) subWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)multWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) multWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)divWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) divWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (NSString *)description {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk(mData_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaObjectsBaseMiniData:);
  methods[1].selector = @selector(initWithByteArray:);
  methods[2].selector = @selector(initWithOrgMinimaObjectsBaseMiniNumber:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(getValueType);
  methods[5].selector = @selector(isEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[6].selector = @selector(isLessWithOrgMinimaMiniscriptValuesValue:);
  methods[7].selector = @selector(isLessEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[8].selector = @selector(isMoreWithOrgMinimaMiniscriptValuesValue:);
  methods[9].selector = @selector(isMoreEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[10].selector = @selector(addWithOrgMinimaMiniscriptValuesValue:);
  methods[11].selector = @selector(subWithOrgMinimaMiniscriptValuesValue:);
  methods[12].selector = @selector(multWithOrgMinimaMiniscriptValuesValue:);
  methods[13].selector = @selector(divWithOrgMinimaMiniscriptValuesValue:);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALUE_HEX", "I", .constantValue.asInt = OrgMinimaMiniscriptValuesHEXValue_VALUE_HEX, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsBaseMiniData;", "[B", "LOrgMinimaObjectsBaseMiniNumber;", "LNSString;", "isEqual", "LOrgMinimaMiniscriptValuesValue;", "isLess", "isLessEqual", "isMore", "isMoreEqual", "add", "sub", "mult", "div", "toString" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptValuesHEXValue = { "HEXValue", "org.minima.miniscript.values", ptrTable, methods, fields, 7, 0x1, 15, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptValuesHEXValue;
}

@end

void OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaMiniscriptValuesHEXValue *self, OrgMinimaObjectsBaseMiniData *zData) {
  OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(self, [((OrgMinimaObjectsBaseMiniData *) nil_chk(zData)) getData]);
}

OrgMinimaMiniscriptValuesHEXValue *new_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaObjectsBaseMiniData *zData) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithOrgMinimaObjectsBaseMiniData_, zData)
}

OrgMinimaMiniscriptValuesHEXValue *create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaObjectsBaseMiniData *zData) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithOrgMinimaObjectsBaseMiniData_, zData)
}

void OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(OrgMinimaMiniscriptValuesHEXValue *self, IOSByteArray *zData) {
  OrgMinimaMiniscriptValuesValue_init(self);
  JreStrongAssignAndConsume(&self->mData_, new_OrgMinimaObjectsBaseMiniData_initWithByteArray_(zData));
  JreStrongAssignAndConsume(&self->mNumber_, new_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_([self->mData_ getDataVaue]));
}

OrgMinimaMiniscriptValuesHEXValue *new_OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(IOSByteArray *zData) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithByteArray_, zData)
}

OrgMinimaMiniscriptValuesHEXValue *create_OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(IOSByteArray *zData) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithByteArray_, zData)
}

void OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaMiniscriptValuesHEXValue *self, OrgMinimaObjectsBaseMiniNumber *zNumber) {
  OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(self, [((NSString *) nil_chk([create_JavaMathBigInteger_initWithNSString_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) description]) toStringWithInt:16])) uppercaseString]);
}

OrgMinimaMiniscriptValuesHEXValue *new_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniNumber *zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithOrgMinimaObjectsBaseMiniNumber_, zNumber)
}

OrgMinimaMiniscriptValuesHEXValue *create_OrgMinimaMiniscriptValuesHEXValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniNumber *zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithOrgMinimaObjectsBaseMiniNumber_, zNumber)
}

void OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(OrgMinimaMiniscriptValuesHEXValue *self, NSString *zHex) {
  OrgMinimaMiniscriptValuesValue_init(self);
  JreStrongAssignAndConsume(&self->mData_, new_OrgMinimaObjectsBaseMiniData_initWithNSString_(zHex));
  JreStrongAssignAndConsume(&self->mNumber_, new_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_([self->mData_ getDataVaue]));
}

OrgMinimaMiniscriptValuesHEXValue *new_OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(NSString *zHex) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithNSString_, zHex)
}

OrgMinimaMiniscriptValuesHEXValue *create_OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(NSString *zHex) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesHEXValue, initWithNSString_, zHex)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptValuesHEXValue)
