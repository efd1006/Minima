//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/values/NumberValue.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/math/BigInteger.h"
#include "org/minima/miniscript/values/NumberValue.h"
#include "org/minima/miniscript/values/Value.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"

@implementation OrgMinimaMiniscriptValuesNumberValue

- (instancetype)initWithInt:(jint)zValue {
  OrgMinimaMiniscriptValuesNumberValue_initWithInt_(self, zValue);
  return self;
}

- (instancetype)initWithLong:(jlong)zValue {
  OrgMinimaMiniscriptValuesNumberValue_initWithLong_(self, zValue);
  return self;
}

- (instancetype)initWithDouble:(jdouble)zValue {
  OrgMinimaMiniscriptValuesNumberValue_initWithDouble_(self, zValue);
  return self;
}

- (instancetype)initWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zValue {
  OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_(self, zValue);
  return self;
}

- (instancetype)initWithNSString:(NSString *)zNumber {
  OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(self, zNumber);
  return self;
}

- (jint)getValueType {
  return OrgMinimaMiniscriptValuesNumberValue_VALUE_NUMBER;
}

- (jboolean)isEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isEqualWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]];
}

- (jboolean)isLessWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isLessWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]];
}

- (jboolean)isLessEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]];
}

- (jboolean)isMoreWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isMoreWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]];
}

- (jboolean)isMoreEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]];
}

- (OrgMinimaMiniscriptValuesValue *)addWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) addWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)subWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) subWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)multWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) multWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (OrgMinimaMiniscriptValuesValue *)divWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  return create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) divWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaMiniscriptValuesValue *) nil_chk(zValue)) getNumber]]);
}

- (NSString *)description {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 13, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 14, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(initWithLong:);
  methods[2].selector = @selector(initWithDouble:);
  methods[3].selector = @selector(initWithOrgMinimaObjectsBaseMiniNumber:);
  methods[4].selector = @selector(initWithNSString:);
  methods[5].selector = @selector(getValueType);
  methods[6].selector = @selector(isEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[7].selector = @selector(isLessWithOrgMinimaMiniscriptValuesValue:);
  methods[8].selector = @selector(isLessEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[9].selector = @selector(isMoreWithOrgMinimaMiniscriptValuesValue:);
  methods[10].selector = @selector(isMoreEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[11].selector = @selector(addWithOrgMinimaMiniscriptValuesValue:);
  methods[12].selector = @selector(subWithOrgMinimaMiniscriptValuesValue:);
  methods[13].selector = @selector(multWithOrgMinimaMiniscriptValuesValue:);
  methods[14].selector = @selector(divWithOrgMinimaMiniscriptValuesValue:);
  methods[15].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALUE_NUMBER", "I", .constantValue.asInt = OrgMinimaMiniscriptValuesNumberValue_VALUE_NUMBER, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "J", "D", "LOrgMinimaObjectsBaseMiniNumber;", "LNSString;", "isEqual", "LOrgMinimaMiniscriptValuesValue;", "isLess", "isLessEqual", "isMore", "isMoreEqual", "add", "sub", "mult", "div", "toString" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptValuesNumberValue = { "NumberValue", "org.minima.miniscript.values", ptrTable, methods, fields, 7, 0x1, 16, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptValuesNumberValue;
}

@end

void OrgMinimaMiniscriptValuesNumberValue_initWithInt_(OrgMinimaMiniscriptValuesNumberValue *self, jint zValue) {
  OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(self, JavaLangInteger_toStringWithInt_(zValue));
}

OrgMinimaMiniscriptValuesNumberValue *new_OrgMinimaMiniscriptValuesNumberValue_initWithInt_(jint zValue) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithInt_, zValue)
}

OrgMinimaMiniscriptValuesNumberValue *create_OrgMinimaMiniscriptValuesNumberValue_initWithInt_(jint zValue) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithInt_, zValue)
}

void OrgMinimaMiniscriptValuesNumberValue_initWithLong_(OrgMinimaMiniscriptValuesNumberValue *self, jlong zValue) {
  OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(self, JavaLangLong_toStringWithLong_(zValue));
}

OrgMinimaMiniscriptValuesNumberValue *new_OrgMinimaMiniscriptValuesNumberValue_initWithLong_(jlong zValue) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithLong_, zValue)
}

OrgMinimaMiniscriptValuesNumberValue *create_OrgMinimaMiniscriptValuesNumberValue_initWithLong_(jlong zValue) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithLong_, zValue)
}

void OrgMinimaMiniscriptValuesNumberValue_initWithDouble_(OrgMinimaMiniscriptValuesNumberValue *self, jdouble zValue) {
  OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(self, JavaLangDouble_toStringWithDouble_(zValue));
}

OrgMinimaMiniscriptValuesNumberValue *new_OrgMinimaMiniscriptValuesNumberValue_initWithDouble_(jdouble zValue) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithDouble_, zValue)
}

OrgMinimaMiniscriptValuesNumberValue *create_OrgMinimaMiniscriptValuesNumberValue_initWithDouble_(jdouble zValue) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithDouble_, zValue)
}

void OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaMiniscriptValuesNumberValue *self, OrgMinimaObjectsBaseMiniNumber *zValue) {
  OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(self, [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zValue)) description]);
}

OrgMinimaMiniscriptValuesNumberValue *new_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniNumber *zValue) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithOrgMinimaObjectsBaseMiniNumber_, zValue)
}

OrgMinimaMiniscriptValuesNumberValue *create_OrgMinimaMiniscriptValuesNumberValue_initWithOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniNumber *zValue) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithOrgMinimaObjectsBaseMiniNumber_, zValue)
}

void OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(OrgMinimaMiniscriptValuesNumberValue *self, NSString *zNumber) {
  OrgMinimaMiniscriptValuesValue_init(self);
  JreStrongAssignAndConsume(&self->mNumber_, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(zNumber));
  JreStrongAssignAndConsume(&self->mData_, new_OrgMinimaObjectsBaseMiniData_initWithNSString_([((JavaMathBigInteger *) nil_chk([self->mNumber_ getAsBigInteger])) toStringWithInt:16]));
}

OrgMinimaMiniscriptValuesNumberValue *new_OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(NSString *zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithNSString_, zNumber)
}

OrgMinimaMiniscriptValuesNumberValue *create_OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(NSString *zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptValuesNumberValue, initWithNSString_, zNumber)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptValuesNumberValue)
