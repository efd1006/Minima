//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/functions/base/STRCAT.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/exceptions/ExecutionException.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/functions/base/STRCAT.h"
#include "org/minima/miniscript/values/ScriptValue.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptFunctionsBaseSTRCAT

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptFunctionsBaseSTRCAT_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaMiniscriptValuesValue *)runFunctionWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  JavaUtilArrayList *params = [self getAllParameters];
  if ([((JavaUtilArrayList *) nil_chk(params)) size] < 1) {
    @throw create_OrgMinimaMiniscriptExceptionsExecutionException_initWithNSString_(@"STRCAT requires at least 1 parameter");
  }
  NSString *fullstring = @"";
  for (id<OrgMinimaMiniscriptExpressionsExpression> __strong exp in params) {
    JreStrAppend(&fullstring, "$C", [((OrgMinimaMiniscriptValuesValue *) nil_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk(exp)) getValueWithOrgMinimaMiniscriptContract:zContract])) description], ' ');
  }
  return create_OrgMinimaMiniscriptValuesScriptValue_initWithNSString_([fullstring java_trim]);
}

- (OrgMinimaMiniscriptFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaMiniscriptFunctionsBaseSTRCAT_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptFunctionsBaseSTRCAT = { "STRCAT", "org.minima.miniscript.functions.base", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptFunctionsBaseSTRCAT;
}

@end

void OrgMinimaMiniscriptFunctionsBaseSTRCAT_init(OrgMinimaMiniscriptFunctionsBaseSTRCAT *self) {
  OrgMinimaMiniscriptFunctionsMinimaFunction_initWithNSString_(self, @"STRCAT");
}

OrgMinimaMiniscriptFunctionsBaseSTRCAT *new_OrgMinimaMiniscriptFunctionsBaseSTRCAT_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptFunctionsBaseSTRCAT, init)
}

OrgMinimaMiniscriptFunctionsBaseSTRCAT *create_OrgMinimaMiniscriptFunctionsBaseSTRCAT_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptFunctionsBaseSTRCAT, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptFunctionsBaseSTRCAT)
