//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/functions/base/REV.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/expressions/Expression.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/functions/base/REV.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptFunctionsBaseREV

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptFunctionsBaseREV_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMinimaMiniscriptValuesValue *)runFunctionWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  IOSByteArray *array = [((OrgMinimaMiniscriptValuesValue *) nil_chk([((id<OrgMinimaMiniscriptExpressionsExpression>) nil_chk([self getParameterWithInt:0])) getValueWithOrgMinimaMiniscriptContract:zContract])) getRawData];
  jint datalen = ((IOSByteArray *) nil_chk(array))->size_;
  IOSByteArray *revdata = [IOSByteArray arrayWithLength:datalen];
  for (jint i = 0; i < datalen; i++) {
    *IOSByteArray_GetRef(revdata, i) = IOSByteArray_Get(array, array->size_ - i - 1);
  }
  return create_OrgMinimaMiniscriptValuesHEXValue_initWithByteArray_(revdata);
}

- (OrgMinimaMiniscriptFunctionsMinimaFunction *)getNewFunction {
  return create_OrgMinimaMiniscriptFunctionsBaseREV_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptFunctionsMinimaFunction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(runFunctionWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(getNewFunction);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "runFunction", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptFunctionsBaseREV = { "REV", "org.minima.miniscript.functions.base", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptFunctionsBaseREV;
}

@end

void OrgMinimaMiniscriptFunctionsBaseREV_init(OrgMinimaMiniscriptFunctionsBaseREV *self) {
  OrgMinimaMiniscriptFunctionsMinimaFunction_initWithNSString_(self, @"REV");
}

OrgMinimaMiniscriptFunctionsBaseREV *new_OrgMinimaMiniscriptFunctionsBaseREV_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptFunctionsBaseREV, init)
}

OrgMinimaMiniscriptFunctionsBaseREV *create_OrgMinimaMiniscriptFunctionsBaseREV_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptFunctionsBaseREV, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptFunctionsBaseREV)
