//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/values/Value.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "org/minima/miniscript/values/BooleanValue.h"
#include "org/minima/miniscript/values/HEXValue.h"
#include "org/minima/miniscript/values/NumberValue.h"
#include "org/minima/miniscript/values/ScriptValue.h"
#include "org/minima/miniscript/values/Value.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"

@implementation OrgMinimaMiniscriptValuesValue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptValuesValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getValueType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgMinimaObjectsBaseMiniNumber *)getNumber {
  return mNumber_;
}

- (OrgMinimaObjectsBaseMiniData *)getMiniData {
  return mData_;
}

- (IOSByteArray *)getRawData {
  return [((OrgMinimaObjectsBaseMiniData *) nil_chk([self getMiniData])) getData];
}

- (jboolean)isEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLessWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isLessEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isMoreWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isMoreEqualWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isTrue {
  return ![self isFalse];
}

- (jboolean)isFalse {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNumber_)) isEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)];
}

- (OrgMinimaMiniscriptValuesValue *)addWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgMinimaMiniscriptValuesValue *)subWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgMinimaMiniscriptValuesValue *)multWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (OrgMinimaMiniscriptValuesValue *)divWithOrgMinimaMiniscriptValuesValue:(OrgMinimaMiniscriptValuesValue *)zValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (OrgMinimaMiniscriptValuesValue *)getValueWithNSString:(NSString *)zValue {
  return OrgMinimaMiniscriptValuesValue_getValueWithNSString_(zValue);
}

+ (jint)getValueTypeWithNSString:(NSString *)zValue {
  return OrgMinimaMiniscriptValuesValue_getValueTypeWithNSString_(zValue);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaMiniscriptValuesValue_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mNumber_);
  RELEASE_(mData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 5, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x401, 6, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x401, 7, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x401, 8, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x401, 9, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getValueType);
  methods[2].selector = @selector(getNumber);
  methods[3].selector = @selector(getMiniData);
  methods[4].selector = @selector(getRawData);
  methods[5].selector = @selector(isEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[6].selector = @selector(isLessWithOrgMinimaMiniscriptValuesValue:);
  methods[7].selector = @selector(isLessEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[8].selector = @selector(isMoreWithOrgMinimaMiniscriptValuesValue:);
  methods[9].selector = @selector(isMoreEqualWithOrgMinimaMiniscriptValuesValue:);
  methods[10].selector = @selector(isTrue);
  methods[11].selector = @selector(isFalse);
  methods[12].selector = @selector(addWithOrgMinimaMiniscriptValuesValue:);
  methods[13].selector = @selector(subWithOrgMinimaMiniscriptValuesValue:);
  methods[14].selector = @selector(multWithOrgMinimaMiniscriptValuesValue:);
  methods[15].selector = @selector(divWithOrgMinimaMiniscriptValuesValue:);
  methods[16].selector = @selector(getValueWithNSString:);
  methods[17].selector = @selector(getValueTypeWithNSString:);
  methods[18].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNumber_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mData_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isEqual", "LOrgMinimaMiniscriptValuesValue;", "isLess", "isLessEqual", "isMore", "isMoreEqual", "add", "sub", "mult", "div", "getValue", "LNSString;", "getValueType", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptValuesValue = { "Value", "org.minima.miniscript.values", ptrTable, methods, fields, 7, 0x401, 19, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptValuesValue;
}

@end

void OrgMinimaMiniscriptValuesValue_init(OrgMinimaMiniscriptValuesValue *self) {
  NSObject_init(self);
}

OrgMinimaMiniscriptValuesValue *OrgMinimaMiniscriptValuesValue_getValueWithNSString_(NSString *zValue) {
  OrgMinimaMiniscriptValuesValue_initialize();
  if ([((NSString *) nil_chk(zValue)) java_hasPrefix:@"["]) {
    NSString *sc = [zValue java_substring:1 endIndex:[zValue java_length] - 1];
    return create_OrgMinimaMiniscriptValuesScriptValue_initWithNSString_(sc);
  }
  else if ([zValue java_hasPrefix:@"0x"]) {
    return create_OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(zValue);
  }
  else if ([zValue isEqual:@"TRUE"]) {
    return JreLoadStatic(OrgMinimaMiniscriptValuesBooleanValue, TRUE);
  }
  else if ([zValue isEqual:@"FALSE"]) {
    return JreLoadStatic(OrgMinimaMiniscriptValuesBooleanValue, FALSE);
  }
  else {
    return create_OrgMinimaMiniscriptValuesNumberValue_initWithNSString_(zValue);
  }
}

jint OrgMinimaMiniscriptValuesValue_getValueTypeWithNSString_(NSString *zValue) {
  OrgMinimaMiniscriptValuesValue_initialize();
  if ([((NSString *) nil_chk(zValue)) java_hasPrefix:@"["]) {
    return OrgMinimaMiniscriptValuesScriptValue_VALUE_SCRIPT;
  }
  else if ([zValue java_hasPrefix:@"0x"]) {
    return OrgMinimaMiniscriptValuesHEXValue_VALUE_HEX;
  }
  else if ([zValue isEqual:@"TRUE"]) {
    return OrgMinimaMiniscriptValuesBooleanValue_VALUE_BOOLEAN;
  }
  else if ([zValue isEqual:@"FALSE"]) {
    return OrgMinimaMiniscriptValuesBooleanValue_VALUE_BOOLEAN;
  }
  else {
    return OrgMinimaMiniscriptValuesNumberValue_VALUE_NUMBER;
  }
}

void OrgMinimaMiniscriptValuesValue_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaMiniscriptValuesValue_initialize();
  OrgMinimaMiniscriptValuesValue *vv = create_OrgMinimaMiniscriptValuesHEXValue_initWithNSString_(@"0xF184A0A4295AD508CEC610C7430CE328F184A0A4295AD508CEC610C7430CE328");
  OrgMinimaObjectsBaseMiniNumber *q = create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"1");
  OrgMinimaObjectsBaseMiniNumber *e = create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"3");
  OrgMinimaObjectsBaseMiniNumber *t = [q divWithOrgMinimaObjectsBaseMiniNumber:e];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:vv];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptValuesValue)
