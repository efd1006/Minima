//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/expressions/VariableExpression.java
//

#include "J2ObjC_source.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/expressions/VariableExpression.h"
#include "org/minima/miniscript/values/Value.h"

@implementation OrgMinimaMiniscriptExpressionsVariableExpression

- (instancetype)initWithNSString:(NSString *)zName {
  OrgMinimaMiniscriptExpressionsVariableExpression_initWithNSString_(self, zName);
  return self;
}

- (OrgMinimaMiniscriptValuesValue *)getValueWithOrgMinimaMiniscriptContract:(OrgMinimaMiniscriptContract *)zContract {
  return [((OrgMinimaMiniscriptContract *) nil_chk(zContract)) getVariableWithNSString:mVariableName_];
}

- (NSString *)description {
  return JreStrcat("$$", @"variable:", mVariableName_);
}

- (void)dealloc {
  RELEASE_(mVariableName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaMiniscriptValuesValue;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(getValueWithOrgMinimaMiniscriptContract:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mVariableName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "getValue", "LOrgMinimaMiniscriptContract;", "LOrgMinimaMiniscriptExceptionsExecutionException;", "toString" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptExpressionsVariableExpression = { "VariableExpression", "org.minima.miniscript.expressions", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptExpressionsVariableExpression;
}

@end

void OrgMinimaMiniscriptExpressionsVariableExpression_initWithNSString_(OrgMinimaMiniscriptExpressionsVariableExpression *self, NSString *zName) {
  NSObject_init(self);
  JreStrongAssign(&self->mVariableName_, zName);
}

OrgMinimaMiniscriptExpressionsVariableExpression *new_OrgMinimaMiniscriptExpressionsVariableExpression_initWithNSString_(NSString *zName) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptExpressionsVariableExpression, initWithNSString_, zName)
}

OrgMinimaMiniscriptExpressionsVariableExpression *create_OrgMinimaMiniscriptExpressionsVariableExpression_initWithNSString_(NSString *zName) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptExpressionsVariableExpression, initWithNSString_, zName)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptExpressionsVariableExpression)
