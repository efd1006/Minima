//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/tokens/MASTRecurse.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Hashtable.h"
#include "java/util/StringTokenizer.h"
#include "org/minima/miniscript/Contract.h"
#include "org/minima/miniscript/tokens/MASTRecurse.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/utils/Crypto.h"

@implementation OrgMinimaMiniscriptTokensMASTRecurse

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaMiniscriptTokensMASTRecurse_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (OrgMinimaObjectsBaseMiniData32 *)MASTWithNSString:(NSString *)zRamScript
                               withJavaUtilHashtable:(JavaUtilHashtable *)zTable {
  return OrgMinimaMiniscriptTokensMASTRecurse_MASTWithNSString_withJavaUtilHashtable_(zRamScript, zTable);
}

- (NSString *)getInternalMASTWithNSString:(NSString *)zRamScript {
  JavaUtilStringTokenizer *strtok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_(zRamScript, @" ");
  while ([strtok hasMoreElements]) {
    NSString *tok = [strtok nextToken];
  }
  return @"";
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaMiniscriptTokensMASTRecurse_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData32;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(MASTWithNSString:withJavaUtilHashtable:);
  methods[2].selector = @selector(getInternalMASTWithNSString:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "MAST", "LNSString;LJavaUtilHashtable;", "(Ljava/lang/String;Ljava/util/Hashtable<Lorg/minima/objects/base/MiniData32;Ljava/lang/String;>;)Lorg/minima/objects/base/MiniData32;", "getInternalMAST", "LNSString;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptTokensMASTRecurse = { "MASTRecurse", "org.minima.miniscript.tokens", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptTokensMASTRecurse;
}

@end

void OrgMinimaMiniscriptTokensMASTRecurse_init(OrgMinimaMiniscriptTokensMASTRecurse *self) {
  NSObject_init(self);
}

OrgMinimaMiniscriptTokensMASTRecurse *new_OrgMinimaMiniscriptTokensMASTRecurse_init() {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptTokensMASTRecurse, init)
}

OrgMinimaMiniscriptTokensMASTRecurse *create_OrgMinimaMiniscriptTokensMASTRecurse_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptTokensMASTRecurse, init)
}

OrgMinimaObjectsBaseMiniData32 *OrgMinimaMiniscriptTokensMASTRecurse_MASTWithNSString_withJavaUtilHashtable_(NSString *zRamScript, JavaUtilHashtable *zTable) {
  OrgMinimaMiniscriptTokensMASTRecurse_initialize();
  NSString *script = OrgMinimaMiniscriptContract_cleanScriptWithNSString_(zRamScript);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"MAST : *", script, '*')];
  jint mindex = [((NSString *) nil_chk(script)) java_indexOfString:@"MAST "];
  if (mindex == -1) {
    IOSByteArray *hdata = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashDataWithByteArray:[script java_getBytes]];
    OrgMinimaObjectsBaseMiniData32 *hsh = create_OrgMinimaObjectsBaseMiniData32_initWithByteArray_(hdata);
    [((JavaUtilHashtable *) nil_chk(zTable)) putWithId:hsh withId:script];
    return hsh;
  }
  NSString *ender = @"MASTEND";
  jint mindexend = [script java_indexOfString:ender fromIndex:mindex];
  NSString *internal = [script java_substring:mindex endIndex:mindexend + [ender java_length]];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C", @"Internal : *", internal, '*')];
  return nil;
}

void OrgMinimaMiniscriptTokensMASTRecurse_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaMiniscriptTokensMASTRecurse_initialize();
  JavaUtilHashtable *mast = create_JavaUtilHashtable_init();
  NSString *RamScript = @"let t = 1 MASt let y=t+1 MASTor let y=t+2 mastend if y GT 3 then return false endif return true";
  OrgMinimaMiniscriptTokensMASTRecurse_MASTWithNSString_withJavaUtilHashtable_(RamScript, mast);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptTokensMASTRecurse)
