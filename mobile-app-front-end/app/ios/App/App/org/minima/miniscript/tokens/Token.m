//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/miniscript/tokens/Token.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/StringTokenizer.h"
#include "org/minima/miniscript/exceptions/MinimaParseException.h"
#include "org/minima/miniscript/functions/MinimaFunction.h"
#include "org/minima/miniscript/tokens/QuotedString.h"
#include "org/minima/miniscript/tokens/Token.h"

@interface OrgMinimaMiniscriptTokensToken () {
 @public
  jint mTokenType_;
  NSString *mToken_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaMiniscriptTokensToken, mToken_, NSString *)

J2OBJC_INITIALIZED_DEFN(OrgMinimaMiniscriptTokensToken)

IOSObjectArray *OrgMinimaMiniscriptTokensToken_TOKENS_COMMAND;
IOSObjectArray *OrgMinimaMiniscriptTokensToken_TOKENS_OPERATOR;

@implementation OrgMinimaMiniscriptTokensToken

- (instancetype)initWithInt:(jint)zTokenType
               withNSString:(NSString *)zToken {
  OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(self, zTokenType, zToken);
  return self;
}

- (jint)getTokenType {
  return mTokenType_;
}

- (NSString *)getTokenTypeString {
  switch (mTokenType_) {
    case OrgMinimaMiniscriptTokensToken_TOKEN_CLOSEBRACKET:
    return @"CLOSEBRACKET";
    case OrgMinimaMiniscriptTokensToken_TOKEN_COMMAND:
    return @"COMMAND";
    case OrgMinimaMiniscriptTokensToken_TOKEN_TRUE:
    return @"TRUE";
    case OrgMinimaMiniscriptTokensToken_TOKEN_FALSE:
    return @"FALSE";
    case OrgMinimaMiniscriptTokensToken_TOKEN_FUNCTIION:
    return @"FUNCTION";
    case OrgMinimaMiniscriptTokensToken_TOKEN_VALUE:
    return @"VALUE";
    case OrgMinimaMiniscriptTokensToken_TOKEN_OPENBRACKET:
    return @"OPENBRACKET";
    case OrgMinimaMiniscriptTokensToken_TOKEN_OPERATOR:
    return @"OPERATOR";
    case OrgMinimaMiniscriptTokensToken_TOKEN_VARIABLE:
    return @"VARIABLE";
    case OrgMinimaMiniscriptTokensToken_TOKEN_GLOBAL:
    return @"GLOBAL";
    default:
    break;
  }
  
  ;
  return @"null";
}

- (NSString *)getToken {
  return mToken_;
}

+ (id<JavaUtilList>)tokenizeWithNSString:(NSString *)zRamScript {
  return OrgMinimaMiniscriptTokensToken_tokenizeWithNSString_(zRamScript);
}

+ (jboolean)isNumericWithNSString:(NSString *)str {
  return OrgMinimaMiniscriptTokensToken_isNumericWithNSString_(str);
}

+ (jboolean)isVariableWithNSString:(NSString *)str {
  return OrgMinimaMiniscriptTokensToken_isVariableWithNSString_(str);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaMiniscriptTokensToken_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mToken_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 1, 2, 3, 4, -1, -1 },
    { NULL, "Z", 0x9, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:);
  methods[1].selector = @selector(getTokenType);
  methods[2].selector = @selector(getTokenTypeString);
  methods[3].selector = @selector(getToken);
  methods[4].selector = @selector(tokenizeWithNSString:);
  methods[5].selector = @selector(isNumericWithNSString:);
  methods[6].selector = @selector(isVariableWithNSString:);
  methods[7].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TOKEN_COMMAND", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_COMMAND, 0x19, -1, -1, -1, -1 },
    { "TOKENS_COMMAND", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 9, -1, -1 },
    { "TOKEN_FUNCTIION", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_FUNCTIION, 0x19, -1, -1, -1, -1 },
    { "TOKEN_OPERATOR", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_OPERATOR, 0x19, -1, -1, -1, -1 },
    { "TOKENS_OPERATOR", "[LNSString;", .constantValue.asLong = 0, 0x19, -1, 10, -1, -1 },
    { "TOKEN_VALUE", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_VALUE, 0x19, -1, -1, -1, -1 },
    { "TOKEN_VARIABLE", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_VARIABLE, 0x19, -1, -1, -1, -1 },
    { "TOKEN_GLOBAL", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_GLOBAL, 0x19, -1, -1, -1, -1 },
    { "TOKEN_OPENBRACKET", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_OPENBRACKET, 0x19, -1, -1, -1, -1 },
    { "TOKEN_CLOSEBRACKET", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_CLOSEBRACKET, 0x19, -1, -1, -1, -1 },
    { "TOKEN_TRUE", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_TRUE, 0x19, -1, -1, -1, -1 },
    { "TOKEN_FALSE", "I", .constantValue.asInt = OrgMinimaMiniscriptTokensToken_TOKEN_FALSE, 0x19, -1, -1, -1, -1 },
    { "mTokenType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mToken_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;", "tokenize", "LNSString;", "LOrgMinimaMiniscriptExceptionsMinimaParseException;", "(Ljava/lang/String;)Ljava/util/List<Lorg/minima/miniscript/tokens/Token;>;", "isNumeric", "isVariable", "main", "[LNSString;", &OrgMinimaMiniscriptTokensToken_TOKENS_COMMAND, &OrgMinimaMiniscriptTokensToken_TOKENS_OPERATOR };
  static const J2ObjcClassInfo _OrgMinimaMiniscriptTokensToken = { "Token", "org.minima.miniscript.tokens", ptrTable, methods, fields, 7, 0x1, 8, 14, -1, -1, -1, -1, -1 };
  return &_OrgMinimaMiniscriptTokensToken;
}

+ (void)initialize {
  if (self == [OrgMinimaMiniscriptTokensToken class]) {
    JreStrongAssignAndConsume(&OrgMinimaMiniscriptTokensToken_TOKENS_COMMAND, [IOSObjectArray newArrayWithObjects:(id[]){ @"LET", @"IF", @"THEN", @"ELSEIF", @"ELSE", @"ENDIF", @"RETURN", @"ASSERT", @"WHILE", @"DO", @"ENDWHILE", @"EXEC", @"MAST", @"MASTOR", @"MASTEND" } count:15 type:NSString_class_()]);
    JreStrongAssignAndConsume(&OrgMinimaMiniscriptTokensToken_TOKENS_OPERATOR, [IOSObjectArray newArrayWithObjects:(id[]){ @"+", @"-", @"/", @"*", @"%", @"&", @"|", @"^", @">>", @"<<", @"=", @"LT", @"GT", @"GTE", @"LTE", @"EQ", @"NEQ", @"NEG", @"XOR", @"AND", @"OR", @"NXOR", @"NAND", @"NOR", @"NOT" } count:25 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(OrgMinimaMiniscriptTokensToken)
  }
}

@end

void OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken *self, jint zTokenType, NSString *zToken) {
  NSObject_init(self);
  self->mTokenType_ = zTokenType;
  JreStrongAssign(&self->mToken_, zToken);
}

OrgMinimaMiniscriptTokensToken *new_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(jint zTokenType, NSString *zToken) {
  J2OBJC_NEW_IMPL(OrgMinimaMiniscriptTokensToken, initWithInt_withNSString_, zTokenType, zToken)
}

OrgMinimaMiniscriptTokensToken *create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(jint zTokenType, NSString *zToken) {
  J2OBJC_CREATE_IMPL(OrgMinimaMiniscriptTokensToken, initWithInt_withNSString_, zTokenType, zToken)
}

id<JavaUtilList> OrgMinimaMiniscriptTokensToken_tokenizeWithNSString_(NSString *zRamScript) {
  OrgMinimaMiniscriptTokensToken_initialize();
  id<JavaUtilList> tokens = create_JavaUtilArrayList_init();
  id<JavaUtilList> allcommands = JavaUtilArrays_asListWithNSObjectArray_(OrgMinimaMiniscriptTokensToken_TOKENS_COMMAND);
  id<JavaUtilList> alloperators = JavaUtilArrays_asListWithNSObjectArray_(OrgMinimaMiniscriptTokensToken_TOKENS_OPERATOR);
  id<JavaUtilList> allfunctions = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = JreLoadStatic(OrgMinimaMiniscriptFunctionsMinimaFunction, ALL_FUNCTIONS);
    OrgMinimaMiniscriptFunctionsMinimaFunction * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMinimaMiniscriptFunctionsMinimaFunction * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMinimaMiniscriptFunctionsMinimaFunction *func = *b__++;
      [allfunctions addWithId:[((OrgMinimaMiniscriptFunctionsMinimaFunction *) nil_chk(func)) getName]];
    }
  }
  OrgMinimaMiniscriptTokensQuotedString *qs = create_OrgMinimaMiniscriptTokensQuotedString_initWithNSString_(zRamScript);
  JavaUtilStringTokenizer *strtok = create_JavaUtilStringTokenizer_initWithNSString_withNSString_([qs getDeQuotedString], @" ");
  while ([strtok hasMoreTokens]) {
    NSString *tok = [((NSString *) nil_chk([strtok nextToken])) java_trim];
    if ([((id<JavaUtilList>) nil_chk(allcommands)) containsWithId:tok]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_COMMAND, tok)];
    }
    else if ([allfunctions containsWithId:tok]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_FUNCTIION, tok)];
    }
    else if ([((id<JavaUtilList>) nil_chk(alloperators)) containsWithId:tok]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_OPERATOR, tok)];
    }
    else if ([((NSString *) nil_chk(tok)) java_hasPrefix:@":"]) {
      jint quote = JavaLangInteger_parseIntWithNSString_([tok java_substring:1]);
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_VALUE, [qs getQuoteWithInt:quote])];
    }
    else if ([tok java_hasPrefix:@"0x"] || OrgMinimaMiniscriptTokensToken_isNumericWithNSString_(tok)) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_VALUE, tok)];
    }
    else if ([tok isEqual:@"("]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_OPENBRACKET, tok)];
    }
    else if ([tok isEqual:@")"]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_CLOSEBRACKET, tok)];
    }
    else if ([tok isEqual:@"TRUE"]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_TRUE, tok)];
    }
    else if ([tok isEqual:@"FALSE"]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_FALSE, tok)];
    }
    else if ([tok java_hasPrefix:@"@"]) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_GLOBAL, tok)];
    }
    else if (OrgMinimaMiniscriptTokensToken_isVariableWithNSString_(tok)) {
      [tokens addWithId:create_OrgMinimaMiniscriptTokensToken_initWithInt_withNSString_(OrgMinimaMiniscriptTokensToken_TOKEN_VARIABLE, tok)];
    }
    else {
      @throw create_OrgMinimaMiniscriptExceptionsMinimaParseException_initWithNSString_(JreStrcat("$$", @"Incorrect token in parse : ", tok));
    }
  }
  return tokens;
}

jboolean OrgMinimaMiniscriptTokensToken_isNumericWithNSString_(NSString *str) {
  OrgMinimaMiniscriptTokensToken_initialize();
  return [((NSString *) nil_chk(str)) java_matches:@"-?\\d+(\\.\\d+)?"];
}

jboolean OrgMinimaMiniscriptTokensToken_isVariableWithNSString_(NSString *str) {
  OrgMinimaMiniscriptTokensToken_initialize();
  return [((NSString *) nil_chk(str)) java_matches:@"[a-z]*"];
}

void OrgMinimaMiniscriptTokensToken_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaMiniscriptTokensToken_initialize();
  NSString *text = @"asFg";
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithBoolean:[text java_matches:@"[a-z]*"]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaMiniscriptTokensToken)
