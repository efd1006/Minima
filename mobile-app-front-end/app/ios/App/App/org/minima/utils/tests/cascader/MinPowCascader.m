//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cascader/MinPowCascader.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cascader/MinPowCascader.h"

@implementation OrgMinimaUtilsTestsCascaderMinPowCascader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCascaderMinPowCascader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsCascaderMinPowCascader_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCascaderMinPowCascader = { "MinPowCascader", "org.minima.utils.tests.cascader", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCascaderMinPowCascader;
}

@end

void OrgMinimaUtilsTestsCascaderMinPowCascader_init(OrgMinimaUtilsTestsCascaderMinPowCascader *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsCascaderMinPowCascader *new_OrgMinimaUtilsTestsCascaderMinPowCascader_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCascaderMinPowCascader, init)
}

OrgMinimaUtilsTestsCascaderMinPowCascader *create_OrgMinimaUtilsTestsCascaderMinPowCascader_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCascaderMinPowCascader, init)
}

void OrgMinimaUtilsTestsCascaderMinPowCascader_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsCascaderMinPowCascader_initialize();
  JavaUtilRandom *rand = create_JavaUtilRandom_init();
  jint pows = 0;
  jint longestwait = 0;
  jdouble avgwait = 0;
  for (jint runs = 0; runs < 50; runs++) {
    jboolean found = false;
    for (jint i = 1; i < 1000; i++) {
      jdouble dd = [rand nextDouble];
      jdouble currenttot = 1 / (jdouble) i;
      if (i >= 2) {
        if (dd < currenttot) {
          OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$I$D$D", runs, @") Higher level @ ", i, @") \n", dd, @" / ", currenttot));
          found = true;
          pows++;
          if (i > longestwait) {
            longestwait = i;
          }
          JrePlusAssignDoubleD(&avgwait, i);
          break;
        }
      }
    }
    if (!found) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$", runs, @") POW NOT FOUND..!"));
    }
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I$", @"\nTotal Higher POWS found ", pows, @" / 50"));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"Longest wait : ", longestwait));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"AVG wait : ", JreFpToInt((avgwait / pows))));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCascaderMinPowCascader)
