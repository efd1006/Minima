//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/MiniFormat.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "org/minima/utils/MiniFormat.h"

@interface OrgMinimaUtilsMiniFormat ()

+ (NSString *)maketabstringWithInt:(jint)zNum;

@end

__attribute__((unused)) static NSString *OrgMinimaUtilsMiniFormat_maketabstringWithInt_(jint zNum);

@implementation OrgMinimaUtilsMiniFormat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsMiniFormat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)JSONPrettyWithNSString:(NSString *)zJSON {
  return OrgMinimaUtilsMiniFormat_JSONPrettyWithNSString_(zJSON);
}

+ (NSString *)maketabstringWithInt:(jint)zNum {
  return OrgMinimaUtilsMiniFormat_maketabstringWithInt_(zNum);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsMiniFormat_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(JSONPrettyWithNSString:);
  methods[2].selector = @selector(maketabstringWithInt:);
  methods[3].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "JSONPretty", "LNSString;", "maketabstring", "I", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsMiniFormat = { "MiniFormat", "org.minima.utils", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsMiniFormat;
}

@end

void OrgMinimaUtilsMiniFormat_init(OrgMinimaUtilsMiniFormat *self) {
  NSObject_init(self);
}

OrgMinimaUtilsMiniFormat *new_OrgMinimaUtilsMiniFormat_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsMiniFormat, init)
}

OrgMinimaUtilsMiniFormat *create_OrgMinimaUtilsMiniFormat_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsMiniFormat, init)
}

NSString *OrgMinimaUtilsMiniFormat_JSONPrettyWithNSString_(NSString *zJSON) {
  OrgMinimaUtilsMiniFormat_initialize();
  NSString *work = [((NSString *) nil_chk(zJSON)) java_trim];
  jint len = [((NSString *) nil_chk(work)) java_length];
  if (len > 100000) {
    return work;
  }
  NSString *ret = @"";
  jint tabs = 0;
  NSString *tabstring = OrgMinimaUtilsMiniFormat_maketabstringWithInt_(tabs);
  jint oldpos = 0;
  jint currentpos = 0;
  while (true) {
    oldpos = currentpos;
    jint indquotes = [work java_indexOfString:@"\"" fromIndex:currentpos];
    jint indopen = [work java_indexOfString:@"{" fromIndex:currentpos];
    jint indclose = [work java_indexOfString:@"}" fromIndex:currentpos];
    jint indcomma = [work java_indexOfString:@"," fromIndex:currentpos];
    if (indquotes == -1 && indopen == -1 && indclose == -1 && indcomma == -1) {
      break;
    }
    if (indquotes == -1) {
      indquotes = JavaLangInteger_MAX_VALUE;
    }
    if (indopen == -1) {
      indopen = JavaLangInteger_MAX_VALUE;
    }
    if (indclose == -1) {
      indclose = JavaLangInteger_MAX_VALUE;
    }
    if (indcomma == -1) {
      indcomma = JavaLangInteger_MAX_VALUE;
    }
    if (indopen < indclose && indopen < indcomma && indopen < indquotes) {
      tabs++;
      tabstring = OrgMinimaUtilsMiniFormat_maketabstringWithInt_(tabs);
      NSString *substr = [work java_substring:oldpos endIndex:indopen];
      currentpos = indopen + 1;
      (void) JreStrAppendStrong(&ret, "$", substr);
      (void) JreStrAppendStrong(&ret, "$", @"{\n");
      (void) JreStrAppendStrong(&ret, "$", tabstring);
    }
    else if (indclose < indopen && indclose < indcomma && indclose < indquotes) {
      tabs--;
      tabstring = OrgMinimaUtilsMiniFormat_maketabstringWithInt_(tabs);
      NSString *substr = [work java_substring:oldpos endIndex:indclose];
      currentpos = indclose + 1;
      (void) JreStrAppendStrong(&ret, "$", substr);
      (void) JreStrAppendStrong(&ret, "$", @"\n");
      (void) JreStrAppendStrong(&ret, "$", tabstring);
      (void) JreStrAppendStrong(&ret, "$", @"}");
    }
    else if (indquotes < indopen && indquotes < indcomma && indquotes < indclose) {
      NSString *prequote = [work java_substring:oldpos endIndex:indquotes];
      (void) JreStrAppendStrong(&ret, "$", prequote);
      jint quoteend = [work java_indexOfString:@"\"" fromIndex:indquotes + 1];
      NSString *quote = [work java_substring:indquotes endIndex:quoteend + 1];
      currentpos = quoteend + 1;
      (void) JreStrAppendStrong(&ret, "$", quote);
    }
    else {
      NSString *substr = [work java_substring:oldpos endIndex:indcomma];
      currentpos = indcomma + 1;
      (void) JreStrAppendStrong(&ret, "$", substr);
      (void) JreStrAppendStrong(&ret, "$", @",\n");
      (void) JreStrAppendStrong(&ret, "$", tabstring);
    }
  }
  ret = [ret java_replaceAll:@"\\\\/" withReplacement:@"/"];
  ret = [((NSString *) nil_chk(ret)) java_replaceAll:@"\\\\n" withReplacement:@"\n"];
  return ret;
}

NSString *OrgMinimaUtilsMiniFormat_maketabstringWithInt_(jint zNum) {
  OrgMinimaUtilsMiniFormat_initialize();
  NSString *ret = @"";
  for (jint i = 0; i < zNum; i++) {
    (void) JreStrAppendStrong(&ret, "$", @"  ");
  }
  return ret;
}

void OrgMinimaUtilsMiniFormat_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsMiniFormat_initialize();
  NSString *test = @"{\"version\": \"0.8, , 7.67\",\"milliuptime\": 2450 }";
  NSString *pretty = OrgMinimaUtilsMiniFormat_JSONPrettyWithNSString_(test);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:pretty];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsMiniFormat)
