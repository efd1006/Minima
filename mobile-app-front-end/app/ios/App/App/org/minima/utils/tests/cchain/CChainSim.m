//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cchain/CChainSim.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cchain/CChain.h"
#include "org/minima/utils/tests/cchain/CChainBlock.h"
#include "org/minima/utils/tests/cchain/CChainLevel.h"
#include "org/minima/utils/tests/cchain/CChainSim.h"
#include "org/minima/utils/tests/cchain/Cascader.h"

jint OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS = 1000;
jint OrgMinimaUtilsTestsCchainCChainSim_NUMBER_SIMULATIONS = 1;

@implementation OrgMinimaUtilsTestsCchainCChainSim

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCchainCChainSim_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsCchainCChainSim_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUMBER_BLOCKS", "I", .constantValue.asLong = 0, 0x9, -1, 2, -1, -1 },
    { "NUMBER_SIMULATIONS", "I", .constantValue.asLong = 0, 0x9, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", &OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS, &OrgMinimaUtilsTestsCchainCChainSim_NUMBER_SIMULATIONS };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCchainCChainSim = { "CChainSim", "org.minima.utils.tests.cchain", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCchainCChainSim;
}

@end

void OrgMinimaUtilsTestsCchainCChainSim_init(OrgMinimaUtilsTestsCchainCChainSim *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsCchainCChainSim *new_OrgMinimaUtilsTestsCchainCChainSim_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCchainCChainSim, init)
}

OrgMinimaUtilsTestsCchainCChainSim *create_OrgMinimaUtilsTestsCchainCChainSim_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCchainCChainSim, init)
}

void OrgMinimaUtilsTestsCchainCChainSim_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsCchainCChainSim_initialize();
  if (((IOSObjectArray *) nil_chk(zArgs))->size_ > 0) {
    OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(zArgs, 0));
  }
  JavaUtilRandom *hash_ = create_JavaUtilRandom_init();
  OrgMinimaUtilsTestsCchainCChain *mainChain = create_OrgMinimaUtilsTestsCchainCChain_init();
  jint baseBlockNumber = 0;
  jdouble basePrevHash = 0;
  for (jint bloop = 0; bloop < OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS; bloop++) {
    OrgMinimaUtilsTestsCchainCChainBlock *newBlock = create_OrgMinimaUtilsTestsCchainCChainBlock_init();
    newBlock->mBlockHash_ = [hash_ nextDouble];
    newBlock->mBaseBlockNumber_ = baseBlockNumber;
    newBlock->mBasePrevBlockHash_ = basePrevHash;
    newBlock->mCurrentBlockLevel_ = 0;
    OrgMinimaUtilsTestsCchainCChainLevel *cclevel = create_OrgMinimaUtilsTestsCchainCChainLevel_init();
    cclevel->mBlockLevel_ = 0;
    cclevel->mBlockNumber_ = baseBlockNumber;
    cclevel->mPreviousBlock_ = basePrevHash;
    cclevel->mBlockDifficulty_ = 1.0;
    IOSObjectArray_Set(nil_chk(newBlock->mBlockLevels_), 0, cclevel);
    jint maxlevel = 0;
    IOSBooleanArray *levels = nil;
    if (baseBlockNumber == 0) {
      levels = [IOSBooleanArray arrayWithLength:OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS];
      *IOSBooleanArray_GetRef(levels, 0) = false;
    }
    else {
      levels = [mainChain getLevels];
    }
    for (jint check = 0; check < ((IOSBooleanArray *) nil_chk(levels))->size_; check++) {
      if (IOSBooleanArray_Get(levels, check)) {
        maxlevel = check + 1;
      }
    }
    if (maxlevel > OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS - 1) {
      maxlevel = OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS - 1;
    }
    [mainChain addBlockWithOrgMinimaUtilsTestsCchainCChainBlock:newBlock];
    for (jint lev = 1; lev <= maxlevel; lev++) {
      cclevel = create_OrgMinimaUtilsTestsCchainCChainLevel_init();
      cclevel->mBlockLevel_ = lev;
      cclevel->mBlockNumber_ = newBlock->mBaseBlockNumber_;
      cclevel->mPreviousBlock_ = newBlock->mBasePrevBlockHash_;
      if (IOSBooleanArray_Get(levels, lev - 1)) {
        cclevel->mBlockDifficulty_ = JavaLangMath_powWithDouble_withDouble_(2, lev);
      }
      else {
        cclevel->mBlockDifficulty_ = 0;
      }
      IOSObjectArray_Set(nil_chk(newBlock->mBlockLevels_), lev, cclevel);
      newBlock->mCurrentBlockLevel_ = lev;
    }
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"********  NEW BLOCK ADDED!! ***\n", newBlock));
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$", @"OLD  : ", [mainChain toLevelChain]));
    OrgMinimaUtilsTestsCchainCascader *casc = create_OrgMinimaUtilsTestsCchainCascader_initWithOrgMinimaUtilsTestsCchainCChain_(mainChain);
    mainChain = [casc getAsCChain];
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$", @"NEW  : ", [((OrgMinimaUtilsTestsCchainCChain *) nil_chk(mainChain)) toLevelChain]));
    jdouble powperc = ((jdouble) [mainChain getTotalPOW] / (OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS)) * 100;
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$DC", @"Total POW : ", powperc, '%'));
    jdouble perc = ((jdouble) [mainChain getSize] / (OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS)) * 100;
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D$I$I$", @"Size : ", perc, @"% [ ", [mainChain getSize], @" / ", OrgMinimaUtilsTestsCchainCChainSim_NUMBER_BLOCKS, @" ]"));
    baseBlockNumber++;
    basePrevHash = newBlock->mBlockHash_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCchainCChainSim)
