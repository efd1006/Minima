//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/FileUtil.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/minima/utils/BaseConverter.h"
#include "org/minima/utils/FileUtil.h"

@implementation OrgMinimaUtilsFileUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsFileUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)ConvertFileToHexWithNSString:(NSString *)zFilePath {
  OrgMinimaUtilsFileUtil_ConvertFileToHexWithNSString_(zFilePath);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsFileUtil_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ConvertFileToHexWithNSString:);
  methods[2].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_STRING", "I", .constantValue.asInt = OrgMinimaUtilsFileUtil_MAX_STRING, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ConvertFileToHex", "LNSString;", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsFileUtil = { "FileUtil", "org.minima.utils", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsFileUtil;
}

@end

void OrgMinimaUtilsFileUtil_init(OrgMinimaUtilsFileUtil *self) {
  NSObject_init(self);
}

OrgMinimaUtilsFileUtil *new_OrgMinimaUtilsFileUtil_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsFileUtil, init)
}

OrgMinimaUtilsFileUtil *create_OrgMinimaUtilsFileUtil_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsFileUtil, init)
}

void OrgMinimaUtilsFileUtil_ConvertFileToHexWithNSString_(NSString *zFilePath) {
  OrgMinimaUtilsFileUtil_initialize();
  JavaIoFile *ff = new_JavaIoFile_initWithNSString_(zFilePath);
  jlong size = [ff length];
  IOSByteArray *ret = [IOSByteArray newArrayWithLength:(jint) size];
  @try {
    JavaIoFileInputStream *fis = new_JavaIoFileInputStream_initWithNSString_(zFilePath);
    JavaIoBufferedInputStream *bis = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(fis);
    [bis readWithByteArray:ret];
    [bis close];
    [fis close];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$J", @"//FILE SIZE ", size)];
  jint num = (jint) (size / OrgMinimaUtilsFileUtil_MAX_STRING) + 1;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"//HEX NUM ", num)];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$IC", @"public final static int HEXNUM = ", num, ';')];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @"public final static byte[][] HEXDATA = new byte[", num, @"][];")];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"public static byte[] FINAL_ARRAY = null;"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"static {"];
  for (jint i = 0; i < num; i++) {
    jint start = i * OrgMinimaUtilsFileUtil_MAX_STRING;
    jint end = ((i + 1) * OrgMinimaUtilsFileUtil_MAX_STRING);
    if (end > size) {
      end = (jint) size;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$I", @"//", start, @" - ", end)];
    IOSByteArray *copy_ = JavaUtilArrays_copyOfRangeWithByteArray_withInt_withInt_(ret, start, end);
    NSString *output = JreStrcat("$I$$$", @"HEXDATA[", i, @"] = new MiniData(\"", OrgMinimaUtilsBaseConverter_encode16WithByteArray_(copy_), @"\").getData();");
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:output];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"}"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"\n\t\tpublic static byte[] returnData() throws IOException {\n\t\t\tif(FINAL_ARRAY == null) {\n\t\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\t\tfor(int i=0;i<HEXNUM;i++) {\n\t\t\t\t\tbaos.write(HEXDATA[i]);\n\t\t\t\t}\n\t\t\t\tbaos.flush();\n\t\t\t\tFINAL_ARRAY = baos.toByteArray();\t\n\t\t\t}\n\t\t    return FINAL_ARRAY;\n\t\t}"];
}

void OrgMinimaUtilsFileUtil_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsFileUtil_initialize();
  OrgMinimaUtilsFileUtil_ConvertFileToHexWithNSString_(IOSObjectArray_Get(nil_chk(zArgs), 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsFileUtil)
