//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/json/parser/JSONParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaUtilsJsonParserJSONParser")
#ifdef RESTRICT_OrgMinimaUtilsJsonParserJSONParser
#define INCLUDE_ALL_OrgMinimaUtilsJsonParserJSONParser 0
#else
#define INCLUDE_ALL_OrgMinimaUtilsJsonParserJSONParser 1
#endif
#undef RESTRICT_OrgMinimaUtilsJsonParserJSONParser

#if !defined (OrgMinimaUtilsJsonParserJSONParser_) && (INCLUDE_ALL_OrgMinimaUtilsJsonParserJSONParser || defined(INCLUDE_OrgMinimaUtilsJsonParserJSONParser))
#define OrgMinimaUtilsJsonParserJSONParser_

@class JavaIoReader;
@protocol OrgMinimaUtilsJsonParserContainerFactory;
@protocol OrgMinimaUtilsJsonParserContentHandler;

@interface OrgMinimaUtilsJsonParserJSONParser : NSObject

#pragma mark Public

- (instancetype)init;

- (jint)getPosition;

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg;

- (id)parseWithJavaIoReader:(JavaIoReader *)inArg
withOrgMinimaUtilsJsonParserContainerFactory:(id<OrgMinimaUtilsJsonParserContainerFactory>)containerFactory;

- (void)parseWithJavaIoReader:(JavaIoReader *)inArg
withOrgMinimaUtilsJsonParserContentHandler:(id<OrgMinimaUtilsJsonParserContentHandler>)contentHandler;

- (void)parseWithJavaIoReader:(JavaIoReader *)inArg
withOrgMinimaUtilsJsonParserContentHandler:(id<OrgMinimaUtilsJsonParserContentHandler>)contentHandler
                  withBoolean:(jboolean)isResume;

- (id)parseWithNSString:(NSString *)s;

- (id)parseWithNSString:(NSString *)s
withOrgMinimaUtilsJsonParserContainerFactory:(id<OrgMinimaUtilsJsonParserContainerFactory>)containerFactory;

- (void)parseWithNSString:(NSString *)s
withOrgMinimaUtilsJsonParserContentHandler:(id<OrgMinimaUtilsJsonParserContentHandler>)contentHandler;

- (void)parseWithNSString:(NSString *)s
withOrgMinimaUtilsJsonParserContentHandler:(id<OrgMinimaUtilsJsonParserContentHandler>)contentHandler
              withBoolean:(jboolean)isResume;

- (void)reset;

- (void)resetWithJavaIoReader:(JavaIoReader *)inArg;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaUtilsJsonParserJSONParser)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_INIT(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_INIT 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_INIT, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_IN_FINISHED_VALUE(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_IN_FINISHED_VALUE 1
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_IN_FINISHED_VALUE, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_IN_OBJECT(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_IN_OBJECT 2
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_IN_OBJECT, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_IN_ARRAY(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_IN_ARRAY 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_IN_ARRAY, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_PASSED_PAIR_KEY(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_PASSED_PAIR_KEY 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_PASSED_PAIR_KEY, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_IN_PAIR_VALUE(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_IN_PAIR_VALUE 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_IN_PAIR_VALUE, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_END(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_END 6
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_END, jint)

inline jint OrgMinimaUtilsJsonParserJSONParser_get_S_IN_ERROR(void);
#define OrgMinimaUtilsJsonParserJSONParser_S_IN_ERROR -1
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonParserJSONParser, S_IN_ERROR, jint)

FOUNDATION_EXPORT void OrgMinimaUtilsJsonParserJSONParser_init(OrgMinimaUtilsJsonParserJSONParser *self);

FOUNDATION_EXPORT OrgMinimaUtilsJsonParserJSONParser *new_OrgMinimaUtilsJsonParserJSONParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaUtilsJsonParserJSONParser *create_OrgMinimaUtilsJsonParserJSONParser_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaUtilsJsonParserJSONParser)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaUtilsJsonParserJSONParser")
