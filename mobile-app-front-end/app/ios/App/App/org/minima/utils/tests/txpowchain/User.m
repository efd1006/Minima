//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/txpowchain/User.java
//

#include "J2ObjC_source.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/txpowchain/Simulator.h"
#include "org/minima/utils/tests/txpowchain/User.h"

@implementation OrgMinimaUtilsTestsTxpowchainUser

- (instancetype)initWithInt:(jint)zUID {
  OrgMinimaUtilsTestsTxpowchainUser_initWithInt_(self, zUID);
  return self;
}

- (jint)UpdateWithDouble:(jdouble)zTimeInSecs
                 withInt:(jint)zCurrentBlock {
  mCurrentTime_ = zTimeInSecs;
  jdouble newHash = [((JavaUtilRandom *) nil_chk(mHash_)) nextDouble];
  if (mTxnReliabilityCounter_ <= 0) {
    if (newHash < OrgMinimaUtilsTestsTxpowchainSimulator_TXN_RELIABILITY) {
      mCurrentBlock_ = zCurrentBlock;
    }
    else {
      mTxnReliabilityCounter_ = OrgMinimaUtilsTestsTxpowchainSimulator_RELIABILITY_DOWNTIME;
    }
  }
  else {
    mTxnReliabilityCounter_--;
  }
  if (mSendingTXN_) {
    jdouble sendTxnDiff = 1 / OrgMinimaUtilsTestsTxpowchainUser_TXPOW_TIME;
    jdouble txnperblock = OrgMinimaUtilsTestsTxpowchainUser_TXN_PER_SEC * OrgMinimaUtilsTestsTxpowchainSimulator_BLOCKTIME * OrgMinimaUtilsTestsTxpowchainSimulator_NUM_USERS;
    jdouble blockDiff = sendTxnDiff / txnperblock;
    jint ret = -1;
    if (newHash <= blockDiff) {
      ret = mBlockNumAtStart_ + 1;
    }
    else if (newHash <= sendTxnDiff) {
      ret = 0;
    }
    if (ret >= 0) {
      mTotalTXNFound_++;
      mSendingTXN_ = false;
    }
    return ret;
  }
  else {
    jdouble extra = (1 + (OrgMinimaUtilsTestsTxpowchainUser_TXPOW_TIME * OrgMinimaUtilsTestsTxpowchainUser_TXN_PER_SEC));
    jdouble starttxndiff = OrgMinimaUtilsTestsTxpowchainUser_TXN_PER_SEC * extra;
    if (newHash <= starttxndiff) {
      mSendingTXN_ = true;
      mBlockNumAtStart_ = mCurrentBlock_;
    }
  }
  return -1;
}

- (void)logWithNSString:(NSString *)zLog {
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I$D$$", @"User[", UID_, @"] @ ", mCurrentTime_, @"s : ", zLog));
}

- (void)dealloc {
  RELEASE_(mHash_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(UpdateWithDouble:withInt:);
  methods[2].selector = @selector(logWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TXPOW_TIME", "D", .constantValue.asDouble = OrgMinimaUtilsTestsTxpowchainUser_TXPOW_TIME, 0x19, -1, -1, -1, -1 },
    { "TXN_PER_SEC", "D", .constantValue.asDouble = OrgMinimaUtilsTestsTxpowchainUser_TXN_PER_SEC, 0x19, -1, -1, -1, -1 },
    { "UID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHash_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTotalTXNFound_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentTime_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentBlock_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSendingTXN_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBlockNumAtStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTxnReliabilityCounter_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "Update", "DI", "log", "LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsTxpowchainUser = { "User", "org.minima.utils.tests.txpowchain", ptrTable, methods, fields, 7, 0x1, 3, 10, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsTxpowchainUser;
}

@end

void OrgMinimaUtilsTestsTxpowchainUser_initWithInt_(OrgMinimaUtilsTestsTxpowchainUser *self, jint zUID) {
  NSObject_init(self);
  self->UID_ = 0;
  self->mTotalTXNFound_ = 0;
  self->mCurrentTime_ = 0;
  self->mCurrentBlock_ = 0;
  self->mBlockNumAtStart_ = 0;
  self->mTxnReliabilityCounter_ = 0;
  JreStrongAssignAndConsume(&self->mHash_, new_JavaUtilRandom_init());
  self->UID_ = zUID;
  self->mSendingTXN_ = false;
}

OrgMinimaUtilsTestsTxpowchainUser *new_OrgMinimaUtilsTestsTxpowchainUser_initWithInt_(jint zUID) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsTxpowchainUser, initWithInt_, zUID)
}

OrgMinimaUtilsTestsTxpowchainUser *create_OrgMinimaUtilsTestsTxpowchainUser_initWithInt_(jint zUID) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsTxpowchainUser, initWithInt_, zUID)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsTxpowchainUser)
