//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cchain/Cascader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/utils/tests/cchain/CChain.h"
#include "org/minima/utils/tests/cchain/CChainBlock.h"
#include "org/minima/utils/tests/cchain/Cascader.h"

@implementation OrgMinimaUtilsTestsCchainCascader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCchainCascader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaUtilsTestsCchainCChain:(OrgMinimaUtilsTestsCchainCChain *)zChain {
  OrgMinimaUtilsTestsCchainCascader_initWithOrgMinimaUtilsTestsCchainCChain_(self, zChain);
  return self;
}

- (void)addBlockWithOrgMinimaUtilsTestsCchainCChainBlock:(OrgMinimaUtilsTestsCchainCChainBlock *)zBlock {
  jint level = [((OrgMinimaUtilsTestsCchainCChainBlock *) nil_chk(zBlock)) getFinalLevel];
  if (mCurrent_ == nil) {
    JreStrongAssign(&mRoot_, zBlock);
    JreStrongAssign(&mRoot_->mParent_, nil);
  }
  else {
    jint oldlevel = [mCurrent_ getFinalLevel];
    if (level <= oldlevel) {
      JreStrongAssign(&((OrgMinimaUtilsTestsCchainCChainBlock *) nil_chk(mCurrent_))->mChild_, zBlock);
      JreStrongAssign(&zBlock->mParent_, mCurrent_);
    }
    else {
      OrgMinimaUtilsTestsCchainCChainBlock *last = IOSObjectArray_Get(nil_chk(mLatestBlocks_), level);
      if (last == nil) {
        JreStrongAssign(&mRoot_, zBlock);
        JreStrongAssign(&mRoot_->mParent_, nil);
      }
      else {
        JreStrongAssign(&last->mChild_, zBlock);
        JreStrongAssign(&zBlock->mParent_, last);
      }
    }
  }
  for (jint i = level; i >= 0; i--) {
    IOSObjectArray_Set(nil_chk(mLatestBlocks_), i, zBlock);
  }
  JreStrongAssign(&mCurrent_, zBlock);
}

- (OrgMinimaUtilsTestsCchainCChain *)getAsCChain {
  OrgMinimaUtilsTestsCchainCChain *chain = create_OrgMinimaUtilsTestsCchainCChain_init();
  JavaUtilArrayList *blocks = [self getAsList];
  for (OrgMinimaUtilsTestsCchainCChainBlock * __strong block in nil_chk(blocks)) {
    [chain addBlockWithOrgMinimaUtilsTestsCchainCChainBlock:block];
  }
  return chain;
}

- (JavaUtilArrayList *)getAsList {
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  if (mRoot_ != nil) {
    OrgMinimaUtilsTestsCchainCChainBlock *curr = mRoot_;
    [ret addWithId:curr];
    while (curr->mChild_ != nil) {
      curr = curr->mChild_;
      [ret addWithId:curr];
    }
  }
  return ret;
}

- (OrgMinimaUtilsTestsCchainCChainBlock *)getRoot {
  return mRoot_;
}

- (void)dealloc {
  RELEASE_(mRoot_);
  RELEASE_(mCurrent_);
  RELEASE_(mLatestBlocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsTestsCchainCChain;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgMinimaUtilsTestsCchainCChainBlock;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaUtilsTestsCchainCChain:);
  methods[2].selector = @selector(addBlockWithOrgMinimaUtilsTestsCchainCChainBlock:);
  methods[3].selector = @selector(getAsCChain);
  methods[4].selector = @selector(getAsList);
  methods[5].selector = @selector(getRoot);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRoot_", "LOrgMinimaUtilsTestsCchainCChainBlock;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrent_", "LOrgMinimaUtilsTestsCchainCChainBlock;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLatestBlocks_", "[LOrgMinimaUtilsTestsCchainCChainBlock;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaUtilsTestsCchainCChain;", "addBlock", "LOrgMinimaUtilsTestsCchainCChainBlock;", "()Ljava/util/ArrayList<Lorg/minima/utils/tests/cchain/CChainBlock;>;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCchainCascader = { "Cascader", "org.minima.utils.tests.cchain", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCchainCascader;
}

@end

void OrgMinimaUtilsTestsCchainCascader_init(OrgMinimaUtilsTestsCchainCascader *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mRoot_, nil);
  JreStrongAssign(&self->mCurrent_, nil);
  JreStrongAssignAndConsume(&self->mLatestBlocks_, [IOSObjectArray newArrayWithLength:OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS type:OrgMinimaUtilsTestsCchainCChainBlock_class_()]);
}

OrgMinimaUtilsTestsCchainCascader *new_OrgMinimaUtilsTestsCchainCascader_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCchainCascader, init)
}

OrgMinimaUtilsTestsCchainCascader *create_OrgMinimaUtilsTestsCchainCascader_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCchainCascader, init)
}

void OrgMinimaUtilsTestsCchainCascader_initWithOrgMinimaUtilsTestsCchainCChain_(OrgMinimaUtilsTestsCchainCascader *self, OrgMinimaUtilsTestsCchainCChain *zChain) {
  NSObject_init(self);
  JreStrongAssign(&self->mRoot_, nil);
  JreStrongAssign(&self->mCurrent_, nil);
  JreStrongAssignAndConsume(&self->mLatestBlocks_, [IOSObjectArray newArrayWithLength:OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS type:OrgMinimaUtilsTestsCchainCChainBlock_class_()]);
  JavaUtilArrayList *blocks = [((OrgMinimaUtilsTestsCchainCChain *) nil_chk(zChain)) getAsList];
  for (OrgMinimaUtilsTestsCchainCChainBlock * __strong block in nil_chk(blocks)) {
    [self addBlockWithOrgMinimaUtilsTestsCchainCChainBlock:block];
  }
}

OrgMinimaUtilsTestsCchainCascader *new_OrgMinimaUtilsTestsCchainCascader_initWithOrgMinimaUtilsTestsCchainCChain_(OrgMinimaUtilsTestsCchainCChain *zChain) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCchainCascader, initWithOrgMinimaUtilsTestsCchainCChain_, zChain)
}

OrgMinimaUtilsTestsCchainCascader *create_OrgMinimaUtilsTestsCchainCascader_initWithOrgMinimaUtilsTestsCchainCChain_(OrgMinimaUtilsTestsCchainCChain *zChain) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCchainCascader, initWithOrgMinimaUtilsTestsCchainCChain_, zChain)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCchainCascader)
