//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cchain/CChainBlock.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/utils/tests/cchain/CChainBlock.h"
#include "org/minima/utils/tests/cchain/CChainLevel.h"
#include "org/minima/utils/tests/cchain/CChainSim.h"

@implementation OrgMinimaUtilsTestsCchainCChainBlock

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCchainCChainBlock_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  jint level = [self getFinalLevel];
  NSString *s = JreStrcat("$I$I$I$I$D$D", @"[LEV:", level, @" / ", mCurrentBlockLevel_, @"] BaseNum:", mBaseBlockNumber_, @" / ", JreLoadStatic(OrgMinimaUtilsTestsCchainCChainSim, NUMBER_BLOCKS), @" Hash:", mBlockHash_, @" Prev:", mBasePrevBlockHash_);
  for (jint i = 0; i <= mCurrentBlockLevel_; i++) {
    JreStrAppend(&s, "C@", 0x000a, IOSObjectArray_Get(nil_chk(mBlockLevels_), i));
  }
  return s;
}

- (jint)getFinalLevel {
  jint level = 0;
  for (jint i = 0; i <= mCurrentBlockLevel_; i++) {
    OrgMinimaUtilsTestsCchainCChainLevel *lev = IOSObjectArray_Get(nil_chk(mBlockLevels_), i);
    if (((OrgMinimaUtilsTestsCchainCChainLevel *) nil_chk(lev))->mBlockDifficulty_ != 0) {
      jdouble diff = 1.0 / lev->mBlockDifficulty_;
      if (mBlockHash_ <= diff) {
        level = lev->mBlockLevel_;
      }
    }
  }
  return level;
}

- (void)dealloc {
  RELEASE_(mBlockLevels_);
  RELEASE_(mParent_);
  RELEASE_(mChild_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(getFinalLevel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBaseBlockNumber_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBasePrevBlockHash_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBlockHash_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMaxBlockLevel_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCurrentBlockLevel_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "MAX_LEVELS", "I", .constantValue.asInt = OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS, 0x19, -1, -1, -1, -1 },
    { "mBlockLevels_", "[LOrgMinimaUtilsTestsCchainCChainLevel;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mFinalWeight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mFinalLevel_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mParent_", "LOrgMinimaUtilsTestsCchainCChainBlock;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mChild_", "LOrgMinimaUtilsTestsCchainCChainBlock;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCchainCChainBlock = { "CChainBlock", "org.minima.utils.tests.cchain", ptrTable, methods, fields, 7, 0x1, 3, 11, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCchainCChainBlock;
}

@end

void OrgMinimaUtilsTestsCchainCChainBlock_init(OrgMinimaUtilsTestsCchainCChainBlock *self) {
  NSObject_init(self);
  self->mFinalWeight_ = 0;
  self->mFinalLevel_ = 0;
  JreStrongAssign(&self->mParent_, nil);
  JreStrongAssign(&self->mChild_, nil);
  JreStrongAssignAndConsume(&self->mBlockLevels_, [IOSObjectArray newArrayWithLength:OrgMinimaUtilsTestsCchainCChainBlock_MAX_LEVELS type:OrgMinimaUtilsTestsCchainCChainLevel_class_()]);
  self->mCurrentBlockLevel_ = 0;
}

OrgMinimaUtilsTestsCchainCChainBlock *new_OrgMinimaUtilsTestsCchainCChainBlock_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCchainCChainBlock, init)
}

OrgMinimaUtilsTestsCchainCChainBlock *create_OrgMinimaUtilsTestsCchainCChainBlock_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCchainCChainBlock, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCchainCChainBlock)
