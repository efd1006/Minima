//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/MerkleProof.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/utils/MerkleProof.h"

@implementation OrgMinimaUtilsMerkleProof

- (instancetype)initWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zData {
  OrgMinimaUtilsMerkleProof_initWithOrgMinimaObjectsBaseMiniData_(self, zData);
  return self;
}

- (void)addBranchHashWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zHash
                                          withBoolean:(jboolean)zLeftRight {
}

- (jint)getProofLen {
  return [((JavaUtilArrayList *) nil_chk(mBranch_)) size];
}

- (OrgMinimaObjectsBaseMiniHash *)calculateFinalHash {
  return nil;
}

- (void)dealloc {
  RELEASE_(mData_);
  RELEASE_(mBranch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaObjectsBaseMiniData:);
  methods[1].selector = @selector(addBranchHashWithOrgMinimaObjectsBaseMiniHash:withBoolean:);
  methods[2].selector = @selector(getProofLen);
  methods[3].selector = @selector(calculateFinalHash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mData_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBranch_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsBaseMiniData;", "addBranchHash", "LOrgMinimaObjectsBaseMiniHash;Z", "Ljava/util/ArrayList<Lorg/minima/utils/MerkleProof$MerkleProofChunk;>;", "LOrgMinimaUtilsMerkleProof_MerkleProofChunk;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsMerkleProof = { "MerkleProof", "org.minima.utils", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, 4, -1, -1, -1 };
  return &_OrgMinimaUtilsMerkleProof;
}

@end

void OrgMinimaUtilsMerkleProof_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaUtilsMerkleProof *self, OrgMinimaObjectsBaseMiniData *zData) {
  NSObject_init(self);
  JreStrongAssign(&self->mData_, zData);
  JreStrongAssignAndConsume(&self->mBranch_, new_JavaUtilArrayList_init());
}

OrgMinimaUtilsMerkleProof *new_OrgMinimaUtilsMerkleProof_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaObjectsBaseMiniData *zData) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsMerkleProof, initWithOrgMinimaObjectsBaseMiniData_, zData)
}

OrgMinimaUtilsMerkleProof *create_OrgMinimaUtilsMerkleProof_initWithOrgMinimaObjectsBaseMiniData_(OrgMinimaObjectsBaseMiniData *zData) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsMerkleProof, initWithOrgMinimaObjectsBaseMiniData_, zData)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsMerkleProof)

@implementation OrgMinimaUtilsMerkleProof_MerkleProofChunk

- (instancetype)initWithOrgMinimaUtilsMerkleProof:(OrgMinimaUtilsMerkleProof *)outer$ {
  OrgMinimaUtilsMerkleProof_MerkleProofChunk_initWithOrgMinimaUtilsMerkleProof_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(mData_);
  RELEASE_(mLeftRight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaUtilsMerkleProof:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mData_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeftRight_", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaUtilsMerkleProof;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsMerkleProof_MerkleProofChunk = { "MerkleProofChunk", "org.minima.utils", ptrTable, methods, fields, 7, 0x1, 1, 2, 0, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsMerkleProof_MerkleProofChunk;
}

@end

void OrgMinimaUtilsMerkleProof_MerkleProofChunk_initWithOrgMinimaUtilsMerkleProof_(OrgMinimaUtilsMerkleProof_MerkleProofChunk *self, OrgMinimaUtilsMerkleProof *outer$) {
  NSObject_init(self);
}

OrgMinimaUtilsMerkleProof_MerkleProofChunk *new_OrgMinimaUtilsMerkleProof_MerkleProofChunk_initWithOrgMinimaUtilsMerkleProof_(OrgMinimaUtilsMerkleProof *outer$) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsMerkleProof_MerkleProofChunk, initWithOrgMinimaUtilsMerkleProof_, outer$)
}

OrgMinimaUtilsMerkleProof_MerkleProofChunk *create_OrgMinimaUtilsMerkleProof_MerkleProofChunk_initWithOrgMinimaUtilsMerkleProof_(OrgMinimaUtilsMerkleProof *outer$) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsMerkleProof_MerkleProofChunk, initWithOrgMinimaUtilsMerkleProof_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsMerkleProof_MerkleProofChunk)
