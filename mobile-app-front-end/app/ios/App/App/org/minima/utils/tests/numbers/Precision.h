//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/numbers/Precision.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision")
#ifdef RESTRICT_OrgMinimaUtilsTestsNumbersPrecision
#define INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision 0
#else
#define INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision 1
#endif
#undef RESTRICT_OrgMinimaUtilsTestsNumbersPrecision

#if !defined (OrgMinimaUtilsTestsNumbersPrecision_) && (INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision || defined(INCLUDE_OrgMinimaUtilsTestsNumbersPrecision))
#define OrgMinimaUtilsTestsNumbersPrecision_

@class IOSObjectArray;
@class JavaMathMathContext;

@interface OrgMinimaUtilsTestsNumbersPrecision : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs;

@end

J2OBJC_STATIC_INIT(OrgMinimaUtilsTestsNumbersPrecision)

inline JavaMathMathContext *OrgMinimaUtilsTestsNumbersPrecision_get_mMathContext(void);
inline JavaMathMathContext *OrgMinimaUtilsTestsNumbersPrecision_set_mMathContext(JavaMathMathContext *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaMathMathContext *OrgMinimaUtilsTestsNumbersPrecision_mMathContext;
J2OBJC_STATIC_FIELD_OBJ(OrgMinimaUtilsTestsNumbersPrecision, mMathContext, JavaMathMathContext *)

FOUNDATION_EXPORT void OrgMinimaUtilsTestsNumbersPrecision_init(OrgMinimaUtilsTestsNumbersPrecision *self);

FOUNDATION_EXPORT OrgMinimaUtilsTestsNumbersPrecision *new_OrgMinimaUtilsTestsNumbersPrecision_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaUtilsTestsNumbersPrecision *create_OrgMinimaUtilsTestsNumbersPrecision_init(void);

FOUNDATION_EXPORT void OrgMinimaUtilsTestsNumbersPrecision_mainWithNSStringArray_(IOSObjectArray *zArgs);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaUtilsTestsNumbersPrecision)

#endif

#if !defined (OrgMinimaUtilsTestsNumbersPrecision_mynumber_) && (INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision || defined(INCLUDE_OrgMinimaUtilsTestsNumbersPrecision_mynumber))
#define OrgMinimaUtilsTestsNumbersPrecision_mynumber_

#define RESTRICT_JavaMathBigDecimal 1
#define INCLUDE_JavaMathBigDecimal 1
#include "java/math/BigDecimal.h"

@class IOSCharArray;
@class JavaMathBigInteger;
@class JavaMathMathContext;
@class OrgMinimaUtilsTestsNumbersPrecision;

@interface OrgMinimaUtilsTestsNumbersPrecision_mynumber : JavaMathBigDecimal {
 @public
  NSString *mOriginal_;
}

#pragma mark Public

- (instancetype)initWithOrgMinimaUtilsTestsNumbersPrecision:(OrgMinimaUtilsTestsNumbersPrecision *)outer$
                                               withNSString:(NSString *)zNum;

- (OrgMinimaUtilsTestsNumbersPrecision_mynumber *)addWithOrgMinimaUtilsTestsNumbersPrecision_mynumber:(OrgMinimaUtilsTestsNumbersPrecision_mynumber *)zNum;

- (NSUInteger)hash;

- (jboolean)isEqual:(id)obj;

- (jboolean)isValid;

- (NSString *)toSigString;

- (NSString *)description;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithCharArray:(IOSCharArray *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithCharArray:(IOSCharArray *)arg0
                          withInt:(jint)arg1
                          withInt:(jint)arg2 NS_UNAVAILABLE;

- (instancetype)initWithCharArray:(IOSCharArray *)arg0
                          withInt:(jint)arg1
                          withInt:(jint)arg2
          withJavaMathMathContext:(JavaMathMathContext *)arg3 NS_UNAVAILABLE;

- (instancetype)initWithCharArray:(IOSCharArray *)arg0
          withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithDouble:(jdouble)arg0 NS_UNAVAILABLE;

- (instancetype)initWithDouble:(jdouble)arg0
       withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0 NS_UNAVAILABLE;

- (instancetype)initWithInt:(jint)arg0
    withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                                   withInt:(jint)arg1 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                                   withInt:(jint)arg1
                   withJavaMathMathContext:(JavaMathMathContext *)arg2 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                   withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)arg0
                                  withLong:(jlong)arg1
                                   withInt:(jint)arg2
                                   withInt:(jint)arg3 NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0 NS_UNAVAILABLE;

- (instancetype)initWithLong:(jlong)arg0
     withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
         withJavaMathMathContext:(JavaMathMathContext *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaUtilsTestsNumbersPrecision_mynumber)

J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsNumbersPrecision_mynumber, mOriginal_, NSString *)

FOUNDATION_EXPORT void OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision_mynumber *self, OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum);

FOUNDATION_EXPORT OrgMinimaUtilsTestsNumbersPrecision_mynumber *new_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaUtilsTestsNumbersPrecision_mynumber *create_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaUtilsTestsNumbersPrecision_mynumber)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaUtilsTestsNumbersPrecision")
