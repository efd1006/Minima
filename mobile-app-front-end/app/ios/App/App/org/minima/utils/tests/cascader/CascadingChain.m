//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cascader/CascadingChain.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cascader/Block.h"
#include "org/minima/utils/tests/cascader/BlockLevel.h"
#include "org/minima/utils/tests/cascader/CascadingChain.h"

jint OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS = 10;
jint OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_SIMULATIONS = 1;
jint OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL = 2;

@implementation OrgMinimaUtilsTestsCascaderCascadingChain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCascaderCascadingChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsCascaderCascadingChain_mainWithNSStringArray_(zArgs);
}

+ (JavaUtilArrayList *)getBlocksWithJavaUtilArrayList:(JavaUtilArrayList *)zAllBlocks
                                              withInt:(jint)zLevel
                                              withInt:(jint)zStart
                                              withInt:(jint)zEnd {
  return OrgMinimaUtilsTestsCascaderCascadingChain_getBlocksWithJavaUtilArrayList_withInt_withInt_withInt_(zAllBlocks, zLevel, zStart, zEnd);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(getBlocksWithJavaUtilArrayList:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUMBER_BLOCKS", "I", .constantValue.asLong = 0, 0x9, -1, 5, -1, -1 },
    { "NUMBER_SIMULATIONS", "I", .constantValue.asLong = 0, 0x9, -1, 6, -1, -1 },
    { "MAX_BLOCK_LEVEL", "I", .constantValue.asLong = 0, 0x9, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "getBlocks", "LJavaUtilArrayList;III", "(Ljava/util/ArrayList<Lorg/minima/utils/tests/cascader/Block;>;III)Ljava/util/ArrayList<Lorg/minima/utils/tests/cascader/Block;>;", &OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS, &OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_SIMULATIONS, &OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCascaderCascadingChain = { "CascadingChain", "org.minima.utils.tests.cascader", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCascaderCascadingChain;
}

@end

void OrgMinimaUtilsTestsCascaderCascadingChain_init(OrgMinimaUtilsTestsCascaderCascadingChain *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsCascaderCascadingChain *new_OrgMinimaUtilsTestsCascaderCascadingChain_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCascaderCascadingChain, init)
}

OrgMinimaUtilsTestsCascaderCascadingChain *create_OrgMinimaUtilsTestsCascaderCascadingChain_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCascaderCascadingChain, init)
}

void OrgMinimaUtilsTestsCascaderCascadingChain_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsCascaderCascadingChain_initialize();
  JavaUtilRandom *rand = create_JavaUtilRandom_init();
  JavaUtilArrayList *Blocks = create_JavaUtilArrayList_init();
  IOSIntArray *blockNumbers = [IOSIntArray arrayWithLength:OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL + 1];
  IOSObjectArray *previousBlocks = [IOSObjectArray arrayWithLength:OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL + 1 type:OrgMinimaUtilsTestsCascaderBlock_class_()];
  for (jint i = 0; i <= OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL; i++) {
    *IOSIntArray_GetRef(blockNumbers, i) = 0;
    IOSObjectArray_SetAndConsume(previousBlocks, i, new_OrgMinimaUtilsTestsCascaderBlock_init());
  }
  jint maxlevel = 1;
  jint currentlevel = 0;
  IOSObjectArray_SetAndConsume(previousBlocks, 0, new_OrgMinimaUtilsTestsCascaderBlock_init());
  for (jint i = 0; i < OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS; i++) {
    OrgMinimaUtilsTestsCascaderBlock *blk = create_OrgMinimaUtilsTestsCascaderBlock_init();
    blk->mBlockHash_ = [rand nextDouble];
    blk->mMaxBlockLevel_ = maxlevel;
    blk->mCurrentBlockLevel_ = currentlevel;
    [Blocks addWithId:blk];
    for (jint bl = 0; bl <= currentlevel; bl++) {
      OrgMinimaUtilsTestsCascaderBlockLevel *bdata = create_OrgMinimaUtilsTestsCascaderBlockLevel_init();
      bdata->mBlockLevel_ = bl;
      bdata->mBlockNumber_ = IOSIntArray_Get(blockNumbers, bl);
      bdata->mPreviousBlock_ = ((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(IOSObjectArray_Get(previousBlocks, bl)))->mBlockHash_;
      if (bl == 0) {
        bdata->mBlockDifficulty_ = 1;
      }
      else {
        bdata->mBlockDifficulty_ = JavaLangMath_powWithDouble_withDouble_(2, bl);
      }
      IOSObjectArray_Set(nil_chk(blk->mBlockLevels_), bl, bdata);
    }
    jint level = [blk getBlockLevel];
    if (level >= currentlevel) {
      currentlevel++;
      if (currentlevel > maxlevel) {
        currentlevel = 0;
        maxlevel++;
      }
    }
    if (maxlevel > OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL) {
      maxlevel = OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL;
    }
    for (jint levup = 0; levup <= level; levup++) {
      *IOSIntArray_GetRef(blockNumbers, levup) += 1;
      IOSObjectArray_Set(previousBlocks, levup, blk);
    }
  }
  for (jint i = 0; i <= OrgMinimaUtilsTestsCascaderCascadingChain_MAX_BLOCK_LEVEL; i++) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"\nBLOCK LEVEL ", i));
    jfloat totalpow = 0;
    jint counter = 0;
    jint lastlevelblock = -1;
    for (OrgMinimaUtilsTestsCascaderBlock * __strong blk in Blocks) {
      if ([((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(blk)) getBlockLevel] >= i) {
        OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$I", counter, @") Base Block ", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(blk->mBlockLevels_), 0)))->mBlockNumber_));
        counter++;
        [blk printLevels];
        JrePlusAssignFloatD(&totalpow, ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(blk->mBlockLevels_), i)))->mBlockDifficulty_);
        lastlevelblock = ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(blk->mBlockLevels_, 0)))->mBlockNumber_;
      }
    }
    if (lastlevelblock < OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS - 1) {
      for (jint extra = i - 1; extra >= 0; extra--) {
        OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"**** Level down ****** : ", extra));
        for (OrgMinimaUtilsTestsCascaderBlock * __strong blk in Blocks) {
          if (((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(blk))->mBlockLevels_), 0)))->mBlockNumber_ > lastlevelblock) {
            if ([blk checkBlockLevelWithInt:extra]) {
              lastlevelblock = ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(blk->mBlockLevels_), 0)))->mBlockNumber_;
              OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$I", counter, @") Base Block ", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(blk->mBlockLevels_, 0)))->mBlockNumber_));
              JrePlusAssignFloatD(&totalpow, ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(blk->mBlockLevels_), extra)))->mBlockDifficulty_);
              counter++;
              [blk printLevels];
            }
          }
        }
      }
    }
    jdouble blockratio = ((jdouble) counter / (jdouble) OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS) * 100;
    jdouble powratio = (totalpow / (jdouble) OrgMinimaUtilsTestsCascaderCascadingChain_NUMBER_BLOCKS) * 100;
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$DC", @"Total TX-POW ", powratio, '%'));
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$DC", @"Size  ", blockratio, '%'));
  }
}

JavaUtilArrayList *OrgMinimaUtilsTestsCascaderCascadingChain_getBlocksWithJavaUtilArrayList_withInt_withInt_withInt_(JavaUtilArrayList *zAllBlocks, jint zLevel, jint zStart, jint zEnd) {
  OrgMinimaUtilsTestsCascaderCascadingChain_initialize();
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  jboolean startfound = false;
  for (OrgMinimaUtilsTestsCascaderBlock * __strong blk in nil_chk(zAllBlocks)) {
    jint bnum = ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(blk))->mBlockLevels_), 0)))->mBlockNumber_;
    if (!startfound) {
      if (bnum == zStart) {
        startfound = true;
      }
    }
    if (startfound) {
      if ([blk checkBlockLevelWithInt:zLevel]) {
        [ret addWithId:blk];
      }
    }
    if (bnum == zEnd) {
      break;
    }
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCascaderCascadingChain)
