//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/json/JSONObject.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/minima/utils/json/JSONObject.h"
#include "org/minima/utils/json/JSONValue.h"

inline jlong OrgMinimaUtilsJsonJSONObject_get_serialVersionUID(void);
#define OrgMinimaUtilsJsonJSONObject_serialVersionUID -503443796854799292LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsJsonJSONObject, serialVersionUID, jlong)

@implementation OrgMinimaUtilsJsonJSONObject

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsJsonJSONObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)map {
  OrgMinimaUtilsJsonJSONObject_initWithJavaUtilMap_(self, map);
  return self;
}

+ (void)writeJSONStringWithJavaUtilMap:(id<JavaUtilMap>)map
                      withJavaIoWriter:(JavaIoWriter *)outArg {
  OrgMinimaUtilsJsonJSONObject_writeJSONStringWithJavaUtilMap_withJavaIoWriter_(map, outArg);
}

- (void)writeJSONStringWithJavaIoWriter:(JavaIoWriter *)outArg {
  OrgMinimaUtilsJsonJSONObject_writeJSONStringWithJavaUtilMap_withJavaIoWriter_(self, outArg);
}

+ (NSString *)toJSONStringWithJavaUtilMap:(id<JavaUtilMap>)map {
  return OrgMinimaUtilsJsonJSONObject_toJSONStringWithJavaUtilMap_(map);
}

- (NSString *)toJSONString {
  return OrgMinimaUtilsJsonJSONObject_toJSONStringWithJavaUtilMap_(self);
}

- (NSString *)description {
  return [self toJSONString];
}

+ (NSString *)toStringWithNSString:(NSString *)key
                            withId:(id)value {
  return OrgMinimaUtilsJsonJSONObject_toStringWithNSString_withId_(key, value);
}

+ (NSString *)escapeWithNSString:(NSString *)s {
  return OrgMinimaUtilsJsonJSONObject_escapeWithNSString_(s);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 4, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilMap:);
  methods[2].selector = @selector(writeJSONStringWithJavaUtilMap:withJavaIoWriter:);
  methods[3].selector = @selector(writeJSONStringWithJavaIoWriter:);
  methods[4].selector = @selector(toJSONStringWithJavaUtilMap:);
  methods[5].selector = @selector(toJSONString);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(toStringWithNSString:withId:);
  methods[8].selector = @selector(escapeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgMinimaUtilsJsonJSONObject_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "writeJSONString", "LJavaUtilMap;LJavaIoWriter;", "LJavaIoIOException;", "LJavaIoWriter;", "toJSONString", "toString", "LNSString;LNSObject;", "escape", "LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsJsonJSONObject = { "JSONObject", "org.minima.utils.json", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsJsonJSONObject;
}

@end

void OrgMinimaUtilsJsonJSONObject_init(OrgMinimaUtilsJsonJSONObject *self) {
  JavaUtilLinkedHashMap_init(self);
}

OrgMinimaUtilsJsonJSONObject *new_OrgMinimaUtilsJsonJSONObject_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsJsonJSONObject, init)
}

OrgMinimaUtilsJsonJSONObject *create_OrgMinimaUtilsJsonJSONObject_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsJsonJSONObject, init)
}

void OrgMinimaUtilsJsonJSONObject_initWithJavaUtilMap_(OrgMinimaUtilsJsonJSONObject *self, id<JavaUtilMap> map) {
  JavaUtilLinkedHashMap_initWithJavaUtilMap_(self, map);
}

OrgMinimaUtilsJsonJSONObject *new_OrgMinimaUtilsJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsJsonJSONObject, initWithJavaUtilMap_, map)
}

OrgMinimaUtilsJsonJSONObject *create_OrgMinimaUtilsJsonJSONObject_initWithJavaUtilMap_(id<JavaUtilMap> map) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsJsonJSONObject, initWithJavaUtilMap_, map)
}

void OrgMinimaUtilsJsonJSONObject_writeJSONStringWithJavaUtilMap_withJavaIoWriter_(id<JavaUtilMap> map, JavaIoWriter *outArg) {
  OrgMinimaUtilsJsonJSONObject_initialize();
  if (map == nil) {
    [((JavaIoWriter *) nil_chk(outArg)) writeWithNSString:@"null"];
    return;
  }
  jboolean first = true;
  id<JavaUtilIterator> iter = [((id<JavaUtilSet>) nil_chk([map entrySet])) iterator];
  [((JavaIoWriter *) nil_chk(outArg)) writeWithInt:'{'];
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    if (first) first = false;
    else [outArg writeWithInt:','];
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([iter next], JavaUtilMap_Entry_class_());
    [outArg writeWithInt:'"'];
    [outArg writeWithNSString:OrgMinimaUtilsJsonJSONObject_escapeWithNSString_(NSString_java_valueOf_([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey]))];
    [outArg writeWithInt:'"'];
    [outArg writeWithInt:':'];
    OrgMinimaUtilsJsonJSONValue_writeJSONStringWithId_withJavaIoWriter_([entry_ getValue], outArg);
  }
  [outArg writeWithInt:'}'];
}

NSString *OrgMinimaUtilsJsonJSONObject_toJSONStringWithJavaUtilMap_(id<JavaUtilMap> map) {
  OrgMinimaUtilsJsonJSONObject_initialize();
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  @try {
    OrgMinimaUtilsJsonJSONObject_writeJSONStringWithJavaUtilMap_withJavaIoWriter_(map, writer);
    return [writer description];
  }
  @catch (JavaIoIOException *e) {
    @throw new_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

NSString *OrgMinimaUtilsJsonJSONObject_toStringWithNSString_withId_(NSString *key, id value) {
  OrgMinimaUtilsJsonJSONObject_initialize();
  JavaLangStringBuffer *sb = new_JavaLangStringBuffer_init();
  (void) [sb appendWithChar:'"'];
  if (key == nil) (void) [sb appendWithNSString:@"null"];
  else OrgMinimaUtilsJsonJSONValue_escapeWithNSString_withJavaLangStringBuffer_(key, sb);
  (void) [((JavaLangStringBuffer *) nil_chk([sb appendWithChar:'"'])) appendWithChar:':'];
  (void) [sb appendWithNSString:OrgMinimaUtilsJsonJSONValue_toJSONStringWithId_(value)];
  return [sb description];
}

NSString *OrgMinimaUtilsJsonJSONObject_escapeWithNSString_(NSString *s) {
  OrgMinimaUtilsJsonJSONObject_initialize();
  return OrgMinimaUtilsJsonJSONValue_escapeWithNSString_(s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsJsonJSONObject)
