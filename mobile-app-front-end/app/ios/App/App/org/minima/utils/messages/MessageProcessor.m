//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/messages/MessageProcessor.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "org/minima/system/input/InputHandler.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/messages/Message.h"
#include "org/minima/utils/messages/MessageProcessor.h"
#include "org/minima/utils/messages/MessageStack.h"
#include "org/minima/utils/messages/TimerMessage.h"

@interface OrgMinimaUtilsMessagesMessageProcessor () {
 @public
  JavaLangThread *mMainThread_;
  jboolean mRunning_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaUtilsMessagesMessageProcessor, mMainThread_, JavaLangThread *)

@implementation OrgMinimaUtilsMessagesMessageProcessor

- (instancetype)initWithNSString:(NSString *)zName {
  OrgMinimaUtilsMessagesMessageProcessor_initWithNSString_(self, zName);
  return self;
}

- (void)setLOGWithBoolean:(jboolean)zLogON {
  mLogON_ = zLogON;
}

- (jboolean)isRunning {
  return mRunning_;
}

- (void)stopMessageProcessor {
  mRunning_ = false;
  [self notifyLock];
}

- (void)PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:(OrgMinimaUtilsMessagesTimerMessage *)zMessage {
  [((OrgMinimaUtilsMessagesTimerMessage *) nil_chk(zMessage)) setProcessorWithOrgMinimaUtilsMessagesMessageProcessor:self];
  JavaLangThread *timer = new_JavaLangThread_initWithJavaLangRunnable_(zMessage);
  [timer start];
}

- (void)run {
  JavaTextSimpleDateFormat *sdf = new_JavaTextSimpleDateFormat_initWithNSString_(@"HH:mm:ss.SSS");
  while (mRunning_) {
    OrgMinimaUtilsMessagesMessage *msg = [self getNextMessage];
    while (msg != nil && mRunning_) {
      @try {
        if (mLogON_) {
          OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("CI$$$$$@", '[', [self getSize], @"] ", [sdf formatWithJavaUtilDate:new_JavaUtilDate_init()], @" [ ", [((JavaLangThread *) nil_chk(mMainThread_)) getName], @" ] \t", msg));
        }
        [self processMessageWithOrgMinimaUtilsMessagesMessage:msg];
      }
      @catch (JavaLangException *exc) {
        [exc printStackTrace];
        OrgMinimaSystemInputInputHandler_endResponseWithOrgMinimaUtilsMessagesMessage_withBoolean_withNSString_(msg, false, JreStrcat("$@$@", @"SYSTEM ERROR PROCESSING : ", msg, @" exception:", exc));
      }
      msg = [self getNextMessage];
    }
    @try {
      @synchronized(mLock_) {
        if (![self isNextMessage] && mRunning_) {
          [nil_chk(mLock_) java_wait];
        }
      }
    }
    @catch (JavaLangInterruptedException *e) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$$", @"MESSAGE_PROCESSOR ", mName_, @" INTERRUPTED"));
    }
  }
}

- (void)processMessageWithOrgMinimaUtilsMessagesMessage:(OrgMinimaUtilsMessagesMessage *)zMessage {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 5, 6, 7, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(setLOGWithBoolean:);
  methods[2].selector = @selector(isRunning);
  methods[3].selector = @selector(stopMessageProcessor);
  methods[4].selector = @selector(PostTimerMessageWithOrgMinimaUtilsMessagesTimerMessage:);
  methods[5].selector = @selector(run);
  methods[6].selector = @selector(processMessageWithOrgMinimaUtilsMessagesMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMainThread_", "LJavaLangThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLogON_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setLOG", "Z", "PostTimerMessage", "LOrgMinimaUtilsMessagesTimerMessage;", "processMessage", "LOrgMinimaUtilsMessagesMessage;", "LJavaLangException;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsMessagesMessageProcessor = { "MessageProcessor", "org.minima.utils.messages", ptrTable, methods, fields, 7, 0x401, 7, 4, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsMessagesMessageProcessor;
}

@end

void OrgMinimaUtilsMessagesMessageProcessor_initWithNSString_(OrgMinimaUtilsMessagesMessageProcessor *self, NSString *zName) {
  OrgMinimaUtilsMessagesMessageStack_init(self);
  self->mLogON_ = false;
  self->mName_ = zName;
  self->mRunning_ = true;
  self->mMainThread_ = new_JavaLangThread_initWithJavaLangRunnable_withNSString_(self, zName);
  [self->mMainThread_ start];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsMessagesMessageProcessor)
