//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/numbers/Precision.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/MathContext.h"
#include "java/math/RoundingMode.h"
#include "java/text/DecimalFormat.h"
#include "org/minima/utils/tests/numbers/Precision.h"

@interface OrgMinimaUtilsTestsNumbersPrecision_mynumber () {
 @public
  OrgMinimaUtilsTestsNumbersPrecision *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(OrgMinimaUtilsTestsNumbersPrecision)

JavaMathMathContext *OrgMinimaUtilsTestsNumbersPrecision_mMathContext;

@implementation OrgMinimaUtilsTestsNumbersPrecision

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsNumbersPrecision_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsNumbersPrecision_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMathContext", "LJavaMathMathContext;", .constantValue.asLong = 0, 0x9, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", &OrgMinimaUtilsTestsNumbersPrecision_mMathContext, "LOrgMinimaUtilsTestsNumbersPrecision_mynumber;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsNumbersPrecision = { "Precision", "org.minima.utils.tests.numbers", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, 3, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsNumbersPrecision;
}

+ (void)initialize {
  if (self == [OrgMinimaUtilsTestsNumbersPrecision class]) {
    JreStrongAssignAndConsume(&OrgMinimaUtilsTestsNumbersPrecision_mMathContext, new_JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(18, JreLoadEnum(JavaMathRoundingMode, DOWN)));
    J2OBJC_SET_INITIALIZED(OrgMinimaUtilsTestsNumbersPrecision)
  }
}

@end

void OrgMinimaUtilsTestsNumbersPrecision_init(OrgMinimaUtilsTestsNumbersPrecision *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsNumbersPrecision *new_OrgMinimaUtilsTestsNumbersPrecision_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsNumbersPrecision, init)
}

OrgMinimaUtilsTestsNumbersPrecision *create_OrgMinimaUtilsTestsNumbersPrecision_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsNumbersPrecision, init)
}

void OrgMinimaUtilsTestsNumbersPrecision_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsNumbersPrecision_initialize();
  OrgMinimaUtilsTestsNumbersPrecision *pp = create_OrgMinimaUtilsTestsNumbersPrecision_init();
  OrgMinimaUtilsTestsNumbersPrecision_mynumber *num = create_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(pp, @"1000000000.00000001");
  OrgMinimaUtilsTestsNumbersPrecision_mynumber *num2 = create_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(pp, @"1.003");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$Z", @"Num1 : ", [num toSigString], @" valid:", [num isValid])];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$Z", @"Num2 : ", [num2 toSigString], @" valid:", [num2 isValid])];
  OrgMinimaUtilsTestsNumbersPrecision_mynumber *num3 = [num addWithOrgMinimaUtilsTestsNumbersPrecision_mynumber:num2];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$Z", @"Num3 : ", [((OrgMinimaUtilsTestsNumbersPrecision_mynumber *) nil_chk(num3)) toSigString], @" valid:", [num3 isValid])];
  JavaTextDecimalFormat *decform = create_JavaTextDecimalFormat_initWithNSString_(@"0.#################E0");
  NSString *sig = [decform formatWithId:num];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"\n\nSIG: ", sig)];
  JavaMathBigDecimal *ff = create_JavaMathBigDecimal_initWithNSString_(sig);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"SIGBD: ", [ff toPlainString])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsNumbersPrecision)

@implementation OrgMinimaUtilsTestsNumbersPrecision_mynumber

- (instancetype)initWithOrgMinimaUtilsTestsNumbersPrecision:(OrgMinimaUtilsTestsNumbersPrecision *)outer$
                                               withNSString:(NSString *)zNum {
  OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(self, outer$, zNum);
  return self;
}

- (jboolean)isValid {
  return [((NSString *) nil_chk([self description])) isEqual:mOriginal_];
}

- (NSString *)description {
  return [self toPlainString];
}

- (NSString *)toSigString {
  return [self toEngineeringString];
}

- (OrgMinimaUtilsTestsNumbersPrecision_mynumber *)addWithOrgMinimaUtilsTestsNumbersPrecision_mynumber:(OrgMinimaUtilsTestsNumbersPrecision_mynumber *)zNum {
  JavaMathBigDecimal *bd = [self addWithJavaMathBigDecimal:create_JavaMathBigDecimal_initWithNSString_([((OrgMinimaUtilsTestsNumbersPrecision_mynumber *) nil_chk(zNum)) description])];
  return create_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(this$0_, [((JavaMathBigDecimal *) nil_chk(bd)) toPlainString]);
}

- (jboolean)isEqual:(id)obj {
  return self == obj;
}

- (NSUInteger)hash {
  return (NSUInteger)self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mOriginal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsTestsNumbersPrecision_mynumber;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaUtilsTestsNumbersPrecision:withNSString:);
  methods[1].selector = @selector(isValid);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(toSigString);
  methods[4].selector = @selector(addWithOrgMinimaUtilsTestsNumbersPrecision_mynumber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgMinimaUtilsTestsNumbersPrecision;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mOriginal_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "add", "LOrgMinimaUtilsTestsNumbersPrecision_mynumber;", "LOrgMinimaUtilsTestsNumbersPrecision;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsNumbersPrecision_mynumber = { "mynumber", "org.minima.utils.tests.numbers", ptrTable, methods, fields, 7, 0x1, 5, 2, 4, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsNumbersPrecision_mynumber;
}

@end

void OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision_mynumber *self, OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaMathBigDecimal_initWithNSString_withJavaMathMathContext_(self, zNum, JreLoadStatic(OrgMinimaUtilsTestsNumbersPrecision, mMathContext));
  JreStrongAssign(&self->mOriginal_, zNum);
}

OrgMinimaUtilsTestsNumbersPrecision_mynumber *new_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsNumbersPrecision_mynumber, initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_, outer$, zNum)
}

OrgMinimaUtilsTestsNumbersPrecision_mynumber *create_OrgMinimaUtilsTestsNumbersPrecision_mynumber_initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_(OrgMinimaUtilsTestsNumbersPrecision *outer$, NSString *zNum) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsNumbersPrecision_mynumber, initWithOrgMinimaUtilsTestsNumbersPrecision_withNSString_, outer$, zNum)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsNumbersPrecision_mynumber)
