//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cascader/POWChecker.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cascader/POWChecker.h"

@implementation OrgMinimaUtilsTestsCascaderPOWChecker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCascaderPOWChecker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsCascaderPOWChecker_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUMBER_BLOCKS", "I", .constantValue.asInt = OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_BLOCKS, 0x19, -1, -1, -1, -1 },
    { "NUMBER_LEVELS", "I", .constantValue.asInt = OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_LEVELS, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCascaderPOWChecker = { "POWChecker", "org.minima.utils.tests.cascader", ptrTable, methods, fields, 7, 0x1, 2, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCascaderPOWChecker;
}

@end

void OrgMinimaUtilsTestsCascaderPOWChecker_init(OrgMinimaUtilsTestsCascaderPOWChecker *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsCascaderPOWChecker *new_OrgMinimaUtilsTestsCascaderPOWChecker_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCascaderPOWChecker, init)
}

OrgMinimaUtilsTestsCascaderPOWChecker *create_OrgMinimaUtilsTestsCascaderPOWChecker_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCascaderPOWChecker, init)
}

void OrgMinimaUtilsTestsCascaderPOWChecker_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsCascaderPOWChecker_initialize();
  JavaUtilRandom *rand = create_JavaUtilRandom_init();
  IOSIntArray *levelCounters = [IOSIntArray arrayWithLength:OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_LEVELS];
  IOSDoubleArray *totalHigherDiff = [IOSDoubleArray arrayWithLength:OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_LEVELS];
  jint currentlevel = 0;
  for (jint i = 0; i < OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_BLOCKS; i++) {
    jdouble diff = [rand nextDouble];
    jint maxlev = 0;
    for (jint lev = 0; lev <= currentlevel; lev++) {
      jdouble POWrating = JavaLangMath_powWithDouble_withDouble_(2.0, lev);
      jdouble levdiff = 1.0 / POWrating;
      if (diff < levdiff) {
        maxlev = lev;
        (*IOSIntArray_GetRef(levelCounters, lev))++;
        JrePlusAssignDoubleD(IOSDoubleArray_GetRef(totalHigherDiff, lev), POWrating);
        if (lev >= currentlevel) {
          OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$ICI$I", @"Level UP! @ Block ", i, ' ', lev, @" -> ", (currentlevel + 1)));
          currentlevel++;
          break;
        }
      }
    }
  }
  for (jint i = 0; i < OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_LEVELS; i++) {
    jdouble perc = 100.0 * (IOSDoubleArray_Get(totalHigherDiff, i) / OrgMinimaUtilsTestsCascaderPOWChecker_NUMBER_BLOCKS);
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I$I$I$D$D", @"Level : ", i, @" [", JreFpToInt(perc), @"%] ", IOSIntArray_Get(levelCounters, i), @" Total:", IOSDoubleArray_Get(totalHigherDiff, i), @" Diff:", (1.0 / JavaLangMath_powWithDouble_withDouble_(2.0, i))));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCascaderPOWChecker)
