//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cascader/Block.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cascader/Block.h"
#include "org/minima/utils/tests/cascader/BlockLevel.h"

@implementation OrgMinimaUtilsTestsCascaderBlock

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCascaderBlock_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)printLevels {
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D$I$I$I", @"Hash : ", mBlockHash_, @" Level:", [self getBlockLevel], @" Current:", mCurrentBlockLevel_, @" MaxLevel:", mMaxBlockLevel_));
  for (jint lev = 0; lev <= mCurrentBlockLevel_; lev++) {
    NSString *desc = JreStrcat("$I$I$D$D$", @"[ lev:", lev, @" blocknumber:", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(mBlockLevels_), lev)))->mBlockNumber_, @", prevHash:", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(mBlockLevels_, lev)))->mPreviousBlock_, @", Diff:", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(mBlockLevels_, lev)))->mBlockDifficulty_, @" ]");
    OrgMinimaUtilsMinimaLogger_logWithNSString_(desc);
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"");
}

- (NSString *)description {
  return JreStrcat("$I$I$I$I$D$D$", @"[ (", ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(mBlockLevels_), 0)))->mBlockNumber_, @") ", [self getBlockLevel], @" / ", mCurrentBlockLevel_, @" / ", mMaxBlockLevel_, @", ", mBlockHash_, @" , FINAL WEIGHT:", mFinalWeight_, @" ]");
}

- (jboolean)checkBlockLevelWithInt:(jint)zLevel {
  if (mCurrentBlockLevel_ >= zLevel) {
    jdouble diff = 1.0 / ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(mBlockLevels_), zLevel)))->mBlockDifficulty_;
    return (mBlockHash_ <= diff);
  }
  return false;
}

- (jint)getBlockLevel {
  jint level = 0;
  for (jint i = 0; i <= mCurrentBlockLevel_; i++) {
    OrgMinimaUtilsTestsCascaderBlockLevel *lev = IOSObjectArray_Get(nil_chk(mBlockLevels_), i);
    if (((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(lev))->mBlockDifficulty_ != 0) {
      jdouble diff = 1.0 / lev->mBlockDifficulty_;
      if (mBlockHash_ <= diff) {
        level = lev->mBlockLevel_;
      }
    }
  }
  return level;
}

- (void)dealloc {
  RELEASE_(mBlockLevels_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(printLevels);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(checkBlockLevelWithInt:);
  methods[4].selector = @selector(getBlockLevel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBaseBlockNumber_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBasePrevBlockHash_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBlockHash_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMaxBlockLevel_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCurrentBlockLevel_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBlockLevels_", "[LOrgMinimaUtilsTestsCascaderBlockLevel;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mFinalWeight_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mFinalLevel_", "D", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "checkBlockLevel", "I" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCascaderBlock = { "Block", "org.minima.utils.tests.cascader", ptrTable, methods, fields, 7, 0x1, 5, 8, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCascaderBlock;
}

@end

void OrgMinimaUtilsTestsCascaderBlock_init(OrgMinimaUtilsTestsCascaderBlock *self) {
  NSObject_init(self);
  self->mFinalWeight_ = 0;
  self->mFinalLevel_ = 0;
  JreStrongAssignAndConsume(&self->mBlockLevels_, [IOSObjectArray newArrayWithLength:32 type:OrgMinimaUtilsTestsCascaderBlockLevel_class_()]);
  self->mBlockHash_ = 0;
}

OrgMinimaUtilsTestsCascaderBlock *new_OrgMinimaUtilsTestsCascaderBlock_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCascaderBlock, init)
}

OrgMinimaUtilsTestsCascaderBlock *create_OrgMinimaUtilsTestsCascaderBlock_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCascaderBlock, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCascaderBlock)
