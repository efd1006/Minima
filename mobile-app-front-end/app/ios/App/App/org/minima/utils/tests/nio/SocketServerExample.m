//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/nio/SocketServerExample.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/net/SocketAddress.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/minima/utils/tests/nio/SocketClientExample.h"
#include "org/minima/utils/tests/nio/SocketServerExample.h"

@interface OrgMinimaUtilsTestsNioSocketServerExample () {
 @public
  JavaNioChannelsSelector *selector_;
  id<JavaUtilMap> dataMapper_;
  JavaNetInetSocketAddress *listenAddress_;
}

- (void)startServer;

- (void)acceptWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

- (void)readWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key;

@end

J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsNioSocketServerExample, selector_, JavaNioChannelsSelector *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsNioSocketServerExample, dataMapper_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsNioSocketServerExample, listenAddress_, JavaNetInetSocketAddress *)

__attribute__((unused)) static void OrgMinimaUtilsTestsNioSocketServerExample_startServer(OrgMinimaUtilsTestsNioSocketServerExample *self);

__attribute__((unused)) static void OrgMinimaUtilsTestsNioSocketServerExample_acceptWithJavaNioChannelsSelectionKey_(OrgMinimaUtilsTestsNioSocketServerExample *self, JavaNioChannelsSelectionKey *key);

__attribute__((unused)) static void OrgMinimaUtilsTestsNioSocketServerExample_readWithJavaNioChannelsSelectionKey_(OrgMinimaUtilsTestsNioSocketServerExample *self, JavaNioChannelsSelectionKey *key);

@interface OrgMinimaUtilsTestsNioSocketServerExample_1 : NSObject < JavaLangRunnable >

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaUtilsTestsNioSocketServerExample_1)

__attribute__((unused)) static void OrgMinimaUtilsTestsNioSocketServerExample_1_init(OrgMinimaUtilsTestsNioSocketServerExample_1 *self);

__attribute__((unused)) static OrgMinimaUtilsTestsNioSocketServerExample_1 *new_OrgMinimaUtilsTestsNioSocketServerExample_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaUtilsTestsNioSocketServerExample_1 *create_OrgMinimaUtilsTestsNioSocketServerExample_1_init(void);

@interface OrgMinimaUtilsTestsNioSocketServerExample_2 : NSObject < JavaLangRunnable >

- (instancetype)init;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaUtilsTestsNioSocketServerExample_2)

__attribute__((unused)) static void OrgMinimaUtilsTestsNioSocketServerExample_2_init(OrgMinimaUtilsTestsNioSocketServerExample_2 *self);

__attribute__((unused)) static OrgMinimaUtilsTestsNioSocketServerExample_2 *new_OrgMinimaUtilsTestsNioSocketServerExample_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaUtilsTestsNioSocketServerExample_2 *create_OrgMinimaUtilsTestsNioSocketServerExample_2_init(void);

@implementation OrgMinimaUtilsTestsNioSocketServerExample

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgMinimaUtilsTestsNioSocketServerExample_mainWithNSStringArray_(args);
}

- (instancetype)initWithNSString:(NSString *)address
                         withInt:(jint)port {
  OrgMinimaUtilsTestsNioSocketServerExample_initWithNSString_withInt_(self, address, port);
  return self;
}

- (void)startServer {
  OrgMinimaUtilsTestsNioSocketServerExample_startServer(self);
}

- (void)acceptWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  OrgMinimaUtilsTestsNioSocketServerExample_acceptWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)readWithJavaNioChannelsSelectionKey:(JavaNioChannelsSelectionKey *)key {
  OrgMinimaUtilsTestsNioSocketServerExample_readWithJavaNioChannelsSelectionKey_(self, key);
}

- (void)dealloc {
  RELEASE_(selector_);
  RELEASE_(dataMapper_);
  RELEASE_(listenAddress_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 6, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(mainWithNSStringArray:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(startServer);
  methods[3].selector = @selector(acceptWithJavaNioChannelsSelectionKey:);
  methods[4].selector = @selector(readWithJavaNioChannelsSelectionKey:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "selector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataMapper_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "listenAddress_", "LJavaNetInetSocketAddress;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "LNSString;I", "LJavaIoIOException;", "accept", "LJavaNioChannelsSelectionKey;", "read", "Ljava/util/Map<Ljava/nio/channels/SocketChannel;Ljava/util/List;>;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsNioSocketServerExample = { "SocketServerExample", "org.minima.utils.tests.nio", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsNioSocketServerExample;
}

@end

void OrgMinimaUtilsTestsNioSocketServerExample_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgMinimaUtilsTestsNioSocketServerExample_initialize();
  id<JavaLangRunnable> server = create_OrgMinimaUtilsTestsNioSocketServerExample_1_init();
  id<JavaLangRunnable> client = create_OrgMinimaUtilsTestsNioSocketServerExample_2_init();
  [create_JavaLangThread_initWithJavaLangRunnable_(server) start];
  JavaLangThread_sleepWithLong_(1000);
  [create_JavaLangThread_initWithJavaLangRunnable_withNSString_(client, @"client-A") start];
  [create_JavaLangThread_initWithJavaLangRunnable_withNSString_(client, @"client-B") start];
}

void OrgMinimaUtilsTestsNioSocketServerExample_initWithNSString_withInt_(OrgMinimaUtilsTestsNioSocketServerExample *self, NSString *address, jint port) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->listenAddress_, new_JavaNetInetSocketAddress_initWithNSString_withInt_(address, port));
  JreStrongAssignAndConsume(&self->dataMapper_, new_JavaUtilHashMap_init());
}

OrgMinimaUtilsTestsNioSocketServerExample *new_OrgMinimaUtilsTestsNioSocketServerExample_initWithNSString_withInt_(NSString *address, jint port) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsNioSocketServerExample, initWithNSString_withInt_, address, port)
}

OrgMinimaUtilsTestsNioSocketServerExample *create_OrgMinimaUtilsTestsNioSocketServerExample_initWithNSString_withInt_(NSString *address, jint port) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsNioSocketServerExample, initWithNSString_withInt_, address, port)
}

void OrgMinimaUtilsTestsNioSocketServerExample_startServer(OrgMinimaUtilsTestsNioSocketServerExample *self) {
  JreStrongAssign(&self->selector_, JavaNioChannelsSelector_open());
  JavaNioChannelsServerSocketChannel *serverChannel = JavaNioChannelsServerSocketChannel_open();
  [((JavaNioChannelsServerSocketChannel *) nil_chk(serverChannel)) configureBlockingWithBoolean:false];
  [((JavaNetServerSocket *) nil_chk([serverChannel socket])) bindWithJavaNetSocketAddress:self->listenAddress_];
  [serverChannel register__WithJavaNioChannelsSelector:self->selector_ withInt:JavaNioChannelsSelectionKey_OP_ACCEPT];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"Server started..."];
  while (true) {
    [((JavaNioChannelsSelector *) nil_chk(self->selector_)) select];
    id<JavaUtilIterator> keys = [((id<JavaUtilSet>) nil_chk([((JavaNioChannelsSelector *) nil_chk(self->selector_)) selectedKeys])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(keys)) hasNext]) {
      JavaNioChannelsSelectionKey *key = (JavaNioChannelsSelectionKey *) cast_chk([keys next], [JavaNioChannelsSelectionKey class]);
      [keys remove];
      if (![((JavaNioChannelsSelectionKey *) nil_chk(key)) isValid]) {
        continue;
      }
      if ([key isAcceptable]) {
        OrgMinimaUtilsTestsNioSocketServerExample_acceptWithJavaNioChannelsSelectionKey_(self, key);
      }
      else if ([key isReadable]) {
        OrgMinimaUtilsTestsNioSocketServerExample_readWithJavaNioChannelsSelectionKey_(self, key);
      }
    }
  }
}

void OrgMinimaUtilsTestsNioSocketServerExample_acceptWithJavaNioChannelsSelectionKey_(OrgMinimaUtilsTestsNioSocketServerExample *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsServerSocketChannel *serverChannel = (JavaNioChannelsServerSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsServerSocketChannel class]);
  JavaNioChannelsSocketChannel *channel = [((JavaNioChannelsServerSocketChannel *) nil_chk(serverChannel)) accept];
  [((JavaNioChannelsSocketChannel *) nil_chk(channel)) configureBlockingWithBoolean:false];
  JavaNetSocket *socket = [channel socket];
  JavaNetSocketAddress *remoteAddr = [((JavaNetSocket *) nil_chk(socket)) getRemoteSocketAddress];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Connected to: ", remoteAddr)];
  [((id<JavaUtilMap>) nil_chk(self->dataMapper_)) putWithId:channel withId:create_JavaUtilArrayList_init()];
  [channel register__WithJavaNioChannelsSelector:self->selector_ withInt:JavaNioChannelsSelectionKey_OP_READ];
}

void OrgMinimaUtilsTestsNioSocketServerExample_readWithJavaNioChannelsSelectionKey_(OrgMinimaUtilsTestsNioSocketServerExample *self, JavaNioChannelsSelectionKey *key) {
  JavaNioChannelsSocketChannel *channel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
  JavaNioByteBuffer *buffer = JavaNioByteBuffer_allocateWithInt_(1024);
  jint numRead = -1;
  numRead = [((JavaNioChannelsSocketChannel *) nil_chk(channel)) readWithJavaNioByteBuffer:buffer];
  if (numRead == -1) {
    [((id<JavaUtilMap>) nil_chk(self->dataMapper_)) removeWithId:channel];
    JavaNetSocket *socket = [channel socket];
    JavaNetSocketAddress *remoteAddr = [((JavaNetSocket *) nil_chk(socket)) getRemoteSocketAddress];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Connection closed by client: ", remoteAddr)];
    [channel close];
    [key cancel];
    return;
  }
  IOSByteArray *data = [IOSByteArray arrayWithLength:numRead];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([((JavaNioByteBuffer *) nil_chk(buffer)) array], 0, data, 0, numRead);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"Got: ", [NSString java_stringWithBytes:data])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsNioSocketServerExample)

@implementation OrgMinimaUtilsTestsNioSocketServerExample_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsNioSocketServerExample_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  @try {
    OrgMinimaUtilsTestsNioSocketServerExample_startServer(create_OrgMinimaUtilsTestsNioSocketServerExample_initWithNSString_withInt_(@"127.0.0.1", 8090));
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgMinimaUtilsTestsNioSocketServerExample;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsNioSocketServerExample_1 = { "", "org.minima.utils.tests.nio", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, -1, -1 };
  return &_OrgMinimaUtilsTestsNioSocketServerExample_1;
}

@end

void OrgMinimaUtilsTestsNioSocketServerExample_1_init(OrgMinimaUtilsTestsNioSocketServerExample_1 *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsNioSocketServerExample_1 *new_OrgMinimaUtilsTestsNioSocketServerExample_1_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsNioSocketServerExample_1, init)
}

OrgMinimaUtilsTestsNioSocketServerExample_1 *create_OrgMinimaUtilsTestsNioSocketServerExample_1_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsNioSocketServerExample_1, init)
}

@implementation OrgMinimaUtilsTestsNioSocketServerExample_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsNioSocketServerExample_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)run {
  @try {
    [create_OrgMinimaUtilsTestsNioSocketClientExample_init() startClient];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  @catch (JavaLangInterruptedException *e) {
    [e printStackTrace];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LOrgMinimaUtilsTestsNioSocketServerExample;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsNioSocketServerExample_2 = { "", "org.minima.utils.tests.nio", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, 1, -1, -1 };
  return &_OrgMinimaUtilsTestsNioSocketServerExample_2;
}

@end

void OrgMinimaUtilsTestsNioSocketServerExample_2_init(OrgMinimaUtilsTestsNioSocketServerExample_2 *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsNioSocketServerExample_2 *new_OrgMinimaUtilsTestsNioSocketServerExample_2_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsNioSocketServerExample_2, init)
}

OrgMinimaUtilsTestsNioSocketServerExample_2 *create_OrgMinimaUtilsTestsNioSocketServerExample_2_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsNioSocketServerExample_2, init)
}
