//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/gmss/Winternitz.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/minima/utils/tests/gmss/Winternitz.h"

@implementation OrgMinimaUtilsTestsGmssWinternitz

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsGmssWinternitz_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsGmssWinternitz_mainWithNSStringArray_(zArgs);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsGmssWinternitz = { "Winternitz", "org.minima.utils.tests.gmss", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsGmssWinternitz;
}

@end

void OrgMinimaUtilsTestsGmssWinternitz_init(OrgMinimaUtilsTestsGmssWinternitz *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsGmssWinternitz *new_OrgMinimaUtilsTestsGmssWinternitz_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsGmssWinternitz, init)
}

OrgMinimaUtilsTestsGmssWinternitz *create_OrgMinimaUtilsTestsGmssWinternitz_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsGmssWinternitz, init)
}

void OrgMinimaUtilsTestsGmssWinternitz_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsGmssWinternitz_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsGmssWinternitz)
