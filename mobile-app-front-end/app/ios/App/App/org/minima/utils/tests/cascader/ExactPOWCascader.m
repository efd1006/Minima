//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/cascader/ExactPOWCascader.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Hashtable.h"
#include "java/util/Random.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/tests/cascader/Block.h"
#include "org/minima/utils/tests/cascader/BlockLevel.h"
#include "org/minima/utils/tests/cascader/ExactPOWCascader.h"

jint OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_BLOCKS = 99;
jint OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS = 1;
jint OrgMinimaUtilsTestsCascaderExactPOWCascader_MAX_BLOCK_LEVEL = 2;
jdouble OrgMinimaUtilsTestsCascaderExactPOWCascader_POWRatio = 0;
jdouble OrgMinimaUtilsTestsCascaderExactPOWCascader_BLKNUMRatio = 0;

@implementation OrgMinimaUtilsTestsCascaderExactPOWCascader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_mainWithNSStringArray_(zArgs);
}

+ (void)runSimulation {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_runSimulation();
}

+ (JavaUtilArrayList *)getAllLevelBlocksWithJavaUtilArrayList:(JavaUtilArrayList *)zOriginal
                                                      withInt:(jint)zLevel
                                                      withInt:(jint)zStart
                                                      withInt:(jint)zEnd {
  return OrgMinimaUtilsTestsCascaderExactPOWCascader_getAllLevelBlocksWithJavaUtilArrayList_withInt_withInt_withInt_(zOriginal, zLevel, zStart, zEnd);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x9, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(runSimulation);
  methods[3].selector = @selector(getAllLevelBlocksWithJavaUtilArrayList:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NUMBER_BLOCKS", "I", .constantValue.asLong = 0, 0x9, -1, 5, -1, -1 },
    { "NUMBER_SIMULATIONS", "I", .constantValue.asLong = 0, 0x9, -1, 6, -1, -1 },
    { "MAX_BLOCK_LEVEL", "I", .constantValue.asLong = 0, 0x9, -1, 7, -1, -1 },
    { "POWRatio", "D", .constantValue.asLong = 0, 0x9, -1, 8, -1, -1 },
    { "BLKNUMRatio", "D", .constantValue.asLong = 0, 0x9, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "getAllLevelBlocks", "LJavaUtilArrayList;III", "(Ljava/util/ArrayList<Lorg/minima/utils/tests/cascader/Block;>;III)Ljava/util/ArrayList<Lorg/minima/utils/tests/cascader/Block;>;", &OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_BLOCKS, &OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS, &OrgMinimaUtilsTestsCascaderExactPOWCascader_MAX_BLOCK_LEVEL, &OrgMinimaUtilsTestsCascaderExactPOWCascader_POWRatio, &OrgMinimaUtilsTestsCascaderExactPOWCascader_BLKNUMRatio };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsCascaderExactPOWCascader = { "ExactPOWCascader", "org.minima.utils.tests.cascader", ptrTable, methods, fields, 7, 0x1, 4, 5, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsCascaderExactPOWCascader;
}

@end

void OrgMinimaUtilsTestsCascaderExactPOWCascader_init(OrgMinimaUtilsTestsCascaderExactPOWCascader *self) {
  NSObject_init(self);
}

OrgMinimaUtilsTestsCascaderExactPOWCascader *new_OrgMinimaUtilsTestsCascaderExactPOWCascader_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsCascaderExactPOWCascader, init)
}

OrgMinimaUtilsTestsCascaderExactPOWCascader *create_OrgMinimaUtilsTestsCascaderExactPOWCascader_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsCascaderExactPOWCascader, init)
}

void OrgMinimaUtilsTestsCascaderExactPOWCascader_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_initialize();
  jdouble totalPow = 0;
  jdouble totalNum = 0;
  for (jint i = 0; i < OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS; i++) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"\nRunning Simulation ", i));
    OrgMinimaUtilsTestsCascaderExactPOWCascader_runSimulation();
    JrePlusAssignDoubleD(&totalPow, OrgMinimaUtilsTestsCascaderExactPOWCascader_POWRatio);
    JrePlusAssignDoubleD(&totalNum, OrgMinimaUtilsTestsCascaderExactPOWCascader_BLKNUMRatio);
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"\nFinal Scores");
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"Number of Simulations : ", OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"Number of Blocks : ", OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_BLOCKS));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$DC", @"POW Stored : ", (totalPow / (jdouble) OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS) * 100, '%'));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$DC", @"SIZE of Cascading Chain : ", (totalNum / (jdouble) OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_SIMULATIONS) * 100, '%'));
}

void OrgMinimaUtilsTestsCascaderExactPOWCascader_runSimulation() {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_initialize();
  JavaUtilRandom *rand = create_JavaUtilRandom_init();
  JavaUtilHashtable *mAllBLocks = create_JavaUtilHashtable_init();
  JavaUtilArrayList *Blocks = create_JavaUtilArrayList_init();
  JavaUtilArrayList *BlocksCascading = create_JavaUtilArrayList_init();
  IOSIntArray *mLastLevelBlock = [IOSIntArray arrayWithLength:16];
  OrgMinimaUtilsTestsCascaderBlockLevel *bdata = create_OrgMinimaUtilsTestsCascaderBlockLevel_init();
  bdata->mBlockLevel_ = 0;
  bdata->mBlockNumber_ = 0;
  bdata->mBlockDifficulty_ = 1;
  bdata->mPreviousBlock_ = 0;
  OrgMinimaUtilsTestsCascaderBlock *mGenesisBlock = create_OrgMinimaUtilsTestsCascaderBlock_init();
  mGenesisBlock->mMaxBlockLevel_ = 0;
  IOSObjectArray_Set(nil_chk(mGenesisBlock->mBlockLevels_), 0, bdata);
  mGenesisBlock->mBlockHash_ = [rand nextDouble];
  [Blocks addWithId:mGenesisBlock];
  OrgMinimaUtilsTestsCascaderBlock *currentblock = mGenesisBlock;
  OrgMinimaUtilsTestsCascaderBlock *lastBlock;
  for (jint i = 1; i < OrgMinimaUtilsTestsCascaderExactPOWCascader_NUMBER_BLOCKS; i++) {
    lastBlock = currentblock;
    jint currentmax = lastBlock->mMaxBlockLevel_;
    jint level = [lastBlock getBlockLevel];
    if (level >= currentmax) {
      level = currentmax + 1;
    }
    else {
      level = currentmax;
    }
    if (level > OrgMinimaUtilsTestsCascaderExactPOWCascader_MAX_BLOCK_LEVEL) {
      level = OrgMinimaUtilsTestsCascaderExactPOWCascader_MAX_BLOCK_LEVEL;
    }
    currentblock = create_OrgMinimaUtilsTestsCascaderBlock_init();
    currentblock->mMaxBlockLevel_ = level;
    currentblock->mBlockHash_ = [rand nextDouble];
    for (jint lev = 0; lev <= level; lev++) {
      OrgMinimaUtilsTestsCascaderBlockLevel *bl = create_OrgMinimaUtilsTestsCascaderBlockLevel_init();
      bl->mBlockLevel_ = lev;
      bl->mPreviousBlock_ = 0;
      if (lev == 0) {
        bl->mBlockDifficulty_ = 1.0;
      }
      else {
        jint lastblock = IOSIntArray_Get(mLastLevelBlock, lev);
        if (i - lastblock < 2) {
          bl->mBlockDifficulty_ = 0;
        }
        else {
          JavaUtilArrayList *betwixt = OrgMinimaUtilsTestsCascaderExactPOWCascader_getAllLevelBlocksWithJavaUtilArrayList_withInt_withInt_withInt_(Blocks, lev - 1, lastblock, i);
          jdouble totaldiff = 0;
          for (OrgMinimaUtilsTestsCascaderBlock * __strong bb in nil_chk(betwixt)) {
            JrePlusAssignDoubleD(&totaldiff, ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(bb))->mBlockLevels_), lev - 1)))->mBlockDifficulty_);
          }
          bl->mBlockDifficulty_ = totaldiff;
        }
      }
      if (lev <= currentmax) {
        bl->mBlockNumber_ = ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(lastBlock->mBlockLevels_), lev)))->mBlockNumber_ + 1;
      }
      else {
        bl->mBlockNumber_ = 0;
      }
      IOSObjectArray_Set(nil_chk(currentblock->mBlockLevels_), lev, bl);
    }
    jint blevel = [currentblock getBlockLevel];
    for (jint bl = 0; bl < blevel; bl++) {
      *IOSIntArray_GetRef(mLastLevelBlock, bl) = i;
    }
    [Blocks addWithId:currentblock];
  }
  jint counter = 0;
  jint level = 0;
  jint levelcounter = 0;
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"Original Blocks");
  jdouble totalpow = 0;
  jboolean limitreached = false;
  jint numblock = [Blocks size];
  for (jint nblk = 0; nblk < numblock; nblk++) {
    OrgMinimaUtilsTestsCascaderBlock *blk = [Blocks getWithInt:nblk];
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$@", counter, @") ", blk));
    JrePlusAssignDoubleD(&totalpow, ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(blk))->mBlockLevels_), 0)))->mBlockDifficulty_);
    counter++;
    jint blevel = [blk getBlockLevel];
    if (blevel >= level) {
      [BlocksCascading addWithId:blk];
      if (limitreached) {
        if (blevel > level) {
          level++;
          levelcounter = 0;
          limitreached = false;
        }
      }
      else {
        levelcounter++;
      }
      blk->mFinalWeight_ = ((OrgMinimaUtilsTestsCascaderBlockLevel *) nil_chk(IOSObjectArray_Get(nil_chk(blk->mBlockLevels_), level)))->mBlockDifficulty_;
      if (levelcounter > 10) {
        limitreached = true;
      }
    }
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D", @"Total POW ", totalpow));
  jdouble tot = totalpow;
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"Cascading Chain Blocks");
  counter = 0;
  totalpow = 0;
  for (OrgMinimaUtilsTestsCascaderBlock * __strong cblk in BlocksCascading) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("I$@", counter, @") ", cblk));
    JrePlusAssignDoubleD(&totalpow, ((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(cblk))->mFinalWeight_);
    counter++;
  }
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D", @"Total POW ", totalpow));
  OrgMinimaUtilsTestsCascaderExactPOWCascader_POWRatio = totalpow / tot;
  OrgMinimaUtilsTestsCascaderExactPOWCascader_BLKNUMRatio = (jdouble) [BlocksCascading size] / (jdouble) [Blocks size];
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"Ratio Cascading Chain VS Full block chain");
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$FC", @"Number of blocks : ", (jfloat) (OrgMinimaUtilsTestsCascaderExactPOWCascader_BLKNUMRatio * 100), '%'));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$FC", @"Stored POW       : ", (jfloat) (OrgMinimaUtilsTestsCascaderExactPOWCascader_POWRatio * 100), '%'));
}

JavaUtilArrayList *OrgMinimaUtilsTestsCascaderExactPOWCascader_getAllLevelBlocksWithJavaUtilArrayList_withInt_withInt_withInt_(JavaUtilArrayList *zOriginal, jint zLevel, jint zStart, jint zEnd) {
  OrgMinimaUtilsTestsCascaderExactPOWCascader_initialize();
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (jint bl = zStart; bl < zEnd; bl++) {
    OrgMinimaUtilsTestsCascaderBlock *blk = [((JavaUtilArrayList *) nil_chk(zOriginal)) getWithInt:bl];
    if ([((OrgMinimaUtilsTestsCascaderBlock *) nil_chk(blk)) getBlockLevel] == zLevel) {
      [ret addWithId:blk];
    }
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsCascaderExactPOWCascader)
