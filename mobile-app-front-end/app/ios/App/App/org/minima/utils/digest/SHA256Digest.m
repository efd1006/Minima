//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/digest/SHA256Digest.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/minima/utils/digest/GeneralDigest.h"
#include "org/minima/utils/digest/Memoable.h"
#include "org/minima/utils/digest/Pack.h"
#include "org/minima/utils/digest/SHA256Digest.h"

static void (*OrgMinimaUtilsDigestSHA256Digest_super$_copyInWithOrgMinimaUtilsDigestGeneralDigest_)(id, SEL, id);

@interface OrgMinimaUtilsDigestSHA256Digest () {
 @public
  jint H1_;
  jint H2_;
  jint H3_;
  jint H4_;
  jint H5_;
  jint H6_;
  jint H7_;
  jint H8_;
  IOSIntArray *X_;
  jint xOff_;
}

- (void)copyInWithOrgMinimaUtilsDigestSHA256Digest:(OrgMinimaUtilsDigestSHA256Digest *)t OBJC_METHOD_FAMILY_NONE;

+ (jint)ChWithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z;

+ (jint)MajWithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z;

+ (jint)Sum0WithInt:(jint)x;

+ (jint)Sum1WithInt:(jint)x;

+ (jint)Theta0WithInt:(jint)x;

+ (jint)Theta1WithInt:(jint)x;

@end

J2OBJC_FIELD_SETTER(OrgMinimaUtilsDigestSHA256Digest, X_, IOSIntArray *)

inline jint OrgMinimaUtilsDigestSHA256Digest_get_DIGEST_LENGTH(void);
#define OrgMinimaUtilsDigestSHA256Digest_DIGEST_LENGTH 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsDigestSHA256Digest, DIGEST_LENGTH, jint)

__attribute__((unused)) static void OrgMinimaUtilsDigestSHA256Digest_copyInWithOrgMinimaUtilsDigestSHA256Digest_(OrgMinimaUtilsDigestSHA256Digest *self, OrgMinimaUtilsDigestSHA256Digest *t);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(jint x, jint y, jint z);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(jint x, jint y, jint z);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(jint x);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(jint x);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_Theta0WithInt_(jint x);

__attribute__((unused)) static jint OrgMinimaUtilsDigestSHA256Digest_Theta1WithInt_(jint x);

J2OBJC_INITIALIZED_DEFN(OrgMinimaUtilsDigestSHA256Digest)

IOSIntArray *OrgMinimaUtilsDigestSHA256Digest_K;

@implementation OrgMinimaUtilsDigestSHA256Digest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsDigestSHA256Digest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaUtilsDigestSHA256Digest:(OrgMinimaUtilsDigestSHA256Digest *)t {
  OrgMinimaUtilsDigestSHA256Digest_initWithOrgMinimaUtilsDigestSHA256Digest_(self, t);
  return self;
}

- (void)copyInWithOrgMinimaUtilsDigestSHA256Digest:(OrgMinimaUtilsDigestSHA256Digest *)t {
  OrgMinimaUtilsDigestSHA256Digest_copyInWithOrgMinimaUtilsDigestSHA256Digest_(self, t);
}

- (instancetype)initWithByteArray:(IOSByteArray *)encodedState {
  OrgMinimaUtilsDigestSHA256Digest_initWithByteArray_(self, encodedState);
  return self;
}

- (NSString *)getAlgorithmName {
  return @"SHA-256";
}

- (jint)getDigestSize {
  return OrgMinimaUtilsDigestSHA256Digest_DIGEST_LENGTH;
}

- (void)processWordWithByteArray:(IOSByteArray *)inArg
                         withInt:(jint)inOff {
  jint n = JreLShift32(IOSByteArray_Get(nil_chk(inArg), inOff), 24);
  n |= JreLShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 16);
  n |= JreLShift32((IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff), 8);
  n |= (IOSByteArray_Get(inArg, ++inOff) & (jint) 0xff);
  *IOSIntArray_GetRef(nil_chk(X_), xOff_) = n;
  if (++xOff_ == 16) {
    [self processBlock];
  }
}

- (void)processLengthWithLong:(jlong)bitLength {
  if (xOff_ > 14) {
    [self processBlock];
  }
  *IOSIntArray_GetRef(nil_chk(X_), 14) = (jint) (JreURShift64(bitLength, 32));
  *IOSIntArray_GetRef(X_, 15) = (jint) (bitLength & (jint) 0xffffffff);
}

- (jint)doFinalWithByteArray:(IOSByteArray *)outArg
                     withInt:(jint)outOff {
  [self finish];
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, outArg, outOff);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, outArg, outOff + 4);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, outArg, outOff + 8);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, outArg, outOff + 12);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, outArg, outOff + 16);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H6_, outArg, outOff + 20);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H7_, outArg, outOff + 24);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H8_, outArg, outOff + 28);
  [self reset];
  return OrgMinimaUtilsDigestSHA256Digest_DIGEST_LENGTH;
}

- (void)reset {
  [super reset];
  H1_ = (jint) 0x6a09e667;
  H2_ = (jint) 0xbb67ae85;
  H3_ = (jint) 0x3c6ef372;
  H4_ = (jint) 0xa54ff53a;
  H5_ = (jint) 0x510e527f;
  H6_ = (jint) 0x9b05688c;
  H7_ = (jint) 0x1f83d9ab;
  H8_ = (jint) 0x5be0cd19;
  xOff_ = 0;
  for (jint i = 0; i != ((IOSIntArray *) nil_chk(X_))->size_; i++) {
    *IOSIntArray_GetRef(X_, i) = 0;
  }
}

- (void)processBlock {
  for (jint t = 16; t <= 63; t++) {
    *IOSIntArray_GetRef(nil_chk(X_), t) = OrgMinimaUtilsDigestSHA256Digest_Theta1WithInt_(IOSIntArray_Get(X_, t - 2)) + IOSIntArray_Get(nil_chk(X_), t - 7) + OrgMinimaUtilsDigestSHA256Digest_Theta0WithInt_(IOSIntArray_Get(X_, t - 15)) + IOSIntArray_Get(nil_chk(X_), t - 16);
  }
  jint a = H1_;
  jint b = H2_;
  jint c = H3_;
  jint d = H4_;
  jint e = H5_;
  jint f = H6_;
  jint g = H7_;
  jint h = H8_;
  jint t = 0;
  for (jint i = 0; i < 8; i++) {
    h += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(e) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(e, f, g) + IOSIntArray_Get(nil_chk(OrgMinimaUtilsDigestSHA256Digest_K), t) + IOSIntArray_Get(nil_chk(X_), t);
    d += h;
    h += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(a) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(a, b, c);
    ++t;
    g += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(d) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(d, e, f) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    c += g;
    g += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(h) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(h, a, b);
    ++t;
    f += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(c) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(c, d, e) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    b += f;
    f += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(g) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(g, h, a);
    ++t;
    e += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(b) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(b, c, d) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    a += e;
    e += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(f) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(f, g, h);
    ++t;
    d += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(a) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(a, b, c) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    h += d;
    d += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(e) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(e, f, g);
    ++t;
    c += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(h) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(h, a, b) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    g += c;
    c += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(d) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(d, e, f);
    ++t;
    b += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(g) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(g, h, a) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    f += b;
    b += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(c) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(c, d, e);
    ++t;
    a += OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(f) + OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(f, g, h) + IOSIntArray_Get(OrgMinimaUtilsDigestSHA256Digest_K, t) + IOSIntArray_Get(nil_chk(X_), t);
    e += a;
    a += OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(b) + OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(b, c, d);
    ++t;
  }
  H1_ += a;
  H2_ += b;
  H3_ += c;
  H4_ += d;
  H5_ += e;
  H6_ += f;
  H7_ += g;
  H8_ += h;
  xOff_ = 0;
  for (jint i = 0; i < 16; i++) {
    *IOSIntArray_GetRef(nil_chk(X_), i) = 0;
  }
}

+ (jint)ChWithInt:(jint)x
          withInt:(jint)y
          withInt:(jint)z {
  return OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(x, y, z);
}

+ (jint)MajWithInt:(jint)x
           withInt:(jint)y
           withInt:(jint)z {
  return OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(x, y, z);
}

+ (jint)Sum0WithInt:(jint)x {
  return OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(x);
}

+ (jint)Sum1WithInt:(jint)x {
  return OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(x);
}

+ (jint)Theta0WithInt:(jint)x {
  return OrgMinimaUtilsDigestSHA256Digest_Theta0WithInt_(x);
}

+ (jint)Theta1WithInt:(jint)x {
  return OrgMinimaUtilsDigestSHA256Digest_Theta1WithInt_(x);
}

- (id<OrgMinimaUtilsDigestMemoable>)copy__ {
  return new_OrgMinimaUtilsDigestSHA256Digest_initWithOrgMinimaUtilsDigestSHA256Digest_(self);
}

- (void)resetWithOrgMinimaUtilsDigestMemoable:(id<OrgMinimaUtilsDigestMemoable>)other {
  OrgMinimaUtilsDigestSHA256Digest *d = (OrgMinimaUtilsDigestSHA256Digest *) cast_chk(other, [OrgMinimaUtilsDigestSHA256Digest class]);
  OrgMinimaUtilsDigestSHA256Digest_copyInWithOrgMinimaUtilsDigestSHA256Digest_(self, d);
}

- (IOSByteArray *)getEncodedState {
  IOSByteArray *state = [IOSByteArray newArrayWithLength:52 + xOff_ * 4];
  [super populateStateWithByteArray:state];
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H1_, state, 16);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H2_, state, 20);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H3_, state, 24);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H4_, state, 28);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H5_, state, 32);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H6_, state, 36);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H7_, state, 40);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(H8_, state, 44);
  OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(xOff_, state, 48);
  for (jint i = 0; i != xOff_; i++) {
    OrgMinimaUtilsDigestPack_intToBigEndianWithInt_withByteArray_withInt_(IOSIntArray_Get(nil_chk(X_), i), state, 52 + (i * 4));
  }
  return state;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 13, 12, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 14, 12, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 15, 12, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsDigestMemoable;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaUtilsDigestSHA256Digest:);
  methods[2].selector = @selector(copyInWithOrgMinimaUtilsDigestSHA256Digest:);
  methods[3].selector = @selector(initWithByteArray:);
  methods[4].selector = @selector(getAlgorithmName);
  methods[5].selector = @selector(getDigestSize);
  methods[6].selector = @selector(processWordWithByteArray:withInt:);
  methods[7].selector = @selector(processLengthWithLong:);
  methods[8].selector = @selector(doFinalWithByteArray:withInt:);
  methods[9].selector = @selector(reset);
  methods[10].selector = @selector(processBlock);
  methods[11].selector = @selector(ChWithInt:withInt:withInt:);
  methods[12].selector = @selector(MajWithInt:withInt:withInt:);
  methods[13].selector = @selector(Sum0WithInt:);
  methods[14].selector = @selector(Sum1WithInt:);
  methods[15].selector = @selector(Theta0WithInt:);
  methods[16].selector = @selector(Theta1WithInt:);
  methods[17].selector = @selector(copy__);
  methods[18].selector = @selector(resetWithOrgMinimaUtilsDigestMemoable:);
  methods[19].selector = @selector(getEncodedState);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DIGEST_LENGTH", "I", .constantValue.asInt = OrgMinimaUtilsDigestSHA256Digest_DIGEST_LENGTH, 0x1a, -1, -1, -1, -1 },
    { "H1_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H2_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H3_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H4_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H5_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H6_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H7_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "H8_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "X_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xOff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "K", "[I", .constantValue.asLong = 0, 0x18, -1, 19, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaUtilsDigestSHA256Digest;", "copyIn", "[B", "processWord", "[BI", "processLength", "J", "doFinal", "Ch", "III", "Maj", "Sum0", "I", "Sum1", "Theta0", "Theta1", "copy", "reset", "LOrgMinimaUtilsDigestMemoable;", &OrgMinimaUtilsDigestSHA256Digest_K };
  static const J2ObjcClassInfo _OrgMinimaUtilsDigestSHA256Digest = { "SHA256Digest", "org.minima.utils.digest", ptrTable, methods, fields, 7, 0x1, 20, 12, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsDigestSHA256Digest;
}

+ (void)initialize {
  if (self == [OrgMinimaUtilsDigestSHA256Digest class]) {
    OrgMinimaUtilsDigestSHA256Digest_super$_copyInWithOrgMinimaUtilsDigestGeneralDigest_ = (void (*)(id, SEL, id))[OrgMinimaUtilsDigestGeneralDigest instanceMethodForSelector:@selector(copyInWithOrgMinimaUtilsDigestGeneralDigest:)];
    OrgMinimaUtilsDigestSHA256Digest_K = [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x428a2f98, (jint) 0x71374491, (jint) 0xb5c0fbcf, (jint) 0xe9b5dba5, (jint) 0x3956c25b, (jint) 0x59f111f1, (jint) 0x923f82a4, (jint) 0xab1c5ed5, (jint) 0xd807aa98, (jint) 0x12835b01, (jint) 0x243185be, (jint) 0x550c7dc3, (jint) 0x72be5d74, (jint) 0x80deb1fe, (jint) 0x9bdc06a7, (jint) 0xc19bf174, (jint) 0xe49b69c1, (jint) 0xefbe4786, (jint) 0x0fc19dc6, (jint) 0x240ca1cc, (jint) 0x2de92c6f, (jint) 0x4a7484aa, (jint) 0x5cb0a9dc, (jint) 0x76f988da, (jint) 0x983e5152, (jint) 0xa831c66d, (jint) 0xb00327c8, (jint) 0xbf597fc7, (jint) 0xc6e00bf3, (jint) 0xd5a79147, (jint) 0x06ca6351, (jint) 0x14292967, (jint) 0x27b70a85, (jint) 0x2e1b2138, (jint) 0x4d2c6dfc, (jint) 0x53380d13, (jint) 0x650a7354, (jint) 0x766a0abb, (jint) 0x81c2c92e, (jint) 0x92722c85, (jint) 0xa2bfe8a1, (jint) 0xa81a664b, (jint) 0xc24b8b70, (jint) 0xc76c51a3, (jint) 0xd192e819, (jint) 0xd6990624, (jint) 0xf40e3585, (jint) 0x106aa070, (jint) 0x19a4c116, (jint) 0x1e376c08, (jint) 0x2748774c, (jint) 0x34b0bcb5, (jint) 0x391c0cb3, (jint) 0x4ed8aa4a, (jint) 0x5b9cca4f, (jint) 0x682e6ff3, (jint) 0x748f82ee, (jint) 0x78a5636f, (jint) 0x84c87814, (jint) 0x8cc70208, (jint) 0x90befffa, (jint) 0xa4506ceb, (jint) 0xbef9a3f7, (jint) 0xc67178f2 } count:64];
    J2OBJC_SET_INITIALIZED(OrgMinimaUtilsDigestSHA256Digest)
  }
}

@end

void OrgMinimaUtilsDigestSHA256Digest_init(OrgMinimaUtilsDigestSHA256Digest *self) {
  OrgMinimaUtilsDigestGeneralDigest_init(self);
  self->X_ = [IOSIntArray newArrayWithLength:64];
  [self reset];
}

OrgMinimaUtilsDigestSHA256Digest *new_OrgMinimaUtilsDigestSHA256Digest_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsDigestSHA256Digest, init)
}

OrgMinimaUtilsDigestSHA256Digest *create_OrgMinimaUtilsDigestSHA256Digest_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsDigestSHA256Digest, init)
}

void OrgMinimaUtilsDigestSHA256Digest_initWithOrgMinimaUtilsDigestSHA256Digest_(OrgMinimaUtilsDigestSHA256Digest *self, OrgMinimaUtilsDigestSHA256Digest *t) {
  OrgMinimaUtilsDigestGeneralDigest_initWithOrgMinimaUtilsDigestGeneralDigest_(self, t);
  self->X_ = [IOSIntArray newArrayWithLength:64];
  OrgMinimaUtilsDigestSHA256Digest_copyInWithOrgMinimaUtilsDigestSHA256Digest_(self, t);
}

OrgMinimaUtilsDigestSHA256Digest *new_OrgMinimaUtilsDigestSHA256Digest_initWithOrgMinimaUtilsDigestSHA256Digest_(OrgMinimaUtilsDigestSHA256Digest *t) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsDigestSHA256Digest, initWithOrgMinimaUtilsDigestSHA256Digest_, t)
}

OrgMinimaUtilsDigestSHA256Digest *create_OrgMinimaUtilsDigestSHA256Digest_initWithOrgMinimaUtilsDigestSHA256Digest_(OrgMinimaUtilsDigestSHA256Digest *t) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsDigestSHA256Digest, initWithOrgMinimaUtilsDigestSHA256Digest_, t)
}

void OrgMinimaUtilsDigestSHA256Digest_copyInWithOrgMinimaUtilsDigestSHA256Digest_(OrgMinimaUtilsDigestSHA256Digest *self, OrgMinimaUtilsDigestSHA256Digest *t) {
  OrgMinimaUtilsDigestSHA256Digest_super$_copyInWithOrgMinimaUtilsDigestGeneralDigest_(self, @selector(copyInWithOrgMinimaUtilsDigestGeneralDigest:), t);
  self->H1_ = ((OrgMinimaUtilsDigestSHA256Digest *) nil_chk(t))->H1_;
  self->H2_ = t->H2_;
  self->H3_ = t->H3_;
  self->H4_ = t->H4_;
  self->H5_ = t->H5_;
  self->H6_ = t->H6_;
  self->H7_ = t->H7_;
  self->H8_ = t->H8_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(t->X_, 0, self->X_, 0, ((IOSIntArray *) nil_chk(t->X_))->size_);
  self->xOff_ = t->xOff_;
}

void OrgMinimaUtilsDigestSHA256Digest_initWithByteArray_(OrgMinimaUtilsDigestSHA256Digest *self, IOSByteArray *encodedState) {
  OrgMinimaUtilsDigestGeneralDigest_initWithByteArray_(self, encodedState);
  self->X_ = [IOSIntArray newArrayWithLength:64];
  self->H1_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 16);
  self->H2_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 20);
  self->H3_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 24);
  self->H4_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 28);
  self->H5_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 32);
  self->H6_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 36);
  self->H7_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 40);
  self->H8_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 44);
  self->xOff_ = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 48);
  for (jint i = 0; i != self->xOff_; i++) {
    *IOSIntArray_GetRef(nil_chk(self->X_), i) = OrgMinimaUtilsDigestPack_bigEndianToIntWithByteArray_withInt_(encodedState, 52 + (i * 4));
  }
}

OrgMinimaUtilsDigestSHA256Digest *new_OrgMinimaUtilsDigestSHA256Digest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsDigestSHA256Digest, initWithByteArray_, encodedState)
}

OrgMinimaUtilsDigestSHA256Digest *create_OrgMinimaUtilsDigestSHA256Digest_initWithByteArray_(IOSByteArray *encodedState) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsDigestSHA256Digest, initWithByteArray_, encodedState)
}

jint OrgMinimaUtilsDigestSHA256Digest_ChWithInt_withInt_withInt_(jint x, jint y, jint z) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return (x & y) ^ ((~x) & z);
}

jint OrgMinimaUtilsDigestSHA256Digest_MajWithInt_withInt_withInt_(jint x, jint y, jint z) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return (x & y) | (z & (x ^ y));
}

jint OrgMinimaUtilsDigestSHA256Digest_Sum0WithInt_(jint x) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return ((JreURShift32(x, 2)) | (JreLShift32(x, 30))) ^ ((JreURShift32(x, 13)) | (JreLShift32(x, 19))) ^ ((JreURShift32(x, 22)) | (JreLShift32(x, 10)));
}

jint OrgMinimaUtilsDigestSHA256Digest_Sum1WithInt_(jint x) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return ((JreURShift32(x, 6)) | (JreLShift32(x, 26))) ^ ((JreURShift32(x, 11)) | (JreLShift32(x, 21))) ^ ((JreURShift32(x, 25)) | (JreLShift32(x, 7)));
}

jint OrgMinimaUtilsDigestSHA256Digest_Theta0WithInt_(jint x) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return ((JreURShift32(x, 7)) | (JreLShift32(x, 25))) ^ ((JreURShift32(x, 18)) | (JreLShift32(x, 14))) ^ (JreURShift32(x, 3));
}

jint OrgMinimaUtilsDigestSHA256Digest_Theta1WithInt_(jint x) {
  OrgMinimaUtilsDigestSHA256Digest_initialize();
  return ((JreURShift32(x, 17)) | (JreLShift32(x, 15))) ^ ((JreURShift32(x, 19)) | (JreLShift32(x, 13))) ^ (JreURShift32(x, 10));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsDigestSHA256Digest)
