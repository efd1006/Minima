//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/tests/chatter/ChatterServer.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "java/net/InetAddress.h"
#include "java/net/InetSocketAddress.h"
#include "java/net/ServerSocket.h"
#include "java/net/Socket.h"
#include "java/nio/Buffer.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/channels/ClosedChannelException.h"
#include "java/nio/channels/SelectableChannel.h"
#include "java/nio/channels/SelectionKey.h"
#include "java/nio/channels/Selector.h"
#include "java/nio/channels/ServerSocketChannel.h"
#include "java/nio/channels/SocketChannel.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/minima/utils/tests/chatter/ChatterServer.h"

@interface OrgMinimaUtilsTestsChatterChatterServer () {
 @public
  JavaUtilLoggingLogger *log_;
  JavaNioChannelsServerSocketChannel *mSockChan_;
  JavaNioChannelsSelector *mSelector_;
  JavaNioChannelsSelectionKey *mSelectKey_;
  jboolean mRunning_;
  JavaUtilLinkedList *clients_;
  JavaNioByteBuffer *readBuffer_;
  JavaNioByteBuffer *writeBuffer_;
  JavaNioCharsetCharsetDecoder *asciiDecoder_;
}

- (void)initServerSocket OBJC_METHOD_FAMILY_NONE;

- (void)acceptNewConnections;

- (void)readIncomingMessages;

- (void)addNewClientWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)chan;

- (void)sendMessageWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                                       withNSString:(NSString *)mesg;

- (void)sendBroadcastMessageWithNSString:(NSString *)mesg
        withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)from;

- (void)prepWriteBufferWithNSString:(NSString *)mesg;

- (void)channelWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                               withJavaNioByteBuffer:(JavaNioByteBuffer *)writeBuffer;

@end

J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, log_, JavaUtilLoggingLogger *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, mSockChan_, JavaNioChannelsServerSocketChannel *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, mSelector_, JavaNioChannelsSelector *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, mSelectKey_, JavaNioChannelsSelectionKey *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, clients_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, readBuffer_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, writeBuffer_, JavaNioByteBuffer *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsTestsChatterChatterServer, asciiDecoder_, JavaNioCharsetCharsetDecoder *)

inline jint OrgMinimaUtilsTestsChatterChatterServer_get_BUFFER_SIZE(void);
#define OrgMinimaUtilsTestsChatterChatterServer_BUFFER_SIZE 255
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsTestsChatterChatterServer, BUFFER_SIZE, jint)

inline jlong OrgMinimaUtilsTestsChatterChatterServer_get_CHANNEL_WRITE_SLEEP(void);
#define OrgMinimaUtilsTestsChatterChatterServer_CHANNEL_WRITE_SLEEP 10LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsTestsChatterChatterServer, CHANNEL_WRITE_SLEEP, jlong)

inline jint OrgMinimaUtilsTestsChatterChatterServer_get_PORT(void);
#define OrgMinimaUtilsTestsChatterChatterServer_PORT 10997
J2OBJC_STATIC_FIELD_CONSTANT(OrgMinimaUtilsTestsChatterChatterServer, PORT, jint)

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_initServerSocket(OrgMinimaUtilsTestsChatterChatterServer *self);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_acceptNewConnections(OrgMinimaUtilsTestsChatterChatterServer *self);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_readIncomingMessages(OrgMinimaUtilsTestsChatterChatterServer *self);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_addNewClientWithJavaNioChannelsSocketChannel_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *chan);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_sendMessageWithJavaNioChannelsSocketChannel_withNSString_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *channel, NSString *mesg);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(OrgMinimaUtilsTestsChatterChatterServer *self, NSString *mesg, JavaNioChannelsSocketChannel *from);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_prepWriteBufferWithNSString_(OrgMinimaUtilsTestsChatterChatterServer *self, NSString *mesg);

__attribute__((unused)) static void OrgMinimaUtilsTestsChatterChatterServer_channelWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *channel, JavaNioByteBuffer *writeBuffer);

@implementation OrgMinimaUtilsTestsChatterChatterServer

+ (void)logWithNSString:(NSString *)zMsg
  withJavaLangException:(JavaLangException *)zExc {
  OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(zMsg, zExc);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  OrgMinimaUtilsTestsChatterChatterServer_mainWithNSStringArray_(args);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsTestsChatterChatterServer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)initServerSocket {
  OrgMinimaUtilsTestsChatterChatterServer_initServerSocket(self);
}

- (void)run {
  OrgMinimaUtilsTestsChatterChatterServer_initServerSocket(self);
  [((JavaUtilLoggingLogger *) nil_chk(log_)) infoWithNSString:@"ChatterServer running"];
  mRunning_ = true;
  jint numReady = 0;
  while (mRunning_) {
    OrgMinimaUtilsTestsChatterChatterServer_acceptNewConnections(self);
    OrgMinimaUtilsTestsChatterChatterServer_readIncomingMessages(self);
    @try {
      JavaLangThread_sleepWithLong_(100);
    }
    @catch (JavaLangInterruptedException *ie) {
    }
  }
}

- (void)acceptNewConnections {
  OrgMinimaUtilsTestsChatterChatterServer_acceptNewConnections(self);
}

- (void)readIncomingMessages {
  OrgMinimaUtilsTestsChatterChatterServer_readIncomingMessages(self);
}

- (void)addNewClientWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)chan {
  OrgMinimaUtilsTestsChatterChatterServer_addNewClientWithJavaNioChannelsSocketChannel_(self, chan);
}

- (void)sendMessageWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                                       withNSString:(NSString *)mesg {
  OrgMinimaUtilsTestsChatterChatterServer_sendMessageWithJavaNioChannelsSocketChannel_withNSString_(self, channel, mesg);
}

- (void)sendBroadcastMessageWithNSString:(NSString *)mesg
        withJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)from {
  OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(self, mesg, from);
}

- (void)prepWriteBufferWithNSString:(NSString *)mesg {
  OrgMinimaUtilsTestsChatterChatterServer_prepWriteBufferWithNSString_(self, mesg);
}

- (void)channelWriteWithJavaNioChannelsSocketChannel:(JavaNioChannelsSocketChannel *)channel
                               withJavaNioByteBuffer:(JavaNioByteBuffer *)writeBuffer {
  OrgMinimaUtilsTestsChatterChatterServer_channelWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, channel, writeBuffer);
}

- (void)dealloc {
  RELEASE_(log_);
  RELEASE_(mSockChan_);
  RELEASE_(mSelector_);
  RELEASE_(mSelectKey_);
  RELEASE_(clients_);
  RELEASE_(readBuffer_);
  RELEASE_(writeBuffer_);
  RELEASE_(asciiDecoder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(logWithNSString:withJavaLangException:);
  methods[1].selector = @selector(mainWithNSStringArray:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initServerSocket);
  methods[4].selector = @selector(run);
  methods[5].selector = @selector(acceptNewConnections);
  methods[6].selector = @selector(readIncomingMessages);
  methods[7].selector = @selector(addNewClientWithJavaNioChannelsSocketChannel:);
  methods[8].selector = @selector(sendMessageWithJavaNioChannelsSocketChannel:withNSString:);
  methods[9].selector = @selector(sendBroadcastMessageWithNSString:withJavaNioChannelsSocketChannel:);
  methods[10].selector = @selector(prepWriteBufferWithNSString:);
  methods[11].selector = @selector(channelWriteWithJavaNioChannelsSocketChannel:withJavaNioByteBuffer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BUFFER_SIZE", "I", .constantValue.asInt = OrgMinimaUtilsTestsChatterChatterServer_BUFFER_SIZE, 0x1a, -1, -1, -1, -1 },
    { "CHANNEL_WRITE_SLEEP", "J", .constantValue.asLong = OrgMinimaUtilsTestsChatterChatterServer_CHANNEL_WRITE_SLEEP, 0x1a, -1, -1, -1, -1 },
    { "PORT", "I", .constantValue.asInt = OrgMinimaUtilsTestsChatterChatterServer_PORT, 0x1a, -1, -1, -1, -1 },
    { "log_", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSockChan_", "LJavaNioChannelsServerSocketChannel;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelector_", "LJavaNioChannelsSelector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelectKey_", "LJavaNioChannelsSelectionKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRunning_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "clients_", "LJavaUtilLinkedList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "readBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "writeBuffer_", "LJavaNioByteBuffer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "asciiDecoder_", "LJavaNioCharsetCharsetDecoder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "log", "LNSString;LJavaLangException;", "main", "[LNSString;", "addNewClient", "LJavaNioChannelsSocketChannel;", "sendMessage", "LJavaNioChannelsSocketChannel;LNSString;", "sendBroadcastMessage", "LNSString;LJavaNioChannelsSocketChannel;", "prepWriteBuffer", "LNSString;", "channelWrite", "LJavaNioChannelsSocketChannel;LJavaNioByteBuffer;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsTestsChatterChatterServer = { "ChatterServer", "org.minima.utils.tests.chatter", ptrTable, methods, fields, 7, 0x1, 12, 12, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsTestsChatterChatterServer;
}

@end

void OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(NSString *zMsg, JavaLangException *zExc) {
  OrgMinimaUtilsTestsChatterChatterServer_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:zMsg];
  [((JavaLangException *) nil_chk(zExc)) printStackTrace];
}

void OrgMinimaUtilsTestsChatterChatterServer_mainWithNSStringArray_(IOSObjectArray *args) {
  OrgMinimaUtilsTestsChatterChatterServer_initialize();
  OrgMinimaUtilsTestsChatterChatterServer *cs = create_OrgMinimaUtilsTestsChatterChatterServer_init();
  [cs start];
}

void OrgMinimaUtilsTestsChatterChatterServer_init(OrgMinimaUtilsTestsChatterChatterServer *self) {
  JavaLangThread_init(self);
  JreStrongAssign(&self->log_, JavaUtilLoggingLogger_getLoggerWithNSString_(@"ChatServer"));
  JreStrongAssignAndConsume(&self->clients_, new_JavaUtilLinkedList_init());
  JreStrongAssign(&self->readBuffer_, JavaNioByteBuffer_allocateDirectWithInt_(OrgMinimaUtilsTestsChatterChatterServer_BUFFER_SIZE));
  JreStrongAssign(&self->writeBuffer_, JavaNioByteBuffer_allocateDirectWithInt_(OrgMinimaUtilsTestsChatterChatterServer_BUFFER_SIZE));
  JreStrongAssign(&self->asciiDecoder_, [((JavaNioCharsetCharset *) nil_chk(JavaNioCharsetCharset_forNameWithNSString_(@"US-ASCII"))) newDecoder]);
  
  ;
}

OrgMinimaUtilsTestsChatterChatterServer *new_OrgMinimaUtilsTestsChatterChatterServer_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsTestsChatterChatterServer, init)
}

OrgMinimaUtilsTestsChatterChatterServer *create_OrgMinimaUtilsTestsChatterChatterServer_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsTestsChatterChatterServer, init)
}

void OrgMinimaUtilsTestsChatterChatterServer_initServerSocket(OrgMinimaUtilsTestsChatterChatterServer *self) {
  @try {
    JreStrongAssign(&self->mSockChan_, JavaNioChannelsServerSocketChannel_open());
    [((JavaNioChannelsServerSocketChannel *) nil_chk(self->mSockChan_)) configureBlockingWithBoolean:false];
    JavaNetInetAddress *addr = JavaNetInetAddress_getLocalHost();
    [((JavaNetServerSocket *) nil_chk([((JavaNioChannelsServerSocketChannel *) nil_chk(self->mSockChan_)) socket])) bindWithJavaNetSocketAddress:create_JavaNetInetSocketAddress_initWithJavaNetInetAddress_withInt_(addr, OrgMinimaUtilsTestsChatterChatterServer_PORT)];
    JreStrongAssign(&self->mSelector_, JavaNioChannelsSelector_open());
  }
  @catch (JavaLangException *e) {
    OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(@"error initializing server", e);
  }
}

void OrgMinimaUtilsTestsChatterChatterServer_acceptNewConnections(OrgMinimaUtilsTestsChatterChatterServer *self) {
  @try {
    JavaNioChannelsSocketChannel *clientChannel;
    while ((clientChannel = [((JavaNioChannelsServerSocketChannel *) nil_chk(self->mSockChan_)) accept]) != nil) {
      OrgMinimaUtilsTestsChatterChatterServer_addNewClientWithJavaNioChannelsSocketChannel_(self, clientChannel);
      [((JavaUtilLoggingLogger *) nil_chk(self->log_)) infoWithNSString:JreStrcat("$@", @"got connection from: ", [((JavaNetSocket *) nil_chk([((JavaNioChannelsSocketChannel *) nil_chk(clientChannel)) socket])) getInetAddress])];
      OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(self, JreStrcat("$@", @"login from: ", [((JavaNetSocket *) nil_chk([clientChannel socket])) getInetAddress]), clientChannel);
      OrgMinimaUtilsTestsChatterChatterServer_sendMessageWithJavaNioChannelsSocketChannel_withNSString_(self, clientChannel, JreStrcat("$I$", @"\n\nWelcome to ChatterBox, there are ", [((JavaUtilLinkedList *) nil_chk(self->clients_)) size], @" users online.\n"));
      OrgMinimaUtilsTestsChatterChatterServer_sendMessageWithJavaNioChannelsSocketChannel_withNSString_(self, clientChannel, @"Type 'quit' to exit.\n");
    }
  }
  @catch (JavaIoIOException *ioe) {
    OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(@"error during accept(): ", ioe);
  }
  @catch (JavaLangException *e) {
    OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(@"exception in acceptNewConnections()", e);
  }
}

void OrgMinimaUtilsTestsChatterChatterServer_readIncomingMessages(OrgMinimaUtilsTestsChatterChatterServer *self) {
  @try {
    [((JavaNioChannelsSelector *) nil_chk(self->mSelector_)) selectNow];
    id<JavaUtilSet> readyKeys = [((JavaNioChannelsSelector *) nil_chk(self->mSelector_)) selectedKeys];
    id<JavaUtilIterator> i = [((id<JavaUtilSet>) nil_chk(readyKeys)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
      JavaNioChannelsSelectionKey *key = (JavaNioChannelsSelectionKey *) cast_chk([i next], [JavaNioChannelsSelectionKey class]);
      [i remove];
      JavaNioChannelsSocketChannel *channel = (JavaNioChannelsSocketChannel *) cast_chk([((JavaNioChannelsSelectionKey *) nil_chk(key)) channel], [JavaNioChannelsSocketChannel class]);
      [((JavaNioByteBuffer *) nil_chk(self->readBuffer_)) clear];
      jlong nbytes = [((JavaNioChannelsSocketChannel *) nil_chk(channel)) readWithJavaNioByteBuffer:self->readBuffer_];
      if (nbytes == -1) {
        [((JavaUtilLoggingLogger *) nil_chk(self->log_)) infoWithNSString:JreStrcat("$@$", @"disconnect: ", [((JavaNetSocket *) nil_chk([channel socket])) getInetAddress], @", end-of-stream")];
        [channel close];
        [((JavaUtilLinkedList *) nil_chk(self->clients_)) removeWithId:channel];
        OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(self, JreStrcat("$@", @"logout: ", [((JavaNetSocket *) nil_chk([channel socket])) getInetAddress]), channel);
      }
      else {
        JavaLangStringBuffer *sb = (JavaLangStringBuffer *) cast_chk([key attachment], [JavaLangStringBuffer class]);
        [((JavaNioByteBuffer *) nil_chk(self->readBuffer_)) flip];
        NSString *str = [((JavaNioCharBuffer *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk(self->asciiDecoder_)) decodeWithJavaNioByteBuffer:self->readBuffer_])) description];
        [((JavaNioByteBuffer *) nil_chk(self->readBuffer_)) clear];
        [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:str];
        NSString *line = [sb description];
        if (([((NSString *) nil_chk(line)) java_indexOfString:@"\n"] != -1) || ([line java_indexOfString:@"\x0d"] != -1)) {
          line = [line java_trim];
          if ([((NSString *) nil_chk(line)) java_hasPrefix:@"quit"]) {
            [((JavaUtilLoggingLogger *) nil_chk(self->log_)) infoWithNSString:JreStrcat("$@", @"got quit msg, closing channel for : ", [((JavaNetSocket *) nil_chk([channel socket])) getInetAddress])];
            [channel close];
            [((JavaUtilLinkedList *) nil_chk(self->clients_)) removeWithId:channel];
            OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(self, JreStrcat("$@", @"logout: ", [((JavaNetSocket *) nil_chk([channel socket])) getInetAddress]), channel);
          }
          else {
            [((JavaUtilLoggingLogger *) nil_chk(self->log_)) infoWithNSString:JreStrcat("$$", @"broadcasting: ", line)];
            OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(self, JreStrcat("@$$", [((JavaNetSocket *) nil_chk([channel socket])) getInetAddress], @": ", line), channel);
            [sb delete__WithInt:0 withInt:[sb java_length]];
          }
        }
      }
    }
  }
  @catch (JavaIoIOException *ioe) {
    OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(@"error during select(): ", ioe);
  }
  @catch (JavaLangException *e) {
    OrgMinimaUtilsTestsChatterChatterServer_logWithNSString_withJavaLangException_(@"exception in run()", e);
  }
}

void OrgMinimaUtilsTestsChatterChatterServer_addNewClientWithJavaNioChannelsSocketChannel_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *chan) {
  [((JavaUtilLinkedList *) nil_chk(self->clients_)) addWithId:chan];
  @try {
    [((JavaNioChannelsSocketChannel *) nil_chk(chan)) configureBlockingWithBoolean:false];
    JavaNioChannelsSelectionKey *readKey = [chan register__WithJavaNioChannelsSelector:self->mSelector_ withInt:JavaNioChannelsSelectionKey_OP_READ withId:create_JavaLangStringBuffer_init()];
  }
  @catch (JavaNioChannelsClosedChannelException *cce) {
  }
  @catch (JavaIoIOException *ioe) {
  }
}

void OrgMinimaUtilsTestsChatterChatterServer_sendMessageWithJavaNioChannelsSocketChannel_withNSString_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *channel, NSString *mesg) {
  OrgMinimaUtilsTestsChatterChatterServer_prepWriteBufferWithNSString_(self, mesg);
  OrgMinimaUtilsTestsChatterChatterServer_channelWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, channel, self->writeBuffer_);
}

void OrgMinimaUtilsTestsChatterChatterServer_sendBroadcastMessageWithNSString_withJavaNioChannelsSocketChannel_(OrgMinimaUtilsTestsChatterChatterServer *self, NSString *mesg, JavaNioChannelsSocketChannel *from) {
  OrgMinimaUtilsTestsChatterChatterServer_prepWriteBufferWithNSString_(self, mesg);
  id<JavaUtilIterator> i = [((JavaUtilLinkedList *) nil_chk(self->clients_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    JavaNioChannelsSocketChannel *channel = (JavaNioChannelsSocketChannel *) cast_chk([i next], [JavaNioChannelsSocketChannel class]);
    if (channel != from) OrgMinimaUtilsTestsChatterChatterServer_channelWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(self, channel, self->writeBuffer_);
  }
}

void OrgMinimaUtilsTestsChatterChatterServer_prepWriteBufferWithNSString_(OrgMinimaUtilsTestsChatterChatterServer *self, NSString *mesg) {
  [((JavaNioByteBuffer *) nil_chk(self->writeBuffer_)) clear];
  [((JavaNioByteBuffer *) nil_chk(self->writeBuffer_)) putWithByteArray:[((NSString *) nil_chk(mesg)) java_getBytes]];
  [((JavaNioByteBuffer *) nil_chk(self->writeBuffer_)) putCharWithChar:0x000a];
  [((JavaNioByteBuffer *) nil_chk(self->writeBuffer_)) flip];
}

void OrgMinimaUtilsTestsChatterChatterServer_channelWriteWithJavaNioChannelsSocketChannel_withJavaNioByteBuffer_(OrgMinimaUtilsTestsChatterChatterServer *self, JavaNioChannelsSocketChannel *channel, JavaNioByteBuffer *writeBuffer) {
  jlong nbytes = 0;
  jlong toWrite = [((JavaNioByteBuffer *) nil_chk(writeBuffer)) remaining];
  @try {
    while (nbytes != toWrite) {
      nbytes += [((JavaNioChannelsSocketChannel *) nil_chk(channel)) writeWithJavaNioByteBuffer:writeBuffer];
      @try {
        JavaLangThread_sleepWithLong_(OrgMinimaUtilsTestsChatterChatterServer_CHANNEL_WRITE_SLEEP);
      }
      @catch (JavaLangInterruptedException *e) {
      }
    }
  }
  @catch (JavaNioChannelsClosedChannelException *cce) {
  }
  @catch (JavaLangException *e) {
  }
  [writeBuffer rewind];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsTestsChatterChatterServer)
