//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/utils/messages/Message.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaUtilsMessagesMessage () {
 @public
  NSString *mMessageType_;
  JavaUtilHashMap *mContents_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaUtilsMessagesMessage, mMessageType_, NSString *)
J2OBJC_FIELD_SETTER(OrgMinimaUtilsMessagesMessage, mContents_, JavaUtilHashMap *)

@implementation OrgMinimaUtilsMessagesMessage

- (instancetype)initWithNSString:(NSString *)zMessageType {
  OrgMinimaUtilsMessagesMessage_initWithNSString_(self, zMessageType);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaUtilsMessagesMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setMessageTypeWithNSString:(NSString *)zMessageType {
  JreStrongAssign(&mMessageType_, zMessageType);
}

- (NSString *)getMessageType {
  return mMessageType_;
}

- (jboolean)isMessageTypeWithNSString:(NSString *)zMessageType {
  return ([((NSString *) nil_chk(zMessageType)) isEqual:mMessageType_]);
}

- (OrgMinimaUtilsMessagesMessage *)addObjectWithNSString:(NSString *)zName
                                                  withId:(id)zObject {
  [((JavaUtilHashMap *) nil_chk(mContents_)) putWithId:zName withId:zObject];
  return self;
}

- (OrgMinimaUtilsMessagesMessage *)addIntWithNSString:(NSString *)zName
                                              withInt:(jint)zValue {
  return [self addObjectWithNSString:zName withId:create_JavaLangInteger_initWithInt_(zValue)];
}

- (OrgMinimaUtilsMessagesMessage *)addStringWithNSString:(NSString *)zName
                                            withNSString:(NSString *)zValue {
  return [self addObjectWithNSString:zName withId:[NSString stringWithString:zValue]];
}

- (OrgMinimaUtilsMessagesMessage *)addBooleanWithNSString:(NSString *)zName
                                              withBoolean:(jboolean)zValue {
  return [self addObjectWithNSString:zName withId:create_JavaLangBoolean_initWithBoolean_(zValue)];
}

- (jboolean)existsWithNSString:(NSString *)zVariable {
  return ([self getObjectWithNSString:zVariable] != nil);
}

- (id)getObjectWithNSString:(NSString *)zName {
  return [((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:zName];
}

- (jboolean)getBooleanWithNSString:(NSString *)zName {
  id bool_ = [((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:zName];
  if (bool_ == nil) {
    return false;
  }
  return [((JavaLangBoolean *) cast_chk(bool_, [JavaLangBoolean class])) booleanValue];
}

- (jint)getIntegerWithNSString:(NSString *)zName {
  return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk([((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:zName], [JavaLangInteger class])))) intValue];
}

- (NSString *)getStringWithNSString:(NSString *)zName {
  return ((NSString *) cast_chk([((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:zName], [NSString class]));
}

- (NSString *)description {
  id<JavaUtilSet> keys = [((JavaUtilHashMap *) nil_chk(mContents_)) keySet];
  NSString *contents = @"";
  for (NSString * __strong key in nil_chk(keys)) {
    id obj = [((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:key];
    if (obj != nil) {
      JreStrAppend(&contents, "$C$$", key, ':', [nil_chk([((JavaUtilHashMap *) nil_chk(mContents_)) getWithId:key]) description], @", ");
    }
    else {
      JreStrAppend(&contents, "$$", key, @":null, ");
    }
  }
  return JreStrcat("$$$$$", @"[ ", mMessageType_, @", ", contents, @" ]");
}

- (void)dealloc {
  RELEASE_(mMessageType_);
  RELEASE_(mContents_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsMessagesMessage;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsMessagesMessage;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsMessagesMessage;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsMessagesMessage;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 14, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setMessageTypeWithNSString:);
  methods[3].selector = @selector(getMessageType);
  methods[4].selector = @selector(isMessageTypeWithNSString:);
  methods[5].selector = @selector(addObjectWithNSString:withId:);
  methods[6].selector = @selector(addIntWithNSString:withInt:);
  methods[7].selector = @selector(addStringWithNSString:withNSString:);
  methods[8].selector = @selector(addBooleanWithNSString:withBoolean:);
  methods[9].selector = @selector(existsWithNSString:);
  methods[10].selector = @selector(getObjectWithNSString:);
  methods[11].selector = @selector(getBooleanWithNSString:);
  methods[12].selector = @selector(getIntegerWithNSString:);
  methods[13].selector = @selector(getStringWithNSString:);
  methods[14].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMessageType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContents_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setMessageType", "isMessageType", "addObject", "LNSString;LNSObject;", "addInt", "LNSString;I", "addString", "LNSString;LNSString;", "addBoolean", "LNSString;Z", "exists", "getObject", "getBoolean", "getInteger", "getString", "toString", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgMinimaUtilsMessagesMessage = { "Message", "org.minima.utils.messages", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaUtilsMessagesMessage;
}

@end

void OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaUtilsMessagesMessage *self, NSString *zMessageType) {
  NSObject_init(self);
  JreStrongAssign(&self->mMessageType_, zMessageType);
  JreStrongAssignAndConsume(&self->mContents_, new_JavaUtilHashMap_init());
}

OrgMinimaUtilsMessagesMessage *new_OrgMinimaUtilsMessagesMessage_initWithNSString_(NSString *zMessageType) {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsMessagesMessage, initWithNSString_, zMessageType)
}

OrgMinimaUtilsMessagesMessage *create_OrgMinimaUtilsMessagesMessage_initWithNSString_(NSString *zMessageType) {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsMessagesMessage, initWithNSString_, zMessageType)
}

void OrgMinimaUtilsMessagesMessage_init(OrgMinimaUtilsMessagesMessage *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mMessageType_, @"");
  JreStrongAssignAndConsume(&self->mContents_, new_JavaUtilHashMap_init());
}

OrgMinimaUtilsMessagesMessage *new_OrgMinimaUtilsMessagesMessage_init() {
  J2OBJC_NEW_IMPL(OrgMinimaUtilsMessagesMessage, init)
}

OrgMinimaUtilsMessagesMessage *create_OrgMinimaUtilsMessagesMessage_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaUtilsMessagesMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaUtilsMessagesMessage)
