//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/mmr/MMREntry.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "org/minima/database/mmr/MMRData.h"
#include "org/minima/database/mmr/MMREntry.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/MinimaLogger.h"

inline JavaMathBigInteger *OrgMinimaDatabaseMmrMMREntry_get_MMR_TWO(void);
static JavaMathBigInteger *OrgMinimaDatabaseMmrMMREntry_MMR_TWO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaDatabaseMmrMMREntry, MMR_TWO, JavaMathBigInteger *)

inline JavaMathBigDecimal *OrgMinimaDatabaseMmrMMREntry_get_MMR_TWO_DEC(void);
static JavaMathBigDecimal *OrgMinimaDatabaseMmrMMREntry_MMR_TWO_DEC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMinimaDatabaseMmrMMREntry, MMR_TWO_DEC, JavaMathBigDecimal *)

J2OBJC_INITIALIZED_DEFN(OrgMinimaDatabaseMmrMMREntry)

@implementation OrgMinimaDatabaseMmrMMREntry

- (instancetype)initWithInt:(jint)zRow
withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry {
  OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(self, zRow, zEntry);
  return self;
}

- (jboolean)isEmpty {
  return mIsEmpty_;
}

- (jboolean)checkPositionWithInt:(jint)zRow
withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry {
  return (zRow == mRow_) && [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zEntry)) isEqualWithOrgMinimaObjectsBaseMiniNumber:mEntryNumber_];
}

- (jboolean)checkPositionWithOrgMinimaDatabaseMmrMMREntry:(OrgMinimaDatabaseMmrMMREntry *)zEntry {
  return ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(zEntry)) getRow] == mRow_) && [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([zEntry getEntry])) isEqualWithOrgMinimaObjectsBaseMiniNumber:mEntryNumber_];
}

- (void)setDataWithOrgMinimaDatabaseMmrMMRData:(OrgMinimaDatabaseMmrMMRData *)zData {
  JreStrongAssign(&mData_, zData);
  mIsEmpty_ = false;
}

- (void)clearData {
  mIsEmpty_ = true;
  JreStrongAssign(&mData_, nil);
}

- (OrgMinimaDatabaseMmrMMRData *)getData {
  return mData_;
}

- (void)setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockTime {
  JreStrongAssign(&mBlockTime_, zBlockTime);
}

- (OrgMinimaObjectsBaseMiniNumber *)getBlockTime {
  return mBlockTime_;
}

- (OrgMinimaObjectsBaseMiniHash *)getHashValue {
  if ([self isEmpty]) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"ERROR NULL Entry : ", self));
  }
  return [((OrgMinimaDatabaseMmrMMRData *) nil_chk(mData_)) getFinalHash];
}

- (NSString *)description {
  return JreStrcat("$@$I$@$@", @"BLKTIME:", mBlockTime_, @" R:", mRow_, @" E:", mEntryNumber_, @" D:", mData_);
}

- (OrgMinimaObjectsBaseMiniNumber *)getEntry {
  return mEntryNumber_;
}

- (jint)getRow {
  return mRow_;
}

- (jint)getParentRow {
  return mRow_ + 1;
}

- (jint)getChildRow {
  return mRow_ - 1;
}

- (jboolean)isLeft {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) moduloWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, TWO)])) isEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)];
}

- (jboolean)isRight {
  return ![self isLeft];
}

- (OrgMinimaObjectsBaseMiniNumber *)getLeftSibling {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) subWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE)];
}

- (OrgMinimaObjectsBaseMiniNumber *)getRightSibling {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) addWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE)];
}

- (OrgMinimaObjectsBaseMiniNumber *)getSibling {
  if ([self isLeft]) {
    return [self getRightSibling];
  }
  else {
    return [self getLeftSibling];
  }
}

- (OrgMinimaObjectsBaseMiniNumber *)getParentEntry {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) divRoundDownWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, TWO)];
}

- (OrgMinimaObjectsBaseMiniNumber *)getLeftChildEntry {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) multWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, TWO)];
}

- (OrgMinimaObjectsBaseMiniNumber *)getRightChildEntry {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([self getLeftChildEntry])) addWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE)];
}

- (jint)compareToWithId:(OrgMinimaDatabaseMmrMMREntry *)zEntry {
  cast_chk(zEntry, [OrgMinimaDatabaseMmrMMREntry class]);
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(zEntry)) getEntry])) compareToWithOrgMinimaObjectsBaseMiniNumber:mEntryNumber_];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:mRow_];
  [((OrgMinimaDatabaseMmrMMRData *) nil_chk(mData_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  JreStrongAssign(&mEntryNumber_, OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  mRow_ = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  JreStrongAssign(&mData_, OrgMinimaDatabaseMmrMMRData_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  mIsEmpty_ = false;
}

- (void)dealloc {
  RELEASE_(mEntryNumber_);
  RELEASE_(mBlockTime_);
  RELEASE_(mData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, 11, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withOrgMinimaObjectsBaseMiniNumber:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(checkPositionWithInt:withOrgMinimaObjectsBaseMiniNumber:);
  methods[3].selector = @selector(checkPositionWithOrgMinimaDatabaseMmrMMREntry:);
  methods[4].selector = @selector(setDataWithOrgMinimaDatabaseMmrMMRData:);
  methods[5].selector = @selector(clearData);
  methods[6].selector = @selector(getData);
  methods[7].selector = @selector(setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:);
  methods[8].selector = @selector(getBlockTime);
  methods[9].selector = @selector(getHashValue);
  methods[10].selector = @selector(description);
  methods[11].selector = @selector(getEntry);
  methods[12].selector = @selector(getRow);
  methods[13].selector = @selector(getParentRow);
  methods[14].selector = @selector(getChildRow);
  methods[15].selector = @selector(isLeft);
  methods[16].selector = @selector(isRight);
  methods[17].selector = @selector(getLeftSibling);
  methods[18].selector = @selector(getRightSibling);
  methods[19].selector = @selector(getSibling);
  methods[20].selector = @selector(getParentEntry);
  methods[21].selector = @selector(getLeftChildEntry);
  methods[22].selector = @selector(getRightChildEntry);
  methods[23].selector = @selector(compareToWithId:);
  methods[24].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[25].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MMR_TWO", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "MMR_TWO_DEC", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "mEntryNumber_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRow_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBlockTime_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mData_", "LOrgMinimaDatabaseMmrMMRData;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsEmpty_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILOrgMinimaObjectsBaseMiniNumber;", "checkPosition", "LOrgMinimaDatabaseMmrMMREntry;", "setData", "LOrgMinimaDatabaseMmrMMRData;", "setBlockTime", "LOrgMinimaObjectsBaseMiniNumber;", "toString", "compareTo", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", &OrgMinimaDatabaseMmrMMREntry_MMR_TWO, &OrgMinimaDatabaseMmrMMREntry_MMR_TWO_DEC, "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/minima/database/mmr/MMREntry;>;Lorg/minima/utils/Streamable;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseMmrMMREntry = { "MMREntry", "org.minima.database.mmr", ptrTable, methods, fields, 7, 0x1, 26, 7, -1, -1, -1, 16, -1 };
  return &_OrgMinimaDatabaseMmrMMREntry;
}

+ (void)initialize {
  if (self == [OrgMinimaDatabaseMmrMMREntry class]) {
    JreStrongAssignAndConsume(&OrgMinimaDatabaseMmrMMREntry_MMR_TWO, new_JavaMathBigInteger_initWithNSString_(@"2"));
    JreStrongAssignAndConsume(&OrgMinimaDatabaseMmrMMREntry_MMR_TWO_DEC, new_JavaMathBigDecimal_initWithNSString_(@"2"));
    J2OBJC_SET_INITIALIZED(OrgMinimaDatabaseMmrMMREntry)
  }
}

@end

void OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(OrgMinimaDatabaseMmrMMREntry *self, jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry) {
  NSObject_init(self);
  JreStrongAssign(&self->mBlockTime_, JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO));
  self->mRow_ = zRow;
  JreStrongAssign(&self->mEntryNumber_, zEntry);
  self->mIsEmpty_ = true;
}

OrgMinimaDatabaseMmrMMREntry *new_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMmrMMREntry, initWithInt_withOrgMinimaObjectsBaseMiniNumber_, zRow, zEntry)
}

OrgMinimaDatabaseMmrMMREntry *create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMmrMMREntry, initWithInt_withOrgMinimaObjectsBaseMiniNumber_, zRow, zEntry)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseMmrMMREntry)
