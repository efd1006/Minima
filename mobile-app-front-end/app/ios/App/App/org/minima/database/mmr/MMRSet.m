//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/mmr/MMRSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/mmr/MMRData.h"
#include "org/minima/database/mmr/MMREntry.h"
#include "org/minima/database/mmr/MMRProof.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/MinimaLogger.h"

@interface OrgMinimaDatabaseMmrMMRSet ()

- (void)incrementEntryNumber;

- (OrgMinimaDatabaseMmrMMREntry *)setEntryWithInt:(jint)zRow
               withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry
                  withOrgMinimaDatabaseMmrMMRData:(OrgMinimaDatabaseMmrMMRData *)zData;

- (OrgMinimaDatabaseMmrMMREntry *)getEntryWithInt:(jint)zRow
               withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry
                                      withBoolean:(jboolean)zCheckParent;

@end

__attribute__((unused)) static void OrgMinimaDatabaseMmrMMRSet_incrementEntryNumber(OrgMinimaDatabaseMmrMMRSet *self);

__attribute__((unused)) static OrgMinimaDatabaseMmrMMREntry *OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(OrgMinimaDatabaseMmrMMRSet *self, jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry, OrgMinimaDatabaseMmrMMRData *zData);

__attribute__((unused)) static OrgMinimaDatabaseMmrMMREntry *OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(OrgMinimaDatabaseMmrMMRSet *self, jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry, jboolean zCheckParent);

@implementation OrgMinimaDatabaseMmrMMRSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseMmrMMRSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zParent {
  OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_(self, zParent);
  return self;
}

- (void)setParentWithOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zParent {
  JreStrongAssign(&mParent_, zParent);
}

- (void)finalizeSet {
  JreStrongAssign(&mFinalizedPeaks_, [self getMMRPeaks]);
  JreStrongAssign(&mFinalizedRoot_, [self getMMRRoot]);
  JreStrongAssign(&mFinalizedZeroRow_, [self getRowWithInt:0]);
  mFinalized_ = true;
}

- (jboolean)isFinalized {
  return mFinalized_;
}

- (void)setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zTime {
  JreStrongAssign(&mBlockTime_, zTime);
}

- (OrgMinimaObjectsBaseMiniNumber *)getBlockTime {
  return mBlockTime_;
}

- (void)addKeeperWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry {
  [((JavaUtilArrayList *) nil_chk(mKeepers_)) addWithId:zEntry];
}

- (OrgMinimaDatabaseMmrMMRSet *)getParent {
  return mParent_;
}

- (void)incrementEntryNumber {
  OrgMinimaDatabaseMmrMMRSet_incrementEntryNumber(self);
}

- (jint)getMaxRow {
  return [self getMaxRowWithBoolean:false];
}

- (jint)getMaxRowWithBoolean:(jboolean)zCheckParent {
  jint max = mMaxRow_;
  if (zCheckParent && mParent_ != nil) {
    jint pmax = [mParent_ getMaxRowWithBoolean:zCheckParent];
    if (pmax > max) {
      max = pmax;
    }
  }
  return max;
}

- (JavaUtilArrayList *)getRowWithInt:(jint)zRow {
  JavaUtilArrayList *row = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseMmrMMREntry * __strong entry_ in nil_chk(mEntries_)) {
    if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getRow] == zRow) {
      [row addWithId:entry_];
    }
  }
  return row;
}

- (JavaUtilArrayList *)getZeroRow {
  if (mFinalized_) {
    return mFinalizedZeroRow_;
  }
  else {
    return [self getRowWithInt:0];
  }
}

- (OrgMinimaDatabaseMmrMMREntry *)findEntryWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zCoinID {
  JavaUtilArrayList *zero = [self getZeroRow];
  for (OrgMinimaDatabaseMmrMMREntry * __strong entry_ in nil_chk(zero)) {
    if (![((OrgMinimaDatabaseMmrMMRData *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getData])) isHashOnly]) {
      if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk([((OrgMinimaDatabaseMmrMMRData *) nil_chk([entry_ getData])) getCoin])) getCoinID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zCoinID]) {
        return entry_;
      }
    }
  }
  return nil;
}

- (OrgMinimaDatabaseMmrMMREntry *)setEntryWithInt:(jint)zRow
               withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry
                  withOrgMinimaDatabaseMmrMMRData:(OrgMinimaDatabaseMmrMMRData *)zData {
  return OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, zRow, zEntry, zData);
}

- (OrgMinimaDatabaseMmrMMREntry *)getEntryWithInt:(jint)zRow
               withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntry
                                      withBoolean:(jboolean)zCheckParent {
  return OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, zRow, zEntry, zCheckParent);
}

- (OrgMinimaDatabaseMmrMMREntry *)addUnspentCoinWithOrgMinimaDatabaseMmrMMRData:(OrgMinimaDatabaseMmrMMRData *)zData {
  OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, 0, mEntryNumber_, zData);
  OrgMinimaDatabaseMmrMMREntry *ret = entry_;
  OrgMinimaDatabaseMmrMMRSet_incrementEntryNumber(self);
  while ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) isRight]) {
    OrgMinimaDatabaseMmrMMREntry *sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [entry_ getRow], [entry_ getLeftSibling], true);
    OrgMinimaObjectsBaseMiniHash *combined = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) getHashValue] withOrgMinimaUtilsStreamable:[entry_ getHashValue]];
    OrgMinimaDatabaseMmrMMRData *data = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(combined);
    entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [entry_ getParentRow], [entry_ getParentEntry], data);
  }
  return ret;
}

- (OrgMinimaDatabaseMmrMMREntry *)addExternalUnspentCoinWithOrgMinimaDatabaseMmrMMRProof:(OrgMinimaDatabaseMmrMMRProof *)zProof {
  OrgMinimaObjectsBaseMiniNumber *entrynum = [((OrgMinimaDatabaseMmrMMRProof *) nil_chk(zProof)) getEntryNumber];
  OrgMinimaDatabaseMmrMMRData *proofdata = [zProof getMMRData];
  OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, entrynum, true);
  if (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) isEmpty] && ![((OrgMinimaDatabaseMmrMMRData *) nil_chk([entry_ getData])) isHashOnly]) {
    [self addKeeperWithOrgMinimaObjectsBaseMiniNumber:entrynum];
    return entry_;
  }
  entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, 0, entrynum, proofdata);
  OrgMinimaDatabaseMmrMMREntry *ret = entry_;
  jint prooflen = [zProof getProofLen];
  jint proofnum = 0;
  while (proofnum < prooflen) {
    OrgMinimaDatabaseMmrMMREntry *sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getRow], [entry_ getSibling], true);
    OrgMinimaDatabaseMmrMMRData *pdata = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_([zProof getProofWithInt:proofnum++]);
    if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty]) {
      sibling = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], pdata);
    }
    else {
      if (![((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaDatabaseMmrMMRData *) nil_chk([sibling getData])) getFinalHash])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[pdata getFinalHash]]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$", @"Sibling Inconsistency!! in MMR @ ", entrynum, @" when hard adding proof")];
        return nil;
      }
      else {
        break;
      }
    }
    OrgMinimaObjectsBaseMiniHash *combined = nil;
    if ([entry_ isLeft]) {
      combined = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[entry_ getHashValue] withOrgMinimaUtilsStreamable:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) getHashValue]];
    }
    else {
      combined = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) getHashValue] withOrgMinimaUtilsStreamable:[entry_ getHashValue]];
    }
    OrgMinimaDatabaseMmrMMRData *data = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(combined);
    OrgMinimaDatabaseMmrMMREntry *parent = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [entry_ getParentRow], [entry_ getParentEntry], true);
    if (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(parent)) isEmpty]) {
      if (![((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaDatabaseMmrMMRData *) nil_chk([parent getData])) getFinalHash])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:combined]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$", @"Parent Inconsistency!! in MMR @ ", entrynum, @" when hard adding proof")];
        return nil;
      }
      else {
        break;
      }
    }
    entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [entry_ getParentRow], [entry_ getParentEntry], data);
  }
  [self addKeeperWithOrgMinimaObjectsBaseMiniNumber:entrynum];
  return ret;
}

- (OrgMinimaDatabaseMmrMMREntry *)updateSpentCoinWithOrgMinimaDatabaseMmrMMRProof:(OrgMinimaDatabaseMmrMMRProof *)zProof {
  OrgMinimaDatabaseMmrMMRData *original = [((OrgMinimaDatabaseMmrMMRProof *) nil_chk(zProof)) getMMRData];
  OrgMinimaDatabaseMmrMMRData *spentmmr = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsCoin_withOrgMinimaObjectsBaseMiniNumber_withJavaUtilArrayList_(JreLoadStatic(OrgMinimaObjectsBaseMiniByte, TRUE), [((OrgMinimaDatabaseMmrMMRData *) nil_chk(original)) getCoin], [original getInBlock], [original getPrevState]);
  JavaUtilArrayList *peaks = [self getMMRPeaks];
  OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, 0, [zProof getEntryNumber], spentmmr);
  OrgMinimaDatabaseMmrMMREntry *ret = entry_;
  OrgMinimaDatabaseMmrMMREntry *sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getSibling], true);
  if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty] && [zProof getProofLen] == 0) {
    return ret;
  }
  jint pcount = 0;
  OrgMinimaObjectsBaseMiniHash *phash = [zProof getProofWithInt:pcount++];
  if ([sibling isEmpty]) {
    sibling = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(phash));
  }
  else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([sibling getBlockTime])) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:[zProof getBlockTime]]) {
    OrgMinimaObjectsBaseMiniHash *orighash = [((OrgMinimaDatabaseMmrMMRData *) nil_chk([sibling getData])) getFinalHash];
    if (![((OrgMinimaObjectsBaseMiniHash *) nil_chk(orighash)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:phash]) {
      sibling = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(phash));
    }
  }
  while (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty]) {
    OrgMinimaObjectsBaseMiniHash *combined = nil;
    if ([entry_ isLeft]) {
      combined = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[entry_ getHashValue] withOrgMinimaUtilsStreamable:[sibling getHashValue]];
    }
    else {
      combined = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[sibling getHashValue] withOrgMinimaUtilsStreamable:[entry_ getHashValue]];
    }
    OrgMinimaDatabaseMmrMMRData *data = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(combined);
    OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], [sibling getData]);
    entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [entry_ getParentRow], [entry_ getParentEntry], data);
    for (OrgMinimaDatabaseMmrMMREntry * __strong peak in nil_chk(peaks)) {
      if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) checkPositionWithOrgMinimaDatabaseMmrMMREntry:peak]) {
        return ret;
      }
    }
    sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getRow], [entry_ getSibling], true);
    if (pcount < [zProof getProofLen]) {
      phash = [zProof getProofWithInt:pcount++];
      if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty]) {
        sibling = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(phash));
      }
      else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([sibling getBlockTime])) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:[zProof getBlockTime]]) {
        OrgMinimaObjectsBaseMiniHash *orighash = [((OrgMinimaDatabaseMmrMMRData *) nil_chk([sibling getData])) getFinalHash];
        if (![((OrgMinimaObjectsBaseMiniHash *) nil_chk(orighash)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:phash]) {
          sibling = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_(phash));
        }
      }
    }
  }
  return ret;
}

- (OrgMinimaDatabaseMmrMMRProof *)getProofWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zEntryNumber {
  OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, zEntryNumber, true);
  OrgMinimaDatabaseMmrMMRProof *proof = create_OrgMinimaDatabaseMmrMMRProof_initWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_(zEntryNumber, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getData], mBlockTime_);
  OrgMinimaDatabaseMmrMMREntry *sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [entry_ getRow], [entry_ getSibling], true);
  while (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty]) {
    [proof addHashWithOrgMinimaObjectsBaseMiniHash:[sibling getHashValue] withBoolean:[sibling isLeft]];
    OrgMinimaDatabaseMmrMMREntry *parent = create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_([sibling getParentRow], [sibling getParentEntry]);
    sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [parent getRow], [parent getSibling], true);
  }
  return proof;
}

- (jboolean)checkProofWithOrgMinimaDatabaseMmrMMRProof:(OrgMinimaDatabaseMmrMMRProof *)zProof {
  if ([((OrgMinimaDatabaseMmrMMRData *) nil_chk([((OrgMinimaDatabaseMmrMMRProof *) nil_chk(zProof)) getMMRData])) isHashOnly]) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"Invalid PROOF check HASHONLY! : ", zProof)];
    return false;
  }
  @try {
    if ([((OrgMinimaDatabaseMmrMMRData *) nil_chk([zProof getMMRData])) isSpent]) {
      return false;
    }
  }
  @catch (JavaLangException *exc) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"ERROR in MMRDATA module.. ", zProof)];
    [exc printStackTrace];
    return false;
  }
  OrgMinimaDatabaseMmrMMRSet *proofset = [self getParentAtTimeWithOrgMinimaObjectsBaseMiniNumber:[zProof getBlockTime]];
  if (proofset == nil) {
    return false;
  }
  JavaUtilArrayList *peaks = [proofset getMMRPeaks];
  OrgMinimaObjectsBaseMiniHash *proofpeak = [zProof calculateProof];
  jboolean found = false;
  for (OrgMinimaDatabaseMmrMMREntry * __strong peak in nil_chk(peaks)) {
    if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk(proofpeak)) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaDatabaseMmrMMREntry *) nil_chk(peak)) getHashValue]]) {
      found = true;
      break;
    }
  }
  if (!found) {
    return false;
  }
  OrgMinimaDatabaseMmrMMREntry *checker = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, [zProof getEntryNumber], true);
  if (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(checker)) isEmpty]) {
    if ([((OrgMinimaDatabaseMmrMMRData *) nil_chk([checker getData])) isSpent]) {
      return false;
    }
  }
  return true;
}

- (JavaUtilArrayList *)getMMRPeaks {
  if (mFinalized_) {
    return mFinalizedPeaks_;
  }
  JavaUtilArrayList *peaks = create_JavaUtilArrayList_init();
  for (jint i = mMaxRow_; i >= 0; i--) {
    OrgMinimaDatabaseMmrMMREntry *max = IOSObjectArray_Get(nil_chk(mMaxEntries_), i);
    if (max != nil) {
      if ([max isLeft]) {
        [peaks addWithId:max];
      }
    }
  }
  return peaks;
}

- (OrgMinimaObjectsBaseMiniHash *)getMMRRoot {
  if (mFinalized_) {
    return mFinalizedRoot_;
  }
  JavaUtilArrayList *peaks = [self getMMRPeaks];
  while ([((JavaUtilArrayList *) nil_chk(peaks)) size] > 1) {
    OrgMinimaDatabaseMmrMMRSet *newmmr = create_OrgMinimaDatabaseMmrMMRSet_init();
    for (OrgMinimaDatabaseMmrMMREntry * __strong peak in peaks) {
      [newmmr addUnspentCoinWithOrgMinimaDatabaseMmrMMRData:create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniHash_([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(peak)) getHashValue])];
    }
    peaks = [newmmr getMMRPeaks];
  }
  return [((OrgMinimaDatabaseMmrMMREntry *) nil_chk([peaks getWithInt:0])) getHashValue];
}

- (JavaUtilArrayList *)getKeepers {
  return mKeepers_;
}

- (OrgMinimaDatabaseMmrMMRSet *)getParentAtTimeWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zTime {
  if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockTime_)) isEqualWithOrgMinimaObjectsBaseMiniNumber:zTime]) {
    return self;
  }
  if (mParent_ != nil) {
    return [mParent_ getParentAtTimeWithOrgMinimaObjectsBaseMiniNumber:zTime];
  }
  return nil;
}

- (jboolean)isKeptAllreadyWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  for (OrgMinimaObjectsBaseMiniNumber * __strong keep in nil_chk(mKeepers_)) {
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(keep)) isEqualWithOrgMinimaObjectsBaseMiniNumber:zNumber]) {
      return true;
    }
  }
  return false;
}

- (void)copyParentKeepers {
  JavaUtilArrayList *keepers = create_JavaUtilArrayList_init();
  if (mParent_ != nil) {
    keepers = [mParent_ getKeepers];
  }
  JavaUtilArrayList *newkeepers = create_JavaUtilArrayList_init();
  for (OrgMinimaObjectsBaseMiniNumber * __strong keep in nil_chk(mKeepers_)) {
    OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, keep, true);
    if (![((OrgMinimaDatabaseMmrMMRData *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getData])) isSpent]) {
      [newkeepers addWithId:keep];
    }
  }
  JreStrongAssign(&mKeepers_, newkeepers);
  for (OrgMinimaObjectsBaseMiniNumber * __strong keep in nil_chk(keepers)) {
    OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, 0, keep, true);
    if ([((OrgMinimaDatabaseMmrMMRData *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getData])) isSpent]) {
      continue;
    }
    if (![self isKeptAllreadyWithOrgMinimaObjectsBaseMiniNumber:keep]) {
      [((JavaUtilArrayList *) nil_chk(mKeepers_)) addWithId:keep];
      entry_ = OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, 0, keep, [entry_ getData]);
      OrgMinimaDatabaseMmrMMREntry *sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) getRow], [entry_ getSibling], true);
      while (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(sibling)) isEmpty]) {
        OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [sibling getRow], [sibling getEntry], [sibling getData]);
        OrgMinimaDatabaseMmrMMREntry *parent = create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_([sibling getParentRow], [sibling getParentEntry]);
        sibling = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self, [parent getRow], [parent getSibling], true);
      }
    }
  }
  JreStrongAssign(&mParent_, nil);
  [self finalizeSet];
}

- (OrgMinimaDatabaseMmrMMRSet *)getRootParent {
  if (mParent_ == nil) {
    return self;
  }
  return [mParent_ getRootParent];
}

- (OrgMinimaDatabaseMmrMMRSet *)getPenultimateParent {
  if (mParent_ != nil) {
    if ([mParent_ getParent] == nil) {
      return self;
    }
    return [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(mParent_)) getPenultimateParent];
  }
  return nil;
}

- (jint)getParentLength {
  if (mParent_ != nil) {
    return 1 + [mParent_ getParentLength];
  }
  return 1;
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockTime_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mEntryNumber_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  jint len = [((JavaUtilArrayList *) nil_chk(mEntries_)) size];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  for (OrgMinimaDatabaseMmrMMREntry * __strong entry_ in nil_chk(mEntries_)) {
    [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  JreStrongAssign(&mBlockTime_, OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssign(&mEntryNumber_, OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssignAndConsume(&mEntries_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&mMaxEntries_, [IOSObjectArray newArrayWithLength:256 type:OrgMinimaDatabaseMmrMMREntry_class_()]);
  mMaxRow_ = 0;
  jint len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  for (jint i = 0; i < len; i++) {
    OrgMinimaDatabaseMmrMMREntry *entry_ = create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(0, nil);
    [entry_ readDataStreamWithJavaIoDataInputStream:zIn];
    [entry_ setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:mBlockTime_];
    if (![entry_ isEmpty]) {
      jint row = [entry_ getRow];
      if (row > mMaxRow_) {
        mMaxRow_ = row;
      }
      if (IOSObjectArray_Get(nil_chk(mMaxEntries_), row) == nil) {
        IOSObjectArray_Set(mMaxEntries_, row, entry_);
      }
      else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(IOSObjectArray_Get(mMaxEntries_, row))) getEntry])) isLessWithOrgMinimaObjectsBaseMiniNumber:[entry_ getEntry]]) {
        IOSObjectArray_Set(nil_chk(mMaxEntries_), row, entry_);
      }
      [((JavaUtilArrayList *) nil_chk(mEntries_)) addWithId:entry_];
    }
  }
}

- (void)dealloc {
  RELEASE_(mBlockTime_);
  RELEASE_(mParent_);
  RELEASE_(mEntryNumber_);
  RELEASE_(mEntries_);
  RELEASE_(mMaxEntries_);
  RELEASE_(mKeepers_);
  RELEASE_(mFinalizedRoot_);
  RELEASE_(mFinalizedPeaks_);
  RELEASE_(mFinalizedZeroRow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMREntry;", 0x1, 21, 20, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRProof;", 0x1, 22, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 23, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 24, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRSet;", 0x1, 25, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, 29, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaDatabaseMmrMMRSet:);
  methods[2].selector = @selector(setParentWithOrgMinimaDatabaseMmrMMRSet:);
  methods[3].selector = @selector(finalizeSet);
  methods[4].selector = @selector(isFinalized);
  methods[5].selector = @selector(setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:);
  methods[6].selector = @selector(getBlockTime);
  methods[7].selector = @selector(addKeeperWithOrgMinimaObjectsBaseMiniNumber:);
  methods[8].selector = @selector(getParent);
  methods[9].selector = @selector(incrementEntryNumber);
  methods[10].selector = @selector(getMaxRow);
  methods[11].selector = @selector(getMaxRowWithBoolean:);
  methods[12].selector = @selector(getRowWithInt:);
  methods[13].selector = @selector(getZeroRow);
  methods[14].selector = @selector(findEntryWithOrgMinimaObjectsBaseMiniHash:);
  methods[15].selector = @selector(setEntryWithInt:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaDatabaseMmrMMRData:);
  methods[16].selector = @selector(getEntryWithInt:withOrgMinimaObjectsBaseMiniNumber:withBoolean:);
  methods[17].selector = @selector(addUnspentCoinWithOrgMinimaDatabaseMmrMMRData:);
  methods[18].selector = @selector(addExternalUnspentCoinWithOrgMinimaDatabaseMmrMMRProof:);
  methods[19].selector = @selector(updateSpentCoinWithOrgMinimaDatabaseMmrMMRProof:);
  methods[20].selector = @selector(getProofWithOrgMinimaObjectsBaseMiniNumber:);
  methods[21].selector = @selector(checkProofWithOrgMinimaDatabaseMmrMMRProof:);
  methods[22].selector = @selector(getMMRPeaks);
  methods[23].selector = @selector(getMMRRoot);
  methods[24].selector = @selector(getKeepers);
  methods[25].selector = @selector(getParentAtTimeWithOrgMinimaObjectsBaseMiniNumber:);
  methods[26].selector = @selector(isKeptAllreadyWithOrgMinimaObjectsBaseMiniNumber:);
  methods[27].selector = @selector(copyParentKeepers);
  methods[28].selector = @selector(getRootParent);
  methods[29].selector = @selector(getPenultimateParent);
  methods[30].selector = @selector(getParentLength);
  methods[31].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[32].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBlockTime_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mParent_", "LOrgMinimaDatabaseMmrMMRSet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEntryNumber_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mEntries_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 32, -1 },
    { "mMaxRow_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxEntries_", "[LOrgMinimaDatabaseMmrMMREntry;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeepers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 33, -1 },
    { "mFinalized_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFinalizedRoot_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFinalizedPeaks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 32, -1 },
    { "mFinalizedZeroRow_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 32, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaDatabaseMmrMMRSet;", "setParent", "setBlockTime", "LOrgMinimaObjectsBaseMiniNumber;", "addKeeper", "getMaxRow", "Z", "getRow", "I", "(I)Ljava/util/ArrayList<Lorg/minima/database/mmr/MMREntry;>;", "()Ljava/util/ArrayList<Lorg/minima/database/mmr/MMREntry;>;", "findEntry", "LOrgMinimaObjectsBaseMiniHash;", "setEntry", "ILOrgMinimaObjectsBaseMiniNumber;LOrgMinimaDatabaseMmrMMRData;", "getEntry", "ILOrgMinimaObjectsBaseMiniNumber;Z", "addUnspentCoin", "LOrgMinimaDatabaseMmrMMRData;", "addExternalUnspentCoin", "LOrgMinimaDatabaseMmrMMRProof;", "updateSpentCoin", "getProof", "checkProof", "()Ljava/util/ArrayList<Lorg/minima/objects/base/MiniNumber;>;", "getParentAtTime", "isKeptAllready", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/ArrayList<Lorg/minima/database/mmr/MMREntry;>;", "Ljava/util/ArrayList<Lorg/minima/objects/base/MiniNumber;>;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseMmrMMRSet = { "MMRSet", "org.minima.database.mmr", ptrTable, methods, fields, 7, 0x1, 33, 11, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseMmrMMRSet;
}

@end

void OrgMinimaDatabaseMmrMMRSet_init(OrgMinimaDatabaseMmrMMRSet *self) {
  OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_(self, nil);
}

OrgMinimaDatabaseMmrMMRSet *new_OrgMinimaDatabaseMmrMMRSet_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMmrMMRSet, init)
}

OrgMinimaDatabaseMmrMMRSet *create_OrgMinimaDatabaseMmrMMRSet_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMmrMMRSet, init)
}

void OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_(OrgMinimaDatabaseMmrMMRSet *self, OrgMinimaDatabaseMmrMMRSet *zParent) {
  NSObject_init(self);
  JreStrongAssign(&self->mBlockTime_, JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO));
  JreStrongAssign(&self->mParent_, nil);
  JreStrongAssign(&self->mEntryNumber_, JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO));
  self->mMaxRow_ = 0;
  JreStrongAssignAndConsume(&self->mEntries_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mMaxEntries_, [IOSObjectArray newArrayWithLength:256 type:OrgMinimaDatabaseMmrMMREntry_class_()]);
  self->mMaxRow_ = 0;
  JreStrongAssign(&self->mParent_, zParent);
  JreStrongAssignAndConsume(&self->mKeepers_, new_JavaUtilArrayList_init());
  self->mFinalized_ = false;
  if (self->mParent_ != nil) {
    if (![self->mParent_ isFinalized]) {
      [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(self->mParent_)) finalizeSet];
    }
    [self setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaDatabaseMmrMMRSet *) nil_chk(self->mParent_)) getBlockTime])) addWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE)]];
    JavaMathBigInteger *tot = JreLoadStatic(JavaMathBigInteger, ZERO);
    JavaMathBigInteger *two = create_JavaMathBigInteger_initWithNSString_(@"2");
    JavaUtilArrayList *peaks = [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(self->mParent_)) getMMRPeaks];
    for (OrgMinimaDatabaseMmrMMREntry * __strong peak in nil_chk(peaks)) {
      OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(self, [((OrgMinimaDatabaseMmrMMREntry *) nil_chk(peak)) getRow], [peak getEntry], [peak getData]);
      tot = [((JavaMathBigInteger *) nil_chk(tot)) addWithJavaMathBigInteger:[two powWithInt:[peak getRow]]];
    }
    JreStrongAssignAndConsume(&self->mEntryNumber_, new_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_(tot));
    if (![self->mEntryNumber_ isEqualWithOrgMinimaObjectsBaseMiniNumber:((OrgMinimaDatabaseMmrMMRSet *) nil_chk(self->mParent_))->mEntryNumber_]) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@C@", @"SERIOUS ERROR - Entry Number Mismatch! ", self->mEntryNumber_, '/', ((OrgMinimaDatabaseMmrMMRSet *) nil_chk(self->mParent_))->mEntryNumber_));
    }
  }
}

OrgMinimaDatabaseMmrMMRSet *new_OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_(OrgMinimaDatabaseMmrMMRSet *zParent) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMmrMMRSet, initWithOrgMinimaDatabaseMmrMMRSet_, zParent)
}

OrgMinimaDatabaseMmrMMRSet *create_OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_(OrgMinimaDatabaseMmrMMRSet *zParent) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMmrMMRSet, initWithOrgMinimaDatabaseMmrMMRSet_, zParent)
}

void OrgMinimaDatabaseMmrMMRSet_incrementEntryNumber(OrgMinimaDatabaseMmrMMRSet *self) {
  JreStrongAssign(&self->mEntryNumber_, [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(self->mEntryNumber_)) addWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE)]);
}

OrgMinimaDatabaseMmrMMREntry *OrgMinimaDatabaseMmrMMRSet_setEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRData_(OrgMinimaDatabaseMmrMMRSet *self, jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry, OrgMinimaDatabaseMmrMMRData *zData) {
  if (zRow > self->mMaxRow_) {
    self->mMaxRow_ = zRow;
  }
  OrgMinimaDatabaseMmrMMREntry *entry_ = nil;
  for (OrgMinimaDatabaseMmrMMREntry * __strong ent in nil_chk(self->mEntries_)) {
    if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(ent)) checkPositionWithInt:zRow withOrgMinimaObjectsBaseMiniNumber:zEntry]) {
      entry_ = ent;
      break;
    }
  }
  if (entry_ == nil) {
    entry_ = create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(zRow, zEntry);
    [entry_ setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:[self getBlockTime]];
    [((JavaUtilArrayList *) nil_chk(self->mEntries_)) addWithId:entry_];
  }
  [entry_ setDataWithOrgMinimaDatabaseMmrMMRData:zData];
  if (IOSObjectArray_Get(nil_chk(self->mMaxEntries_), zRow) == nil) {
    IOSObjectArray_Set(self->mMaxEntries_, zRow, entry_);
  }
  else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(IOSObjectArray_Get(self->mMaxEntries_, zRow))) getEntry])) isLessWithOrgMinimaObjectsBaseMiniNumber:zEntry]) {
    IOSObjectArray_Set(nil_chk(self->mMaxEntries_), zRow, entry_);
  }
  return entry_;
}

OrgMinimaDatabaseMmrMMREntry *OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(OrgMinimaDatabaseMmrMMRSet *self, jint zRow, OrgMinimaObjectsBaseMiniNumber *zEntry, jboolean zCheckParent) {
  for (OrgMinimaDatabaseMmrMMREntry * __strong ent in nil_chk(self->mEntries_)) {
    if ([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(ent)) checkPositionWithInt:zRow withOrgMinimaObjectsBaseMiniNumber:zEntry]) {
      return ent;
    }
  }
  if (zCheckParent && self->mParent_ != nil) {
    OrgMinimaDatabaseMmrMMREntry *entry_ = OrgMinimaDatabaseMmrMMRSet_getEntryWithInt_withOrgMinimaObjectsBaseMiniNumber_withBoolean_(self->mParent_, zRow, zEntry, true);
    if (![((OrgMinimaDatabaseMmrMMREntry *) nil_chk(entry_)) isEmpty]) {
      return entry_;
    }
  }
  OrgMinimaDatabaseMmrMMREntry *entry_ = create_OrgMinimaDatabaseMmrMMREntry_initWithInt_withOrgMinimaObjectsBaseMiniNumber_(zRow, zEntry);
  [entry_ setBlockTimeWithOrgMinimaObjectsBaseMiniNumber:[self getBlockTime]];
  return entry_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseMmrMMRSet)
