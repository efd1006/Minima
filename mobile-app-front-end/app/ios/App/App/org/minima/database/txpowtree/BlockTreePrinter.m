//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/txpowtree/BlockTreePrinter.java
//

#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/database/txpowtree/BlockTreePrinter.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/Maths.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/bretty/TreeNode.h"
#include "org/minima/utils/bretty/TreePrinter.h"

@interface OrgMinimaDatabaseTxpowtreeBlockTreePrinter ()

- (NSString *)convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode;

- (NSString *)getStarStringWithInt:(jint)zLen;

- (void)drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode
                            withOrgMinimaUtilsBrettyTreeNode:(OrgMinimaUtilsBrettyTreeNode *)zTreeNode;

@end

__attribute__((unused)) static NSString *OrgMinimaDatabaseTxpowtreeBlockTreePrinter_convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode);

__attribute__((unused)) static NSString *OrgMinimaDatabaseTxpowtreeBlockTreePrinter_getStarStringWithInt_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, jint zLen);

__attribute__((unused)) static void OrgMinimaDatabaseTxpowtreeBlockTreePrinter_drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaUtilsBrettyTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode, OrgMinimaUtilsBrettyTreeNode *zTreeNode);

@implementation OrgMinimaDatabaseTxpowtreeBlockTreePrinter

- (instancetype)initWithOrgMinimaDatabaseTxpowtreeBlockTree:(OrgMinimaDatabaseTxpowtreeBlockTree *)zTree
                                                withBoolean:(jboolean)zSimple {
  OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_(self, zTree, zSimple);
  return self;
}

- (void)printtree {
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"---------");
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"Full Tree");
  OrgMinimaUtilsMinimaLogger_logWithNSString_(@"---------");
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *root = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainRoot];
  if (root == nil) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(@"No tree root..");
    return;
  }
  mCascadeNode_ = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getCascadeNode])) getTxPow])) getBlockNumber])) getAsLong];
  JreStrongAssign(&mTipID_, [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainTip])) getTxPowID]);
  OrgMinimaUtilsBrettyTreeNode *mRoot = create_OrgMinimaUtilsBrettyTreeNode_initWithNSString_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter_convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, root));
  OrgMinimaDatabaseTxpowtreeBlockTreePrinter_drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaUtilsBrettyTreeNode_(self, root, mRoot);
  NSString *output = OrgMinimaUtilsBrettyTreePrinter_toStringWithOrgMinimaUtilsBrettyPrintableTreeNode_(mRoot);
  OrgMinimaUtilsMinimaLogger_logWithNSString_(output);
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Total POW : ", [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainRoot])) getTotalWeight]));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Root      : ", [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainRoot]));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Tip       : ", [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainTip]));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$I", @"Length    : ", [((JavaUtilArrayList *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getAsList])) size]));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$J", @"Cascade   : ", mCascadeNode_));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D$", @"Speed     : ", [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getChainSpeed], @" blocks / sec"));
  OrgMinimaObjectsBaseMiniNumber *diff = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mTree_)) getAvgChainDifficulty];
  JavaMathBigInteger *diffbi = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(diff)) getAsBigInteger];
  jdouble log = OrgMinimaUtilsMaths_log2BIWithJavaMathBigInteger_(diffbi);
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"AVG Diff  : ", diff));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$D", @"LOG Diff  : ", log));
}

- (NSString *)convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  return OrgMinimaDatabaseTxpowtreeBlockTreePrinter_convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zNode);
}

- (NSString *)getStarStringWithInt:(jint)zLen {
  return OrgMinimaDatabaseTxpowtreeBlockTreePrinter_getStarStringWithInt_(self, zLen);
}

- (void)drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode
                            withOrgMinimaUtilsBrettyTreeNode:(OrgMinimaUtilsBrettyTreeNode *)zTreeNode {
  OrgMinimaDatabaseTxpowtreeBlockTreePrinter_drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaUtilsBrettyTreeNode_(self, zNode, zTreeNode);
}

+ (void)clearScreen {
  OrgMinimaDatabaseTxpowtreeBlockTreePrinter_clearScreen();
}

- (void)dealloc {
  RELEASE_(mTree_);
  RELEASE_(mTipID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaDatabaseTxpowtreeBlockTree:withBoolean:);
  methods[1].selector = @selector(printtree);
  methods[2].selector = @selector(convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[3].selector = @selector(getStarStringWithInt:);
  methods[4].selector = @selector(drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:withOrgMinimaUtilsBrettyTreeNode:);
  methods[5].selector = @selector(clearScreen);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTree_", "LOrgMinimaDatabaseTxpowtreeBlockTree;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCascadeNode_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTipID_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSimple_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaDatabaseTxpowtreeBlockTree;Z", "convertNodeToString", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", "getStarString", "I", "drillNode", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;LOrgMinimaUtilsBrettyTreeNode;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseTxpowtreeBlockTreePrinter = { "BlockTreePrinter", "org.minima.database.txpowtree", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseTxpowtreeBlockTreePrinter;
}

@end

void OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, OrgMinimaDatabaseTxpowtreeBlockTree *zTree, jboolean zSimple) {
  NSObject_init(self);
  self->mCascadeNode_ = 0;
  self->mSimple_ = false;
  JreStrongAssign(&self->mTree_, zTree);
  self->mSimple_ = zSimple;
}

OrgMinimaDatabaseTxpowtreeBlockTreePrinter *new_OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_(OrgMinimaDatabaseTxpowtreeBlockTree *zTree, jboolean zSimple) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseTxpowtreeBlockTreePrinter, initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_, zTree, zSimple)
}

OrgMinimaDatabaseTxpowtreeBlockTreePrinter *create_OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_(OrgMinimaDatabaseTxpowtreeBlockTree *zTree, jboolean zSimple) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseTxpowtreeBlockTreePrinter, initWithOrgMinimaDatabaseTxpowtreeBlockTree_withBoolean_, zTree, zSimple)
}

NSString *OrgMinimaDatabaseTxpowtreeBlockTreePrinter_convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode) {
  jint slev = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getSuperBlockLevel];
  NSString *weight = JreStrcat("$@C@$", @"{WEIGHT:", [zNode getWeight], '/', [zNode getTotalWeight], @"} ");
  NSString *ss = [zNode description];
  NSString *add = @"";
  if (self->mCascadeNode_ == [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([zNode getTxPow])) getBlockNumber])) getAsLong]) {
    JreStrAppend(&add, "$", @" [++CASCADING++]");
  }
  if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk([zNode getTxPowID])) isNumericallyEqualWithOrgMinimaObjectsBaseMiniData:self->mTipID_]) {
    JreStrAppend(&add, "$", @" [++THE TIP++]");
  }
  if (self->mSimple_) {
  }
  return JreStrcat("$$C$C$", weight, ss, ' ', OrgMinimaDatabaseTxpowtreeBlockTreePrinter_getStarStringWithInt_(self, slev), ' ', add);
}

NSString *OrgMinimaDatabaseTxpowtreeBlockTreePrinter_getStarStringWithInt_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, jint zLen) {
  NSString *ret = @"";
  for (jint i = 0; i < zLen; i++) {
    JreStrAppend(&ret, "$", @"*");
  }
  return ret;
}

void OrgMinimaDatabaseTxpowtreeBlockTreePrinter_drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaUtilsBrettyTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode, OrgMinimaUtilsBrettyTreeNode *zTreeNode) {
  JavaUtilArrayList *children = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getChildren];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong child in nil_chk(children)) {
    OrgMinimaUtilsBrettyTreeNode *chilnode = create_OrgMinimaUtilsBrettyTreeNode_initWithNSString_(OrgMinimaDatabaseTxpowtreeBlockTreePrinter_convertNodeToStringWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, child));
    [((OrgMinimaUtilsBrettyTreeNode *) nil_chk(zTreeNode)) addChildWithOrgMinimaUtilsBrettyTreeNode:chilnode];
    OrgMinimaDatabaseTxpowtreeBlockTreePrinter_drillNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaUtilsBrettyTreeNode_(self, child, chilnode);
  }
}

void OrgMinimaDatabaseTxpowtreeBlockTreePrinter_clearScreen() {
  OrgMinimaDatabaseTxpowtreeBlockTreePrinter_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"\x1b[H\x1b[2J"];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) flush];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseTxpowtreeBlockTreePrinter)
