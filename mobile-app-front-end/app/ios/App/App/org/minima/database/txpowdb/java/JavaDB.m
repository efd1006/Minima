//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/txpowdb/java/JavaDB.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/txpowdb/TxPOWDBRow.h"
#include "org/minima/database/txpowdb/java/JavaDB.h"
#include "org/minima/database/txpowdb/java/JavaDBRow.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/objects/base/MiniNumber.h"

@interface OrgMinimaDatabaseTxpowdbJavaJavaDB () {
 @public
  JavaUtilArrayList *mRows_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaDatabaseTxpowdbJavaJavaDB, mRows_, JavaUtilArrayList *)

@implementation OrgMinimaDatabaseTxpowdbJavaJavaDB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseTxpowdbJavaJavaDB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>)addTxPOWDBRowWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> prev = [self findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:[((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTxPowID]];
  if (prev != nil) {
    return prev;
  }
  OrgMinimaDatabaseTxpowdbJavaJavaDBRow *row = create_OrgMinimaDatabaseTxpowdbJavaJavaDBRow_initWithOrgMinimaObjectsTxPOW_(zTxPOW);
  [((JavaUtilArrayList *) nil_chk(mRows_)) addWithId:row];
  return row;
}

- (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>)findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPOWID {
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) getTxPOW])) getTxPowID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zTxPOWID]) {
      return row;
    }
  }
  return nil;
}

- (JavaUtilArrayList *)removeTxPOWInBlockLessThanWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNumber {
  JavaUtilArrayList *removed = create_JavaUtilArrayList_init();
  JavaUtilArrayList *newRows = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) isOnChainBlock]) {
      [newRows addWithId:row];
      continue;
    }
    if (![row isInBlock]) {
      [newRows addWithId:row];
    }
    else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([row getInBlockNumber])) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:zBlockNumber]) {
      [newRows addWithId:row];
    }
    else {
      [removed addWithId:row];
    }
  }
  JreStrongAssign(&mRows_, newRows);
  return removed;
}

- (JavaUtilArrayList *)getAllUnusedTxPOW {
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if (![((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) isInBlock]) {
      [ret addWithId:row];
    }
  }
  return ret;
}

- (jint)getSize {
  return [((JavaUtilArrayList *) nil_chk(mRows_)) size];
}

- (void)removeTxPOWWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPOWID {
  JavaUtilArrayList *newRows = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if (![((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) getTxPOW])) getTxPowID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zTxPOWID]) {
      [newRows addWithId:row];
    }
  }
  JreStrongAssign(&mRows_, newRows);
}

- (JavaUtilArrayList *)getChildBlocksTxPOWWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zParent {
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) getTxPOW])) isBlock] && [((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([row getTxPOW])) getParentID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zParent]) {
      [ret addWithId:row];
    }
  }
  return ret;
}

- (JavaUtilArrayList *)getAllTxPOWDBRow {
  JavaUtilArrayList *copy_ = create_JavaUtilArrayList_init();
  for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong row in nil_chk(mRows_)) {
    [copy_ addWithId:row];
  }
  return copy_;
}

- (void)resetAllInBlocks {
  for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong row in nil_chk(mRows_)) {
    [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) setIsInBlockWithBoolean:false];
    [row setOnChainBlockWithBoolean:false];
  }
}

- (JavaUtilArrayList *)getAllBlocksMissingTransactions {
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (OrgMinimaDatabaseTxpowdbJavaJavaDBRow * __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowdbJavaJavaDBRow *) nil_chk(row)) getTxPOW])) isBlock] && [row getBlockState] == OrgMinimaDatabaseTxpowdbTxPOWDBRow_TXPOWDBROW_STATE_BASIC) {
      [ret addWithId:row];
    }
  }
  return ret;
}

- (void)ClearDB {
  JreStrongAssignAndConsume(&mRows_, new_JavaUtilArrayList_init());
}

- (void)dealloc {
  RELEASE_(mRows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowdbTxPOWDBRow;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowdbTxPOWDBRow;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 9, 3, -1, 10, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 7, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addTxPOWDBRowWithOrgMinimaObjectsTxPOW:);
  methods[2].selector = @selector(findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:);
  methods[3].selector = @selector(removeTxPOWInBlockLessThanWithOrgMinimaObjectsBaseMiniNumber:);
  methods[4].selector = @selector(getAllUnusedTxPOW);
  methods[5].selector = @selector(getSize);
  methods[6].selector = @selector(removeTxPOWWithOrgMinimaObjectsBaseMiniData32:);
  methods[7].selector = @selector(getChildBlocksTxPOWWithOrgMinimaObjectsBaseMiniData32:);
  methods[8].selector = @selector(getAllTxPOWDBRow);
  methods[9].selector = @selector(resetAllInBlocks);
  methods[10].selector = @selector(getAllBlocksMissingTransactions);
  methods[11].selector = @selector(ClearDB);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRows_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "addTxPOWDBRow", "LOrgMinimaObjectsTxPOW;", "findTxPOWDBRow", "LOrgMinimaObjectsBaseMiniData32;", "removeTxPOWInBlockLessThan", "LOrgMinimaObjectsBaseMiniNumber;", "(Lorg/minima/objects/base/MiniNumber;)Ljava/util/ArrayList<Lorg/minima/database/txpowdb/TxPOWDBRow;>;", "()Ljava/util/ArrayList<Lorg/minima/database/txpowdb/TxPOWDBRow;>;", "removeTxPOW", "getChildBlocksTxPOW", "(Lorg/minima/objects/base/MiniData32;)Ljava/util/ArrayList<Lorg/minima/database/txpowdb/TxPOWDBRow;>;", "Ljava/util/ArrayList<Lorg/minima/database/txpowdb/java/JavaDBRow;>;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseTxpowdbJavaJavaDB = { "JavaDB", "org.minima.database.txpowdb.java", ptrTable, methods, fields, 7, 0x1, 12, 1, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseTxpowdbJavaJavaDB;
}

@end

void OrgMinimaDatabaseTxpowdbJavaJavaDB_init(OrgMinimaDatabaseTxpowdbJavaJavaDB *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mRows_, new_JavaUtilArrayList_init());
}

OrgMinimaDatabaseTxpowdbJavaJavaDB *new_OrgMinimaDatabaseTxpowdbJavaJavaDB_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseTxpowdbJavaJavaDB, init)
}

OrgMinimaDatabaseTxpowdbJavaJavaDB *create_OrgMinimaDatabaseTxpowdbJavaJavaDB_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseTxpowdbJavaJavaDB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseTxpowdbJavaJavaDB)
