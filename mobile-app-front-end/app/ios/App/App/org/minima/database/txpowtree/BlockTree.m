//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/txpowtree/BlockTree.java
//

#include "J2ObjC_source.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/MinimaLogger.h"

@interface OrgMinimaDatabaseTxpowtreeBlockTree ()

- (void)_zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode;

- (void)_cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode;

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zStartNode;

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)_findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zRoot
                                                                 withOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTxPOWID;

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)_getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNumber
                                                    withOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zTip;

@end

__attribute__((unused)) static void OrgMinimaDatabaseTxpowtreeBlockTree__zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode);

__attribute__((unused)) static void OrgMinimaDatabaseTxpowtreeBlockTree__cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode);

__attribute__((unused)) static OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree_getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zStartNode);

__attribute__((unused)) static OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree__findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaObjectsBaseMiniData_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zRoot, OrgMinimaObjectsBaseMiniData *zTxPOWID);

__attribute__((unused)) static OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree__getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaObjectsBaseMiniNumber *zBlockNumber, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zTip);

@implementation OrgMinimaDatabaseTxpowtreeBlockTree

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseTxpowtreeBlockTree_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setTreeRootWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) setParentWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:nil];
  mRoot_ = zNode;
  mTip_ = mRoot_;
  mCascadeNode_ = mRoot_;
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getChainRoot {
  return mRoot_;
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getChainTip {
  return mTip_;
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getCascadeNode {
  return mCascadeNode_;
}

- (jboolean)addNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *exists = [self findNodeWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getTxPowID]];
  if (exists != nil) {
    return false;
  }
  OrgMinimaObjectsBaseMiniData *prevblock = [((OrgMinimaObjectsTxPOW *) nil_chk([zNode getTxPow])) getParentID];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *parent = [self findNodeWithOrgMinimaObjectsBaseMiniData:prevblock];
  if (parent == nil) {
    return false;
  }
  if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([zNode getTxPow])) getBlockNumber])) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([self getCascadeNode])) getTxPow])) getBlockNumber]]) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"BlockTree : BLOCK PAST CASCADE NODE.. ", [zNode getTxPow]));
    return false;
  }
  [parent addChildWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:zNode];
  return true;
}

- (void)hardAddNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode
                                                   withBoolean:(jboolean)zLinkAll {
  if (mRoot_ == nil) {
    [self setTreeRootWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:zNode];
    [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) setParentWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:nil];
    return;
  }
  [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) addChildWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:zNode];
  if ([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getMMRSet] != nil) {
    if (zLinkAll) {
      if ([((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getTxPowID])) isEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaObjectsTxPOW *) nil_chk([zNode getTxPow])) getParentID]]) {
        [((OrgMinimaDatabaseMmrMMRSet *) nil_chk([zNode getMMRSet])) setParentWithOrgMinimaDatabaseMmrMMRSet:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getMMRSet]];
      }
    }
    else {
      if (![((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) isCascade] && [((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getTxPowID])) isEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaObjectsTxPOW *) nil_chk([zNode getTxPow])) getParentID]]) {
        [((OrgMinimaDatabaseMmrMMRSet *) nil_chk([zNode getMMRSet])) setParentWithOrgMinimaDatabaseMmrMMRSet:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getMMRSet]];
      }
    }
  }
  mTip_ = zNode;
}

- (void)hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  mCascadeNode_ = zNode;
}

- (void)resetWeights {
  OrgMinimaDatabaseTxpowtreeBlockTree__zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, [self getChainRoot]);
  OrgMinimaDatabaseTxpowtreeBlockTree__cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, [self getChainRoot]);
  mTip_ = OrgMinimaDatabaseTxpowtreeBlockTree_getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, [self getChainRoot]);
}

- (void)_zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  OrgMinimaDatabaseTxpowtreeBlockTree__zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zNode);
}

- (void)_cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  OrgMinimaDatabaseTxpowtreeBlockTree__cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zNode);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zStartNode {
  return OrgMinimaDatabaseTxpowtreeBlockTree_getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zStartNode);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)findNodeWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTxPOWID {
  if ([self getChainRoot] == nil) {
    return nil;
  }
  return OrgMinimaDatabaseTxpowtreeBlockTree__findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaObjectsBaseMiniData_(self, [self getChainRoot], zTxPOWID);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)_findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zRoot
                                                                 withOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTxPOWID {
  return OrgMinimaDatabaseTxpowtreeBlockTree__findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaObjectsBaseMiniData_(self, zRoot, zTxPOWID);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNumber {
  return OrgMinimaDatabaseTxpowtreeBlockTree__getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zBlockNumber, mTip_);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)_getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNumber
                                                    withOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zTip {
  return OrgMinimaDatabaseTxpowtreeBlockTree__getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zBlockNumber, zTip);
}

- (JavaUtilArrayList *)getAsList {
  return [self getAsListWithBoolean:false];
}

- (JavaUtilArrayList *)getAsListWithBoolean:(jboolean)zReverse {
  JavaUtilArrayList *nodes = new_JavaUtilArrayList_init();
  if (mTip_ == nil) {
    return nodes;
  }
  [nodes addWithId:mTip_];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *tip = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getParent];
  while (tip != nil) {
    if (zReverse) {
      [nodes addWithInt:0 withId:tip];
    }
    else {
      [nodes addWithId:tip];
    }
    tip = [tip getParent];
  }
  return nodes;
}

- (OrgMinimaObjectsBaseMiniNumber *)getChainSpeed {
  OrgMinimaObjectsBaseMiniNumber *start = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mCascadeNode_)) getTxPow])) getTimeSecs];
  OrgMinimaObjectsBaseMiniNumber *end = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getTxPow])) getTimeSecs];
  OrgMinimaObjectsBaseMiniNumber *timediff = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(end)) subWithOrgMinimaObjectsBaseMiniNumber:start];
  OrgMinimaObjectsBaseMiniNumber *blockstart = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mCascadeNode_)) getTxPow])) getBlockNumber];
  OrgMinimaObjectsBaseMiniNumber *blockend = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mTip_)) getTxPow])) getBlockNumber];
  OrgMinimaObjectsBaseMiniNumber *blockdiff = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(blockend)) subWithOrgMinimaObjectsBaseMiniNumber:blockstart];
  if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(timediff)) isEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)]) {
    return JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE);
  }
  OrgMinimaObjectsBaseMiniNumber *speed = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(blockdiff)) divWithOrgMinimaObjectsBaseMiniNumber:timediff];
  return speed;
}

- (JavaMathBigInteger *)getAvgChainDifficulty {
  JavaMathBigInteger *total = new_JavaMathBigInteger_initWithNSString_(@"0");
  OrgMinimaObjectsBaseMiniData *casc = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(mCascadeNode_)) getTxPowID];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *current = mTip_;
  jint num = 0;
  while (current != nil) {
    total = [((JavaMathBigInteger *) nil_chk(total)) addWithJavaMathBigInteger:[((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([current getTxPow])) getBlockDifficulty])) getDataValue]];
    num++;
    if ([((OrgMinimaObjectsBaseMiniData *) nil_chk([current getTxPowID])) isEqualWithOrgMinimaObjectsBaseMiniData:casc]) {
      break;
    }
    current = [current getParent];
  }
  if (num == 0) {
    return JreLoadStatic(JavaMathBigInteger, ZERO);
  }
  JavaMathBigInteger *avg = [((JavaMathBigInteger *) nil_chk(total)) divideWithJavaMathBigInteger:new_JavaMathBigInteger_initWithNSString_(JreStrcat("I", num))];
  return avg;
}

- (void)clearTree {
  mRoot_ = nil;
  mTip_ = nil;
  mCascadeNode_ = nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x2, 8, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setTreeRootWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[2].selector = @selector(getChainRoot);
  methods[3].selector = @selector(getChainTip);
  methods[4].selector = @selector(getCascadeNode);
  methods[5].selector = @selector(addNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[6].selector = @selector(hardAddNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:withBoolean:);
  methods[7].selector = @selector(hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[8].selector = @selector(resetWeights);
  methods[9].selector = @selector(_zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[10].selector = @selector(_cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[11].selector = @selector(getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[12].selector = @selector(findNodeWithOrgMinimaObjectsBaseMiniData:);
  methods[13].selector = @selector(_findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:withOrgMinimaObjectsBaseMiniData:);
  methods[14].selector = @selector(getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber:);
  methods[15].selector = @selector(_getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber:withOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[16].selector = @selector(getAsList);
  methods[17].selector = @selector(getAsListWithBoolean:);
  methods[18].selector = @selector(getChainSpeed);
  methods[19].selector = @selector(getAvgChainDifficulty);
  methods[20].selector = @selector(clearTree);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRoot_", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTip_", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCascadeNode_", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTreeRoot", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", "addNode", "hardAddNode", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;Z", "hardSetCascadeNode", "_zeroWeights", "_cascadeWeights", "getHeaviestBranchTip", "findNode", "LOrgMinimaObjectsBaseMiniData;", "_findNode", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;LOrgMinimaObjectsBaseMiniData;", "getOnChainBlock", "LOrgMinimaObjectsBaseMiniNumber;", "_getOnChainBlock", "LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", "()Ljava/util/ArrayList<Lorg/minima/database/txpowtree/BlockTreeNode;>;", "getAsList", "Z", "(Z)Ljava/util/ArrayList<Lorg/minima/database/txpowtree/BlockTreeNode;>;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseTxpowtreeBlockTree = { "BlockTree", "org.minima.database.txpowtree", ptrTable, methods, fields, 7, 0x1, 21, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseTxpowtreeBlockTree;
}

@end

void OrgMinimaDatabaseTxpowtreeBlockTree_init(OrgMinimaDatabaseTxpowtreeBlockTree *self) {
  NSObject_init(self);
}

OrgMinimaDatabaseTxpowtreeBlockTree *new_OrgMinimaDatabaseTxpowtreeBlockTree_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseTxpowtreeBlockTree, init)
}

OrgMinimaDatabaseTxpowtreeBlockTree *create_OrgMinimaDatabaseTxpowtreeBlockTree_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseTxpowtreeBlockTree, init)
}

void OrgMinimaDatabaseTxpowtreeBlockTree__zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode) {
  [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) resetCurrentWeight];
  JavaUtilArrayList *children = [zNode getChildren];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong child in nil_chk(children)) {
    OrgMinimaDatabaseTxpowtreeBlockTree__zeroWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, child);
  }
}

void OrgMinimaDatabaseTxpowtreeBlockTree__cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode) {
  if ([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getState] != OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID) {
    return;
  }
  JavaMathBigInteger *weight = [zNode getWeight];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *parent = [zNode getParent];
  while (parent != nil) {
    [parent addToTotalWeightWithJavaMathBigInteger:weight];
    parent = [parent getParent];
  }
  JavaUtilArrayList *children = [zNode getChildren];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong child in nil_chk(children)) {
    OrgMinimaDatabaseTxpowtreeBlockTree__cascadeWeightsWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, child);
  }
}

OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree_getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zStartNode) {
  if ([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zStartNode)) getNumberChildren] > 0) {
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *max = nil;
    JavaUtilArrayList *children = [zStartNode getChildren];
    for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong node in nil_chk(children)) {
      if ([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(node)) getState] == OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID) {
        if (max == nil) {
          max = node;
        }
        else {
          if ([((JavaMathBigInteger *) nil_chk([node getTotalWeight])) compareToWithId:[max getTotalWeight]] > 0) {
            max = node;
          }
        }
      }
    }
    if (max != nil) {
      return OrgMinimaDatabaseTxpowtreeBlockTree_getHeaviestBranchTipWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, max);
    }
  }
  return zStartNode;
}

OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree__findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaObjectsBaseMiniData_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zRoot, OrgMinimaObjectsBaseMiniData *zTxPOWID) {
  if ([((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zRoot)) getTxPowID])) isEqualWithOrgMinimaObjectsBaseMiniData:zTxPOWID]) {
    return zRoot;
  }
  JavaUtilArrayList *children = [zRoot getChildren];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong child in nil_chk(children)) {
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *found = OrgMinimaDatabaseTxpowtreeBlockTree__findNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withOrgMinimaObjectsBaseMiniData_(self, child, zTxPOWID);
    if (found != nil) {
      return found;
    }
  }
  return nil;
}

OrgMinimaDatabaseTxpowtreeBlockTreeNode *OrgMinimaDatabaseTxpowtreeBlockTree__getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseTxpowtreeBlockTreeNode_(OrgMinimaDatabaseTxpowtreeBlockTree *self, OrgMinimaObjectsBaseMiniNumber *zBlockNumber, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zTip) {
  if (zTip == nil) {
    return nil;
  }
  if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([zTip getTxPow])) getBlockNumber])) isEqualWithOrgMinimaObjectsBaseMiniNumber:zBlockNumber]) {
    return zTip;
  }
  return OrgMinimaDatabaseTxpowtreeBlockTree__getOnChainBlockWithOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseTxpowtreeBlockTreeNode_(self, zBlockNumber, [zTip getParent]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseTxpowtreeBlockTree)
