//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/mmr/MMRProof.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "org/minima/database/mmr/MMRData.h"
#include "org/minima/database/mmr/MMRProof.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniInteger.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/objects/proofs/Proof.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaDatabaseMmrMMRProof

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseMmrMMRProof_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zEntryNumber
                        withOrgMinimaDatabaseMmrMMRData:(OrgMinimaDatabaseMmrMMRData *)zInitialData
                     withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockTime {
  OrgMinimaDatabaseMmrMMRProof_initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_(self, zEntryNumber, zInitialData, zBlockTime);
  return self;
}

- (OrgMinimaObjectsBaseMiniNumber *)getBlockTime {
  return mBlockTime_;
}

- (OrgMinimaObjectsBaseMiniInteger *)getEntryNumber {
  return mEntryNumber_;
}

- (OrgMinimaDatabaseMmrMMRData *)getMMRData {
  return mData_MMRProof_;
}

- (jboolean)checkCoinWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  OrgMinimaObjectsCoin *cc = [((OrgMinimaDatabaseMmrMMRData *) nil_chk([self getMMRData])) getCoin];
  jboolean coinidcheck = [((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk(cc)) getCoinID])) isEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaObjectsCoin *) nil_chk(zCoin)) getCoinID]];
  jboolean amountcheck = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk([cc getAmount])) isEqualWithOrgMinimaObjectsBaseMiniNumber:[zCoin getAmount]];
  jboolean addresscheck = [((OrgMinimaObjectsBaseMiniData *) nil_chk([cc getAddress])) isEqualWithOrgMinimaObjectsBaseMiniData:[zCoin getAddress]];
  jboolean tokencheck = [((OrgMinimaObjectsBaseMiniData *) nil_chk([cc getTokenID])) isEqualWithOrgMinimaObjectsBaseMiniData:[zCoin getTokenID]];
  return coinidcheck && amountcheck && addresscheck && tokencheck;
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *obj = new_OrgMinimaUtilsJsonJSONObject_init();
  (void) [obj putWithId:@"blocktime" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockTime_)) description]];
  (void) [obj putWithId:@"entry" withId:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(mEntryNumber_)) description]];
  (void) [obj putWithId:@"data" withId:[((OrgMinimaDatabaseMmrMMRData *) nil_chk(mData_MMRProof_)) toJSON]];
  (void) [obj putWithId:@"proof" withId:[super toJSON]];
  return obj;
}

- (NSString *)description {
  return [((OrgMinimaUtilsJsonJSONObject *) nil_chk([self toJSON])) description];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockTime_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniInteger *) nil_chk(mEntryNumber_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaDatabaseMmrMMRData *) nil_chk(mData_MMRProof_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [super writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mBlockTime_ = OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mEntryNumber_ = OrgMinimaObjectsBaseMiniInteger_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mData_MMRProof_ = OrgMinimaDatabaseMmrMMRData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  [super readDataStreamWithJavaIoDataInputStream:zIn];
}

+ (OrgMinimaDatabaseMmrMMRProof *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaDatabaseMmrMMRProof_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 6, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseMmrMMRProof;", 0x9, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaObjectsBaseMiniInteger:withOrgMinimaDatabaseMmrMMRData:withOrgMinimaObjectsBaseMiniNumber:);
  methods[2].selector = @selector(getBlockTime);
  methods[3].selector = @selector(getEntryNumber);
  methods[4].selector = @selector(getMMRData);
  methods[5].selector = @selector(checkCoinWithOrgMinimaObjectsCoin:);
  methods[6].selector = @selector(toJSON);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[9].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[10].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBlockTime_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEntryNumber_", "LOrgMinimaObjectsBaseMiniInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mData_MMRProof_", "LOrgMinimaDatabaseMmrMMRData;", .constantValue.asLong = 0, 0x0, 10, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsBaseMiniInteger;LOrgMinimaDatabaseMmrMMRData;LOrgMinimaObjectsBaseMiniNumber;", "checkCoin", "LOrgMinimaObjectsCoin;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", "mData" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseMmrMMRProof = { "MMRProof", "org.minima.database.mmr", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseMmrMMRProof;
}

@end

void OrgMinimaDatabaseMmrMMRProof_init(OrgMinimaDatabaseMmrMMRProof *self) {
  OrgMinimaObjectsProofsProof_init(self);
  self->mBlockTime_ = new_OrgMinimaObjectsBaseMiniNumber_initWithInt_(0);
  self->mEntryNumber_ = new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(0);
}

OrgMinimaDatabaseMmrMMRProof *new_OrgMinimaDatabaseMmrMMRProof_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMmrMMRProof, init)
}

OrgMinimaDatabaseMmrMMRProof *create_OrgMinimaDatabaseMmrMMRProof_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMmrMMRProof, init)
}

void OrgMinimaDatabaseMmrMMRProof_initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_(OrgMinimaDatabaseMmrMMRProof *self, OrgMinimaObjectsBaseMiniInteger *zEntryNumber, OrgMinimaDatabaseMmrMMRData *zInitialData, OrgMinimaObjectsBaseMiniNumber *zBlockTime) {
  OrgMinimaObjectsProofsProof_init(self);
  self->mBlockTime_ = new_OrgMinimaObjectsBaseMiniNumber_initWithInt_(0);
  self->mEntryNumber_ = new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(0);
  self->mEntryNumber_ = zEntryNumber;
  self->mData_MMRProof_ = zInitialData;
  self->mBlockTime_ = zBlockTime;
  [self setDataWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaDatabaseMmrMMRData *) nil_chk(self->mData_MMRProof_)) getFinalHash]];
}

OrgMinimaDatabaseMmrMMRProof *new_OrgMinimaDatabaseMmrMMRProof_initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniInteger *zEntryNumber, OrgMinimaDatabaseMmrMMRData *zInitialData, OrgMinimaObjectsBaseMiniNumber *zBlockTime) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMmrMMRProof, initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_, zEntryNumber, zInitialData, zBlockTime)
}

OrgMinimaDatabaseMmrMMRProof *create_OrgMinimaDatabaseMmrMMRProof_initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_(OrgMinimaObjectsBaseMiniInteger *zEntryNumber, OrgMinimaDatabaseMmrMMRData *zInitialData, OrgMinimaObjectsBaseMiniNumber *zBlockTime) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMmrMMRProof, initWithOrgMinimaObjectsBaseMiniInteger_withOrgMinimaDatabaseMmrMMRData_withOrgMinimaObjectsBaseMiniNumber_, zEntryNumber, zInitialData, zBlockTime)
}

OrgMinimaDatabaseMmrMMRProof *OrgMinimaDatabaseMmrMMRProof_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaDatabaseMmrMMRProof_initialize();
  OrgMinimaDatabaseMmrMMRProof *proof = new_OrgMinimaDatabaseMmrMMRProof_init();
  @try {
    [proof readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return proof;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseMmrMMRProof)
