//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/MinimaDB.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "org/minima/GlobalParams.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/coindb/CoinDB.h"
#include "org/minima/database/coindb/CoinDBRow.h"
#include "org/minima/database/coindb/java/JavaCoinDB.h"
#include "org/minima/database/mmr/MMRData.h"
#include "org/minima/database/mmr/MMREntry.h"
#include "org/minima/database/mmr/MMRProof.h"
#include "org/minima/database/mmr/MMRSet.h"
#include "org/minima/database/txpowdb/TxPOWDBRow.h"
#include "org/minima/database/txpowdb/TxPowDB.h"
#include "org/minima/database/txpowdb/java/JavaDB.h"
#include "org/minima/database/txpowtree/BlockTree.h"
#include "org/minima/database/txpowtree/BlockTreeNode.h"
#include "org/minima/database/txpowtree/CascadeTree.h"
#include "org/minima/database/userdb/UserDB.h"
#include "org/minima/database/userdb/java/JavaUserDB.h"
#include "org/minima/objects/Address.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/PubPrivKey.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniData32.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/system/backup/BackupManager.h"
#include "org/minima/system/backup/SyncPackage.h"
#include "org/minima/system/backup/SyncPacket.h"
#include "org/minima/system/bootstrap/GenesisTxPOW.h"
#include "org/minima/system/brains/ConsensusHandler.h"
#include "org/minima/system/brains/TxPOWChecker.h"
#include "org/minima/system/tx/TXMiner.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/Maths.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/messages/Message.h"

@interface OrgMinimaDatabaseMinimaDB () {
 @public
  id<OrgMinimaDatabaseTxpowdbTxPowDB> mTxPOWDB_;
  OrgMinimaDatabaseTxpowtreeBlockTree *mMainTree_;
  id<OrgMinimaDatabaseCoindbCoinDB> mCoinDB_;
  id<OrgMinimaDatabaseUserdbUserDB> mUserDB_;
}

- (void)addTreeChildrenWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zParentID;

- (void)sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode
                                                                   withInt:(jint)zParentState;

- (jboolean)checkFullTxPOWWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zBlock
                     withOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zMMRSet;

@end

J2OBJC_FIELD_SETTER(OrgMinimaDatabaseMinimaDB, mTxPOWDB_, id<OrgMinimaDatabaseTxpowdbTxPowDB>)
J2OBJC_FIELD_SETTER(OrgMinimaDatabaseMinimaDB, mMainTree_, OrgMinimaDatabaseTxpowtreeBlockTree *)
J2OBJC_FIELD_SETTER(OrgMinimaDatabaseMinimaDB, mCoinDB_, id<OrgMinimaDatabaseCoindbCoinDB>)
J2OBJC_FIELD_SETTER(OrgMinimaDatabaseMinimaDB, mUserDB_, id<OrgMinimaDatabaseUserdbUserDB>)

__attribute__((unused)) static void OrgMinimaDatabaseMinimaDB_addTreeChildrenWithOrgMinimaObjectsBaseMiniData32_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaObjectsBaseMiniData32 *zParentID);

__attribute__((unused)) static void OrgMinimaDatabaseMinimaDB_sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withInt_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode, jint zParentState);

__attribute__((unused)) static jboolean OrgMinimaDatabaseMinimaDB_checkFullTxPOWWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMmrMMRSet_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaObjectsTxPOW *zBlock, OrgMinimaDatabaseMmrMMRSet *zMMRSet);

@implementation OrgMinimaDatabaseMinimaDB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseMinimaDB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setBackupManagerWithOrgMinimaSystemBackupBackupManager:(OrgMinimaSystemBackupBackupManager *)zBackup {
  JreStrongAssign(&mBackup_, zBackup);
}

- (OrgMinimaSystemBackupBackupManager *)getBackup {
  return mBackup_;
}

- (void)DoGenesis {
  OrgMinimaObjectsTxPOW *gen = create_OrgMinimaSystemBootstrapGenesisTxPOW_init();
  id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) addTxPOWDBRowWithOrgMinimaObjectsTxPOW:gen];
  [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) setOnChainBlockWithBoolean:true];
  [row setInBlockNumberWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)];
  [row setIsInBlockWithBoolean:true];
  [row setBlockStateWithInt:OrgMinimaDatabaseTxpowdbTxPOWDBRow_TXPOWDBROW_STATE_FULL];
  OrgMinimaDatabaseMmrMMRSet *base = create_OrgMinimaDatabaseMmrMMRSet_init();
  OrgMinimaObjectsCoin *gencoin = create_OrgMinimaObjectsCoin_initWithOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniData32_(create_OrgMinimaObjectsBaseMiniData32_init(), [((OrgMinimaObjectsAddress *) nil_chk(JreLoadStatic(OrgMinimaObjectsAddress, TRUE_ADDRESS))) getAddressData], JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO), JreLoadStatic(OrgMinimaObjectsBaseMiniData32, ZERO32));
  OrgMinimaDatabaseMmrMMRData *gendata = create_OrgMinimaDatabaseMmrMMRData_initWithOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsCoin_withOrgMinimaObjectsBaseMiniNumber_withJavaUtilArrayList_(JreLoadStatic(OrgMinimaObjectsBaseMiniByte, FALSE), gencoin, JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO), create_JavaUtilArrayList_init());
  [base addUnspentCoinWithOrgMinimaDatabaseMmrMMRData:gendata];
  [gen setMMRRootWithOrgMinimaObjectsBaseMiniData32:[base getMMRRoot]];
  [gen calculateTXPOWID];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *root = create_OrgMinimaDatabaseTxpowtreeBlockTreeNode_initWithOrgMinimaObjectsTxPOW_(gen);
  [root setStateWithInt:OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID];
  [root setCascadeWithBoolean:false];
  [root setMMRsetWithOrgMinimaDatabaseMmrMMRSet:base];
  [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) setTreeRootWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:root];
}

- (OrgMinimaObjectsTxPOW *)getTxPOWWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPOWID {
  id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:zTxPOWID];
  if (row == nil) {
    return nil;
  }
  return [row getTxPOW];
}

- (jboolean)isTxPOWFoundWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPOWID {
  return [self getTxPOWWithOrgMinimaObjectsBaseMiniData32:zTxPOWID] != nil;
}

- (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>)getTxPOWRowWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPOWID {
  return [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:zTxPOWID];
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)getBlockTreeNodeWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTxPowID {
  return [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) findNodeWithOrgMinimaObjectsBaseMiniData32:zTxPowID];
}

- (void)processTxPOWWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPow {
  jboolean treeadded = false;
  if ([((OrgMinimaObjectsTxPOW *) nil_chk(zTxPow)) isBlock]) {
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *node = create_OrgMinimaDatabaseTxpowtreeBlockTreeNode_initWithOrgMinimaObjectsTxPOW_(zTxPow);
    treeadded = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) addNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:node];
    if (treeadded) {
      OrgMinimaDatabaseMinimaDB_addTreeChildrenWithOrgMinimaObjectsBaseMiniData32_(self, [zTxPow getTxPowID]);
    }
  }
  JavaUtilArrayList *unfinishedblocks = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) getAllBlocksMissingTransactions];
  jboolean newfullblock = false;
  for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong unblock in nil_chk(unfinishedblocks)) {
    jboolean allok = true;
    JavaUtilArrayList *txns = [((OrgMinimaObjectsTxPOW *) nil_chk([((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(unblock)) getTxPOW])) getBlockTxns];
    for (OrgMinimaObjectsBaseMiniData32 * __strong txnid in nil_chk(txns)) {
      if ([self getTxPOWWithOrgMinimaObjectsBaseMiniData32:txnid] == nil) {
        allok = false;
        break;
      }
    }
    if (allok) {
      [unblock setBlockStateWithInt:OrgMinimaDatabaseTxpowdbTxPOWDBRow_TXPOWDBROW_STATE_FULL];
      newfullblock = true;
    }
  }
  if (treeadded || newfullblock) {
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *tip = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainTip];
    OrgMinimaDatabaseMinimaDB_sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withInt_(self, [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainRoot], OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID);
    [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) resetWeights];
    OrgMinimaDatabaseTxpowtreeBlockTreeNode *newtip = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainTip];
    if ([((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(newtip)) getTxPowID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(tip)) getTxPowID]]) {
      return;
    }
    JavaUtilArrayList *list = nil;
    if ([((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([newtip getParent])) getTxPowID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:[tip getTxPowID]]) {
      list = create_JavaUtilArrayList_init();
      [list addWithId:newtip];
    }
    else {
      list = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getAsList];
      [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) resetAllInBlocks];
      [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk(mCoinDB_)) clearDB];
    }
    OrgMinimaObjectsBaseMiniNumber *oldcascade = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([self getMainTree])) getCascadeNode])) getTxPow])) getBlockNumber];
    JavaUtilCollections_reverseWithJavaUtilList_(list);
    for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong treenode in nil_chk(list)) {
      OrgMinimaObjectsTxPOW *txpow = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(treenode)) getTxPow];
      id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> trow = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) addTxPOWDBRowWithOrgMinimaObjectsTxPOW:txpow];
      OrgMinimaObjectsBaseMiniNumber *block = [((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) getBlockNumber];
      [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(trow)) setOnChainBlockWithBoolean:true];
      [trow setIsInBlockWithBoolean:true];
      [trow setInBlockNumberWithOrgMinimaObjectsBaseMiniNumber:block];
      if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([treenode getTxPow])) getBlockNumber])) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:oldcascade]) {
        [self scanMMRSetForCoinsWithOrgMinimaDatabaseMmrMMRSet:[treenode getMMRSet] withBoolean:false];
      }
      JavaUtilArrayList *txpowlist = [txpow getBlockTxns];
      for (OrgMinimaObjectsBaseMiniData32 * __strong txid in nil_chk(txpowlist)) {
        trow = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) findTxPOWDBRowWithOrgMinimaObjectsBaseMiniData32:txid];
        if (trow != nil) {
          [trow setOnChainBlockWithBoolean:false];
          [trow setIsInBlockWithBoolean:true];
          [trow setInBlockNumberWithOrgMinimaObjectsBaseMiniNumber:block];
        }
      }
    }
    OrgMinimaDatabaseTxpowtreeCascadeTree *casc = create_OrgMinimaDatabaseTxpowtreeCascadeTree_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withOrgMinimaDatabaseMinimaDB_(mMainTree_, self);
    JavaUtilArrayList *removals = [casc cascadedTree];
    JreStrongAssign(&mMainTree_, [casc getCascadeTree]);
    OrgMinimaObjectsBaseMiniNumber *cascade = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getCascadeNode])) getTxPow])) getBlockNumber];
    JavaUtilArrayList *remrows = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) removeTxPOWInBlockLessThanWithOrgMinimaObjectsBaseMiniNumber:cascade];
    for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong remrow in nil_chk(remrows)) {
      [((OrgMinimaSystemBackupBackupManager *) nil_chk([self getBackup])) deleteTxpowWithOrgMinimaObjectsTxPOW:[((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(remrow)) getTxPOW]];
    }
    for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong node in nil_chk(removals)) {
      [((OrgMinimaSystemBackupBackupManager *) nil_chk([self getBackup])) deleteTxpowWithOrgMinimaObjectsTxPOW:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(node)) getTxPow]];
    }
    [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk(mCoinDB_)) removeOldSpentCoinsWithOrgMinimaObjectsBaseMiniNumber:cascade];
  }
}

- (void)scanMMRSetForCoinsWithOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zMMRSet
                                             withBoolean:(jboolean)zAddKeeper {
  if (zMMRSet == nil) {
    return;
  }
  JavaUtilArrayList *entries = [zMMRSet getZeroRow];
  for (OrgMinimaDatabaseMmrMMREntry * __strong mmrcoin in nil_chk(entries)) {
    if (![((OrgMinimaDatabaseMmrMMRData *) nil_chk([((OrgMinimaDatabaseMmrMMREntry *) nil_chk(mmrcoin)) getData])) isHashOnly]) {
      OrgMinimaObjectsCoin *cc = [((OrgMinimaDatabaseMmrMMRData *) nil_chk([mmrcoin getData])) getCoin];
      if ([((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([self getUserDB])) isAddressRelevantWithOrgMinimaObjectsBaseMiniData32:[((OrgMinimaObjectsCoin *) nil_chk(cc)) getAddress]]) {
        if (zAddKeeper) {
          [zMMRSet addKeeperWithOrgMinimaObjectsBaseMiniNumber:[mmrcoin getEntry]];
        }
        id<OrgMinimaDatabaseCoindbCoinDBRow> inrow = [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk([self getCoinDB])) addCoinRowWithOrgMinimaObjectsCoin:cc];
        jboolean doit = true;
        jboolean spent = [((OrgMinimaDatabaseMmrMMRData *) nil_chk([mmrcoin getData])) isSpent];
        if ([((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(inrow)) isInBlock]) {
          if ([inrow isSpent] == spent) {
            doit = false;
          }
        }
        if (doit) {
          [inrow setIsSpentWithBoolean:[((OrgMinimaDatabaseMmrMMRData *) nil_chk([mmrcoin getData])) isSpent]];
          [inrow setIsInBlockWithBoolean:true];
          [inrow setInBlockNumberWithOrgMinimaObjectsBaseMiniNumber:[zMMRSet getBlockTime]];
          [inrow setMMREntryWithOrgMinimaObjectsBaseMiniNumber:[mmrcoin getEntry]];
        }
      }
    }
  }
}

- (void)addTreeChildrenWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zParentID {
  OrgMinimaDatabaseMinimaDB_addTreeChildrenWithOrgMinimaObjectsBaseMiniData32_(self, zParentID);
}

- (void)sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode
                                                                   withInt:(jint)zParentState {
  OrgMinimaDatabaseMinimaDB_sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withInt_(self, zNode, zParentState);
}

- (jboolean)checkFullTxPOWWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zBlock
                     withOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zMMRSet {
  return OrgMinimaDatabaseMinimaDB_checkFullTxPOWWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMmrMMRSet_(self, zBlock, zMMRSet);
}

- (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>)addNewTxPowWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  return [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) addTxPOWDBRowWithOrgMinimaObjectsTxPOW:zTxPOW];
}

- (jboolean)isChainRoot {
  return ([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainRoot] != nil);
}

- (OrgMinimaDatabaseTxpowtreeBlockTreeNode *)hardAddTxPOWBlockWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zRoot
                                                         withOrgMinimaDatabaseMmrMMRSet:(OrgMinimaDatabaseMmrMMRSet *)zMMR
                                                                            withBoolean:(jboolean)zCascade {
  id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) addTxPOWDBRowWithOrgMinimaObjectsTxPOW:zRoot];
  [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) setIsInBlockWithBoolean:true];
  [row setOnChainBlockWithBoolean:true];
  [row setInBlockNumberWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsTxPOW *) nil_chk(zRoot)) getBlockNumber]];
  [row setBlockStateWithInt:OrgMinimaDatabaseTxpowdbTxPOWDBRow_TXPOWDBROW_STATE_FULL];
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *node = create_OrgMinimaDatabaseTxpowtreeBlockTreeNode_initWithOrgMinimaObjectsTxPOW_(zRoot);
  [node setCascadeWithBoolean:zCascade];
  [node setStateWithInt:OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID];
  [node setMMRsetWithOrgMinimaDatabaseMmrMMRSet:zMMR];
  [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) hardAddNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:node withBoolean:true];
  return node;
}

- (void)hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:(OrgMinimaDatabaseTxpowtreeBlockTreeNode *)zNode {
  [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:zNode];
}

- (void)hardResetChain {
  OrgMinimaDatabaseTxpowtreeCascadeTree *casc = create_OrgMinimaDatabaseTxpowtreeCascadeTree_initWithOrgMinimaDatabaseTxpowtreeBlockTree_withOrgMinimaDatabaseMinimaDB_(mMainTree_, self);
  [casc cascadedTree];
  JreStrongAssign(&mMainTree_, [casc getCascadeTree]);
}

- (JavaUtilArrayList *)getTotalSimpleSpendableCoinsWithOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTokenID {
  JavaUtilArrayList *confirmed = create_JavaUtilArrayList_init();
  OrgMinimaObjectsBaseMiniNumber *top = [self getTopBlock];
  JavaUtilArrayList *relevant = [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk([self getCoinDB])) getComplete];
  for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong row in nil_chk(relevant)) {
    if ([((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(row)) isInBlock] && ![row isSpent]) {
      OrgMinimaObjectsBaseMiniNumber *depth = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(top)) subWithOrgMinimaObjectsBaseMiniNumber:[row getInBlockNumber]];
      if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(depth)) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaGlobalParams, MINIMA_CONFIRM_DEPTH)] && [((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk([row getCoin])) getTokenID])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zTokenID]) {
        if ([((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([self getUserDB])) isSimpleAddressWithOrgMinimaObjectsBaseMiniData32:[((OrgMinimaObjectsCoin *) nil_chk([row getCoin])) getAddress]]) {
          [confirmed addWithId:[row getCoin]];
        }
      }
    }
  }
  return confirmed;
}

- (OrgMinimaUtilsMessagesMessage *)createTransactionWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zAmount
                                                           withOrgMinimaObjectsAddress:(OrgMinimaObjectsAddress *)zToAddress
                                                           withOrgMinimaObjectsAddress:(OrgMinimaObjectsAddress *)zChangeAddress
                                                                 withJavaUtilArrayList:(JavaUtilArrayList *)zConfirmed
                                                    withOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zTokenID
                                                    withOrgMinimaObjectsBaseMiniData32:(OrgMinimaObjectsBaseMiniData32 *)zChangeTokenID {
  OrgMinimaObjectsTransaction *trx = create_OrgMinimaObjectsTransaction_init();
  OrgMinimaObjectsWitness *wit = create_OrgMinimaObjectsWitness_init();
  JavaUtilArrayList *sigpubk = create_JavaUtilArrayList_init();
  OrgMinimaDatabaseMmrMMRSet *basemmr = [((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([self getMainTree])) getChainTip])) getMMRSet];
  OrgMinimaDatabaseMmrMMRSet *proofmmr = [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(basemmr)) getParentAtTimeWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk([self getTopBlock])) subWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaGlobalParams, MINIMA_CONFIRM_DEPTH)]];
  OrgMinimaObjectsBaseMiniNumber *currentin = create_OrgMinimaObjectsBaseMiniNumber_init();
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(zConfirmed)) {
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(currentin)) isLessWithOrgMinimaObjectsBaseMiniNumber:zAmount]) {
      NSString *script = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([self getUserDB])) getScriptWithOrgMinimaObjectsBaseMiniData32:[((OrgMinimaObjectsCoin *) nil_chk(cc)) getAddress]];
      if ([((NSString *) nil_chk(script)) isEqual:@""]) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$", @"ERROR UNKNOWN ADDRESS ", [cc getAddress], @" not in database..")];
        return nil;
      }
      [trx addInputWithOrgMinimaObjectsCoin:cc];
      [wit addScriptWithNSString:script];
      id<OrgMinimaDatabaseCoindbCoinDBRow> row = [((id<OrgMinimaDatabaseCoindbCoinDB>) nil_chk([self getCoinDB])) getCoinRowWithOrgMinimaObjectsBaseMiniData32:[cc getCoinID]];
      OrgMinimaDatabaseMmrMMRProof *proof = [((OrgMinimaDatabaseMmrMMRSet *) nil_chk(proofmmr)) getProofWithOrgMinimaObjectsBaseMiniNumber:[((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(row)) getMMREntry]];
      if (proof == nil) {
        OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"ERROR NULL PROOF ", row));
        return nil;
      }
      [wit addMMRProofWithOrgMinimaDatabaseMmrMMRProof:proof];
      OrgMinimaObjectsBaseMiniData *pubk = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([self getUserDB])) getPublicKeyWithOrgMinimaObjectsBaseMiniData32:[cc getAddress]];
      [sigpubk addWithId:pubk];
      currentin = [currentin addWithOrgMinimaObjectsBaseMiniNumber:[cc getAmount]];
    }
    else {
      break;
    }
  }
  if ([currentin isLessWithOrgMinimaObjectsBaseMiniNumber:zAmount]) {
    OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"ERROR Insufficient funds!! ", currentin));
    return nil;
  }
  OrgMinimaObjectsCoin *out = create_OrgMinimaObjectsCoin_initWithOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniData32_(JreLoadStatic(OrgMinimaObjectsCoin, COINID_OUTPUT), [((OrgMinimaObjectsAddress *) nil_chk(zToAddress)) getAddressData], zAmount, zTokenID);
  [trx addOutputWithOrgMinimaObjectsCoin:out];
  OrgMinimaObjectsBaseMiniNumber *change = [currentin subWithOrgMinimaObjectsBaseMiniNumber:zAmount];
  if (![((OrgMinimaObjectsBaseMiniNumber *) nil_chk(change)) isEqualWithOrgMinimaObjectsBaseMiniNumber:JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO)]) {
    OrgMinimaObjectsCoin *chg = create_OrgMinimaObjectsCoin_initWithOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniData32_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniData32_(JreLoadStatic(OrgMinimaObjectsCoin, COINID_OUTPUT), [((OrgMinimaObjectsAddress *) nil_chk(zChangeAddress)) getAddressData], change, zChangeTokenID);
    [trx addOutputWithOrgMinimaObjectsCoin:chg];
  }
  OrgMinimaObjectsBaseMiniData32 *transhash = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:trx];
  for (OrgMinimaObjectsBaseMiniData * __strong pubk in sigpubk) {
    OrgMinimaObjectsPubPrivKey *signer = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([self getUserDB])) getPubPrivKeyWithOrgMinimaObjectsBaseMiniData:pubk];
    OrgMinimaObjectsBaseMiniData *signature = [((OrgMinimaObjectsPubPrivKey *) nil_chk(signer)) signWithOrgMinimaObjectsBaseMiniData32:transhash];
    [wit addSignatureWithOrgMinimaObjectsBaseMiniData:pubk withOrgMinimaObjectsBaseMiniData:signature];
  }
  OrgMinimaUtilsMessagesMessage *ret = create_OrgMinimaUtilsMessagesMessage_initWithNSString_(OrgMinimaSystemBrainsConsensusHandler_CONSENSUS_SENDTRANS);
  [ret addObjectWithNSString:@"transaction" withId:trx];
  [ret addObjectWithNSString:@"witness" withId:wit];
  return ret;
}

- (OrgMinimaObjectsTxPOW *)getCurrentTxPowWithOrgMinimaObjectsTransaction:(OrgMinimaObjectsTransaction *)zTrans
                                              withOrgMinimaObjectsWitness:(OrgMinimaObjectsWitness *)zWitness {
  OrgMinimaDatabaseTxpowtreeBlockTreeNode *tip = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainTip];
  OrgMinimaObjectsTxPOW *txpow = create_OrgMinimaObjectsTxPOW_init();
  [txpow setTimeMilliWithOrgMinimaObjectsBaseMiniNumber:create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(JreStrcat("J", JavaLangSystem_currentTimeMillis()))];
  [txpow setTransactionWithOrgMinimaObjectsTransaction:zTrans];
  [txpow setWitnessWithOrgMinimaObjectsWitness:zWitness];
  [txpow setTxDifficultyWithInt:OrgMinimaSystemTxTXMiner_BASE_TXN];
  [txpow setBlockDifficultyWithInt:OrgMinimaSystemTxTXMiner_BASE_BLOCK];
  [txpow setBlockNumberWithOrgMinimaObjectsBaseMiniNumber:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(tip)) getTxPow])) getBlockNumber])) increment]];
  [txpow setParentWithOrgMinimaObjectsBaseMiniData32:[tip getTxPowID]];
  {
    jint len = [((JavaUtilArrayList *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getAsList])) size];
    if (len > OrgMinimaGlobalParams_MINIMA_CASCADE_DEPTH) {
      jdouble actualspeed = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getChainSpeed];
      jdouble speedratio = actualspeed / OrgMinimaGlobalParams_MINIMA_BLOCK_SPEED;
      OrgMinimaObjectsBaseMiniNumber *avgdiff = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(mMainTree_)) getAvgChainDifficulty];
      OrgMinimaObjectsBaseMiniNumber *newdiff = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(avgdiff)) multWithOrgMinimaObjectsBaseMiniNumber:create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(JreStrcat("D", speedratio))];
      jdouble log = OrgMinimaUtilsMaths_log2BIWithJavaMathBigInteger_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(newdiff)) getAsBigInteger]);
      [txpow setBlockDifficultyWithInt:JreFpToInt(log)];
    }
  }
  for (jint i = 0; i < OrgMinimaObjectsTxPOW_SUPERPARENT_NUM; i++) {
    IOSObjectArray_Set(nil_chk(txpow->mSuperParents_), i, IOSObjectArray_Get(nil_chk(((OrgMinimaObjectsTxPOW *) nil_chk([tip getTxPow]))->mSuperParents_), i));
  }
  jint sbl = [tip getSuperBlockLevel];
  OrgMinimaObjectsBaseMiniData32 *tiptxid = [tip getTxPowID];
  for (jint i = sbl; i >= 0; i--) {
    IOSObjectArray_Set(nil_chk(txpow->mSuperParents_), i, tiptxid);
  }
  OrgMinimaDatabaseMmrMMRSet *newset = create_OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_([tip getMMRSet]);
  if (![((OrgMinimaObjectsTransaction *) nil_chk(zTrans)) isEmpty]) {
    jboolean valid = OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(zTrans, zWitness, self, [txpow getBlockNumber], newset, true);
    if (!valid) {
      OrgMinimaUtilsMinimaLogger_logWithNSString_(@"ERROR: Your own transaction is invalid !?");
      return nil;
    }
  }
  __unused JavaUtilArrayList *unused = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) getAllUnusedTxPOW];
  for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong row in nil_chk(unused)) {
    OrgMinimaObjectsTxPOW *txp = [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) getTxPOW];
    if ([((OrgMinimaObjectsTxPOW *) nil_chk(txp)) isTransaction]) {
      OrgMinimaObjectsTransaction *trans = [txp getTransaction];
      OrgMinimaObjectsWitness *wit = [txp getWitness];
      jboolean valid = OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(trans, wit, self, [txpow getBlockNumber], newset, true);
      if (valid) {
        [txpow addBlockTxPOWWithOrgMinimaObjectsTxPOW:txp];
      }
      else {
        [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(mTxPOWDB_)) removeTxPOWWithOrgMinimaObjectsBaseMiniData32:[txp getTxPowID]];
        [((OrgMinimaSystemBackupBackupManager *) nil_chk([self getBackup])) deleteTxpowWithOrgMinimaObjectsTxPOW:txp];
        OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$@", @"Removing invalid TXPOW.. ", txp));
      }
    }
  }
  OrgMinimaObjectsBaseMiniData32 *root = [newset getMMRRoot];
  [txpow setMMRRootWithOrgMinimaObjectsBaseMiniData32:root];
  return txpow;
}

- (OrgMinimaObjectsBaseMiniNumber *)getTopBlock {
  return [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([self getMainTree])) getChainTip])) getTxPow])) getBlockNumber];
}

- (jint)getIntroSyncSize {
  OrgMinimaSystemBackupSyncPackage *sp = create_OrgMinimaSystemBackupSyncPackage_init();
  JavaUtilArrayList *nodes = [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([self getMainTree])) getAsList];
  OrgMinimaObjectsBaseMiniNumber *casc = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk([self getMainTree])) getCascadeNode])) getTxPow])) getBlockNumber];
  [sp setCascadeNodeWithOrgMinimaObjectsBaseMiniNumber:casc];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong node in nil_chk(nodes)) {
    OrgMinimaObjectsBaseMiniNumber *block = [((OrgMinimaObjectsTxPOW *) nil_chk([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(node)) getTxPow])) getBlockNumber];
    [((JavaUtilArrayList *) nil_chk([sp getAllNodes])) addWithInt:0 withId:create_OrgMinimaSystemBackupSyncPacket_initWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withBoolean_(node, [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(block)) isLessEqualWithOrgMinimaObjectsBaseMiniNumber:casc])];
  }
  @try {
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
    JavaIoDataOutputStream *dos = create_JavaIoDataOutputStream_initWithJavaIoOutputStream_(baos);
    [sp writeDataStreamWithJavaIoDataOutputStream:dos];
    [dos flush];
    [dos close];
    return ((IOSByteArray *) nil_chk([baos toByteArray]))->size_;
  }
  @catch (JavaLangException *exc) {
    [exc printStackTrace];
  }
  return 0;
}

- (OrgMinimaDatabaseTxpowtreeBlockTree *)getMainTree {
  return mMainTree_;
}

- (id<OrgMinimaDatabaseTxpowdbTxPowDB>)getTxPowDB {
  return mTxPOWDB_;
}

- (id<OrgMinimaDatabaseCoindbCoinDB>)getCoinDB {
  return mCoinDB_;
}

- (id<OrgMinimaDatabaseUserdbUserDB>)getUserDB {
  return mUserDB_;
}

- (void)setUserDBWithOrgMinimaDatabaseUserdbJavaJavaUserDB:(OrgMinimaDatabaseUserdbJavaJavaUserDB *)zJDB {
  JreStrongAssign(&mUserDB_, zJDB);
}

- (void)dealloc {
  RELEASE_(mTxPOWDB_);
  RELEASE_(mMainTree_);
  RELEASE_(mCoinDB_);
  RELEASE_(mUserDB_);
  RELEASE_(mBackup_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaSystemBackupBackupManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTxPOW;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowdbTxPOWDBRow;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowdbTxPOWDBRow;", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 21, 3, -1, 22, -1, -1 },
    { NULL, "LOrgMinimaUtilsMessagesMessage;", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "LOrgMinimaObjectsTxPOW;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowtreeBlockTree;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseTxpowdbTxPowDB;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseCoindbCoinDB;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseUserdbUserDB;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setBackupManagerWithOrgMinimaSystemBackupBackupManager:);
  methods[2].selector = @selector(getBackup);
  methods[3].selector = @selector(DoGenesis);
  methods[4].selector = @selector(getTxPOWWithOrgMinimaObjectsBaseMiniData32:);
  methods[5].selector = @selector(isTxPOWFoundWithOrgMinimaObjectsBaseMiniData32:);
  methods[6].selector = @selector(getTxPOWRowWithOrgMinimaObjectsBaseMiniData32:);
  methods[7].selector = @selector(getBlockTreeNodeWithOrgMinimaObjectsBaseMiniData32:);
  methods[8].selector = @selector(processTxPOWWithOrgMinimaObjectsTxPOW:);
  methods[9].selector = @selector(scanMMRSetForCoinsWithOrgMinimaDatabaseMmrMMRSet:withBoolean:);
  methods[10].selector = @selector(addTreeChildrenWithOrgMinimaObjectsBaseMiniData32:);
  methods[11].selector = @selector(sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:withInt:);
  methods[12].selector = @selector(checkFullTxPOWWithOrgMinimaObjectsTxPOW:withOrgMinimaDatabaseMmrMMRSet:);
  methods[13].selector = @selector(addNewTxPowWithOrgMinimaObjectsTxPOW:);
  methods[14].selector = @selector(isChainRoot);
  methods[15].selector = @selector(hardAddTxPOWBlockWithOrgMinimaObjectsTxPOW:withOrgMinimaDatabaseMmrMMRSet:withBoolean:);
  methods[16].selector = @selector(hardSetCascadeNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:);
  methods[17].selector = @selector(hardResetChain);
  methods[18].selector = @selector(getTotalSimpleSpendableCoinsWithOrgMinimaObjectsBaseMiniData32:);
  methods[19].selector = @selector(createTransactionWithOrgMinimaObjectsBaseMiniNumber:withOrgMinimaObjectsAddress:withOrgMinimaObjectsAddress:withJavaUtilArrayList:withOrgMinimaObjectsBaseMiniData32:withOrgMinimaObjectsBaseMiniData32:);
  methods[20].selector = @selector(getCurrentTxPowWithOrgMinimaObjectsTransaction:withOrgMinimaObjectsWitness:);
  methods[21].selector = @selector(getTopBlock);
  methods[22].selector = @selector(getIntroSyncSize);
  methods[23].selector = @selector(getMainTree);
  methods[24].selector = @selector(getTxPowDB);
  methods[25].selector = @selector(getCoinDB);
  methods[26].selector = @selector(getUserDB);
  methods[27].selector = @selector(setUserDBWithOrgMinimaDatabaseUserdbJavaJavaUserDB:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTxPOWDB_", "LOrgMinimaDatabaseTxpowdbTxPowDB;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMainTree_", "LOrgMinimaDatabaseTxpowtreeBlockTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCoinDB_", "LOrgMinimaDatabaseCoindbCoinDB;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUserDB_", "LOrgMinimaDatabaseUserdbUserDB;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackup_", "LOrgMinimaSystemBackupBackupManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setBackupManager", "LOrgMinimaSystemBackupBackupManager;", "getTxPOW", "LOrgMinimaObjectsBaseMiniData32;", "isTxPOWFound", "getTxPOWRow", "getBlockTreeNode", "processTxPOW", "LOrgMinimaObjectsTxPOW;", "scanMMRSetForCoins", "LOrgMinimaDatabaseMmrMMRSet;Z", "addTreeChildren", "sortBlockTreeNodeStates", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;I", "checkFullTxPOW", "LOrgMinimaObjectsTxPOW;LOrgMinimaDatabaseMmrMMRSet;", "addNewTxPow", "hardAddTxPOWBlock", "LOrgMinimaObjectsTxPOW;LOrgMinimaDatabaseMmrMMRSet;Z", "hardSetCascadeNode", "LOrgMinimaDatabaseTxpowtreeBlockTreeNode;", "getTotalSimpleSpendableCoins", "(Lorg/minima/objects/base/MiniData32;)Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;", "createTransaction", "LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaObjectsAddress;LOrgMinimaObjectsAddress;LJavaUtilArrayList;LOrgMinimaObjectsBaseMiniData32;LOrgMinimaObjectsBaseMiniData32;", "(Lorg/minima/objects/base/MiniNumber;Lorg/minima/objects/Address;Lorg/minima/objects/Address;Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;Lorg/minima/objects/base/MiniData32;Lorg/minima/objects/base/MiniData32;)Lorg/minima/utils/messages/Message;", "getCurrentTxPow", "LOrgMinimaObjectsTransaction;LOrgMinimaObjectsWitness;", "setUserDB", "LOrgMinimaDatabaseUserdbJavaJavaUserDB;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseMinimaDB = { "MinimaDB", "org.minima.database", ptrTable, methods, fields, 7, 0x1, 28, 5, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseMinimaDB;
}

@end

void OrgMinimaDatabaseMinimaDB_init(OrgMinimaDatabaseMinimaDB *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mBackup_, nil);
  JreStrongAssignAndConsume(&self->mTxPOWDB_, new_OrgMinimaDatabaseTxpowdbJavaJavaDB_init());
  JreStrongAssignAndConsume(&self->mMainTree_, new_OrgMinimaDatabaseTxpowtreeBlockTree_init());
  JreStrongAssignAndConsume(&self->mCoinDB_, new_OrgMinimaDatabaseCoindbJavaJavaCoinDB_init());
  JreStrongAssignAndConsume(&self->mUserDB_, new_OrgMinimaDatabaseUserdbJavaJavaUserDB_init());
}

OrgMinimaDatabaseMinimaDB *new_OrgMinimaDatabaseMinimaDB_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseMinimaDB, init)
}

OrgMinimaDatabaseMinimaDB *create_OrgMinimaDatabaseMinimaDB_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseMinimaDB, init)
}

void OrgMinimaDatabaseMinimaDB_addTreeChildrenWithOrgMinimaObjectsBaseMiniData32_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaObjectsBaseMiniData32 *zParentID) {
  __unused JavaUtilArrayList *unused_children = [((id<OrgMinimaDatabaseTxpowdbTxPowDB>) nil_chk(self->mTxPOWDB_)) getChildBlocksTxPOWWithOrgMinimaObjectsBaseMiniData32:zParentID];
  for (id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> __strong txp in nil_chk(unused_children)) {
    [((OrgMinimaDatabaseTxpowtreeBlockTree *) nil_chk(self->mMainTree_)) addNodeWithOrgMinimaDatabaseTxpowtreeBlockTreeNode:create_OrgMinimaDatabaseTxpowtreeBlockTreeNode_initWithOrgMinimaObjectsTxPOW_([((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(txp)) getTxPOW])];
    OrgMinimaDatabaseMinimaDB_addTreeChildrenWithOrgMinimaObjectsBaseMiniData32_(self, [((OrgMinimaObjectsTxPOW *) nil_chk([txp getTxPOW])) getTxPowID]);
  }
}

void OrgMinimaDatabaseMinimaDB_sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withInt_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaDatabaseTxpowtreeBlockTreeNode *zNode, jint zParentState) {
  id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [self getTxPOWRowWithOrgMinimaObjectsBaseMiniData32:[((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk(zNode)) getTxPowID]];
  if (zParentState == OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_INVALID) {
    [zNode setStateWithInt:OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_INVALID];
  }
  else if (zParentState == OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID) {
    if ([zNode getState] == OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_BASIC && [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) getBlockState] == OrgMinimaDatabaseTxpowdbTxPOWDBRow_TXPOWDBROW_STATE_FULL) {
      jboolean allok = true;
      OrgMinimaDatabaseMmrMMRSet *mmrset = create_OrgMinimaDatabaseMmrMMRSet_initWithOrgMinimaDatabaseMmrMMRSet_([((OrgMinimaDatabaseTxpowtreeBlockTreeNode *) nil_chk([zNode getParent])) getMMRSet]);
      [zNode setMMRsetWithOrgMinimaDatabaseMmrMMRSet:mmrset];
      allok = OrgMinimaDatabaseMinimaDB_checkFullTxPOWWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMmrMMRSet_(self, [zNode getTxPow], mmrset);
      if (allok) {
        OrgMinimaObjectsBaseMiniData32 *root = [mmrset getMMRRoot];
        if (![((OrgMinimaObjectsBaseMiniData32 *) nil_chk([((OrgMinimaObjectsTxPOW *) nil_chk([((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) getTxPOW])) getMMRRoot])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:root]) {
          allok = false;
        }
      }
      if (allok) {
        [zNode setStateWithInt:OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_VALID];
      }
      else {
        [zNode setStateWithInt:OrgMinimaDatabaseTxpowtreeBlockTreeNode_BLOCKSTATE_INVALID];
      }
    }
  }
  JavaUtilArrayList *children = [zNode getChildren];
  for (OrgMinimaDatabaseTxpowtreeBlockTreeNode * __strong child in nil_chk(children)) {
    OrgMinimaDatabaseMinimaDB_sortBlockTreeNodeStatesWithOrgMinimaDatabaseTxpowtreeBlockTreeNode_withInt_(self, child, [zNode getState]);
  }
}

jboolean OrgMinimaDatabaseMinimaDB_checkFullTxPOWWithOrgMinimaObjectsTxPOW_withOrgMinimaDatabaseMmrMMRSet_(OrgMinimaDatabaseMinimaDB *self, OrgMinimaObjectsTxPOW *zBlock, OrgMinimaDatabaseMmrMMRSet *zMMRSet) {
  if ([((OrgMinimaObjectsTxPOW *) nil_chk(zBlock)) isTransaction]) {
    OrgMinimaObjectsWitness *wit = [zBlock getWitness];
    OrgMinimaObjectsTransaction *trans = [zBlock getTransaction];
    jboolean inputvalid = OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(trans, wit, self, [zBlock getBlockNumber], zMMRSet, true);
    if (!inputvalid) {
      return false;
    }
  }
  JavaUtilArrayList *txns = [zBlock getBlockTxns];
  for (OrgMinimaObjectsBaseMiniData32 * __strong txn in nil_chk(txns)) {
    id<OrgMinimaDatabaseTxpowdbTxPOWDBRow> row = [self getTxPOWRowWithOrgMinimaObjectsBaseMiniData32:txn];
    OrgMinimaObjectsTxPOW *txpow = [((id<OrgMinimaDatabaseTxpowdbTxPOWDBRow>) nil_chk(row)) getTxPOW];
    OrgMinimaObjectsWitness *wit = [((OrgMinimaObjectsTxPOW *) nil_chk(txpow)) getWitness];
    OrgMinimaObjectsTransaction *trans = [txpow getTransaction];
    jboolean inputvalid = OrgMinimaSystemBrainsTxPOWChecker_checkTransactionMMRWithOrgMinimaObjectsTransaction_withOrgMinimaObjectsWitness_withOrgMinimaDatabaseMinimaDB_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaDatabaseMmrMMRSet_withBoolean_(trans, wit, self, [zBlock getBlockNumber], zMMRSet, true);
    if (!inputvalid) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseMinimaDB)
