//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/coindb/java/JavaCoinDB.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "org/minima/database/coindb/CoinDBRow.h"
#include "org/minima/database/coindb/java/JavaCoinDB.h"
#include "org/minima/database/coindb/java/JavaCoinDBRow.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"

jlong OrgMinimaDatabaseCoindbJavaJavaCoinDB_COINDB_LIMIT = 1000;

@implementation OrgMinimaDatabaseCoindbJavaJavaCoinDB

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseCoindbJavaJavaCoinDB_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clearDB {
  JreStrongAssignAndConsume(&mRows_, new_JavaUtilArrayList_init());
}

- (JavaUtilArrayList *)getComplete {
  return mRows_;
}

- (JavaUtilArrayList *)checkForRelevantCoinsWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zAddress {
  JavaUtilArrayList *ret = create_JavaUtilArrayList_init();
  for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk([((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(row)) getCoin])) getAddress])) isExactlyEqualWithOrgMinimaObjectsBaseMiniData:zAddress]) {
      [ret addWithId:row];
    }
  }
  return ret;
}

- (id<OrgMinimaDatabaseCoindbCoinDBRow>)getCoinRowWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zCoinID {
  for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong row in nil_chk(mRows_)) {
    if ([((OrgMinimaObjectsBaseMiniHash *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk([((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(row)) getCoin])) getCoinID])) isNumericallyEqualWithOrgMinimaObjectsBaseMiniData:zCoinID]) {
      return row;
    }
  }
  return nil;
}

- (id<OrgMinimaDatabaseCoindbCoinDBRow>)addCoinRowWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  id<OrgMinimaDatabaseCoindbCoinDBRow> row = [self getCoinRowWithOrgMinimaObjectsBaseMiniHash:[((OrgMinimaObjectsCoin *) nil_chk(zCoin)) getCoinID]];
  if (row != nil) {
    return row;
  }
  row = create_OrgMinimaDatabaseCoindbJavaJavaCoinDBRow_initWithOrgMinimaObjectsCoin_(zCoin);
  [((JavaUtilArrayList *) nil_chk(mRows_)) addWithId:row];
  return row;
}

- (void)removeOldSpentCoinsWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zMinBlock {
  JavaUtilArrayList *newrows = create_JavaUtilArrayList_init();
  for (id<OrgMinimaDatabaseCoindbCoinDBRow> __strong row in nil_chk(mRows_)) {
    if (![((id<OrgMinimaDatabaseCoindbCoinDBRow>) nil_chk(row)) isSpent]) {
      [newrows addWithId:row];
    }
    else if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([row getInBlockNumber])) isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:zMinBlock]) {
      [newrows addWithId:row];
    }
  }
  JreStrongAssign(&mRows_, newrows);
}

- (void)dealloc {
  RELEASE_(mRows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgMinimaDatabaseCoindbCoinDBRow;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaDatabaseCoindbCoinDBRow;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clearDB);
  methods[2].selector = @selector(getComplete);
  methods[3].selector = @selector(checkForRelevantCoinsWithOrgMinimaObjectsBaseMiniHash:);
  methods[4].selector = @selector(getCoinRowWithOrgMinimaObjectsBaseMiniHash:);
  methods[5].selector = @selector(addCoinRowWithOrgMinimaObjectsCoin:);
  methods[6].selector = @selector(removeOldSpentCoinsWithOrgMinimaObjectsBaseMiniNumber:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COINDB_LIMIT", "J", .constantValue.asLong = 0, 0x9, -1, 9, -1, -1 },
    { "mRows_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/ArrayList<Lorg/minima/database/coindb/CoinDBRow;>;", "checkForRelevantCoins", "LOrgMinimaObjectsBaseMiniHash;", "(Lorg/minima/objects/base/MiniHash;)Ljava/util/ArrayList<Lorg/minima/database/coindb/CoinDBRow;>;", "getCoinRow", "addCoinRow", "LOrgMinimaObjectsCoin;", "removeOldSpentCoins", "LOrgMinimaObjectsBaseMiniNumber;", &OrgMinimaDatabaseCoindbJavaJavaCoinDB_COINDB_LIMIT, "Ljava/util/ArrayList<Lorg/minima/database/coindb/CoinDBRow;>;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseCoindbJavaJavaCoinDB = { "JavaCoinDB", "org.minima.database.coindb.java", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseCoindbJavaJavaCoinDB;
}

@end

void OrgMinimaDatabaseCoindbJavaJavaCoinDB_init(OrgMinimaDatabaseCoindbJavaJavaCoinDB *self) {
  NSObject_init(self);
  [self clearDB];
}

OrgMinimaDatabaseCoindbJavaJavaCoinDB *new_OrgMinimaDatabaseCoindbJavaJavaCoinDB_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseCoindbJavaJavaCoinDB, init)
}

OrgMinimaDatabaseCoindbJavaJavaCoinDB *create_OrgMinimaDatabaseCoindbJavaJavaCoinDB_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseCoindbJavaJavaCoinDB, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseCoindbJavaJavaCoinDB)
