//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/userdb/java/JavaUserDBRow.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/lang/Integer.h"
#include "org/minima/database/userdb/java/JavaUserDBRow.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaDatabaseUserdbJavaJavaUserDBRow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseUserdbJavaJavaUserDBRow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)zID {
  OrgMinimaDatabaseUserdbJavaJavaUserDBRow_initWithInt_(self, zID);
  return self;
}

- (jint)getID {
  return mID_;
}

- (OrgMinimaObjectsWitness *)getWitness {
  return mWitness_;
}

- (OrgMinimaObjectsTransaction *)getTransaction {
  return mTransaction_;
}

- (void)setTransactionWithOrgMinimaObjectsTransaction:(OrgMinimaObjectsTransaction *)zTrans {
  mTransaction_ = zTrans;
}

- (void)setWitnessWithOrgMinimaObjectsWitness:(OrgMinimaObjectsWitness *)zWitness {
  mWitness_ = zWitness;
}

- (NSString *)description {
  return JreStrcat("$I$@$@", @"ID:", mID_, @" Witness:", mWitness_, @" Txn:", mTransaction_);
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:mID_];
  [((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mID_ = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  mTransaction_ = new_OrgMinimaObjectsTransaction_init();
  [mTransaction_ readDataStreamWithJavaIoDataInputStream:zIn];
  mWitness_ = new_OrgMinimaObjectsWitness_init();
  [mWitness_ readDataStreamWithJavaIoDataInputStream:zIn];
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *obj = new_OrgMinimaUtilsJsonJSONObject_init();
  (void) [obj putWithId:@"id" withId:JavaLangInteger_valueOfWithInt_(mID_)];
  (void) [obj putWithId:@"transaction" withId:[((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) toJSON]];
  (void) [obj putWithId:@"witness" withId:[((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) toJSON]];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsWitness;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getID);
  methods[3].selector = @selector(getWitness);
  methods[4].selector = @selector(getTransaction);
  methods[5].selector = @selector(setTransactionWithOrgMinimaObjectsTransaction:);
  methods[6].selector = @selector(setWitnessWithOrgMinimaObjectsWitness:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[9].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[10].selector = @selector(toJSON);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransaction_", "LOrgMinimaObjectsTransaction;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWitness_", "LOrgMinimaObjectsWitness;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setTransaction", "LOrgMinimaObjectsTransaction;", "setWitness", "LOrgMinimaObjectsWitness;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseUserdbJavaJavaUserDBRow = { "JavaUserDBRow", "org.minima.database.userdb.java", ptrTable, methods, fields, 7, 0x1, 11, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseUserdbJavaJavaUserDBRow;
}

@end

void OrgMinimaDatabaseUserdbJavaJavaUserDBRow_init(OrgMinimaDatabaseUserdbJavaJavaUserDBRow *self) {
  NSObject_init(self);
}

OrgMinimaDatabaseUserdbJavaJavaUserDBRow *new_OrgMinimaDatabaseUserdbJavaJavaUserDBRow_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseUserdbJavaJavaUserDBRow, init)
}

OrgMinimaDatabaseUserdbJavaJavaUserDBRow *create_OrgMinimaDatabaseUserdbJavaJavaUserDBRow_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseUserdbJavaJavaUserDBRow, init)
}

void OrgMinimaDatabaseUserdbJavaJavaUserDBRow_initWithInt_(OrgMinimaDatabaseUserdbJavaJavaUserDBRow *self, jint zID) {
  NSObject_init(self);
  self->mID_ = zID;
  self->mTransaction_ = new_OrgMinimaObjectsTransaction_init();
  self->mWitness_ = new_OrgMinimaObjectsWitness_init();
}

OrgMinimaDatabaseUserdbJavaJavaUserDBRow *new_OrgMinimaDatabaseUserdbJavaJavaUserDBRow_initWithInt_(jint zID) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseUserdbJavaJavaUserDBRow, initWithInt_, zID)
}

OrgMinimaDatabaseUserdbJavaJavaUserDBRow *create_OrgMinimaDatabaseUserdbJavaJavaUserDBRow_initWithInt_(jint zID) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseUserdbJavaJavaUserDBRow, initWithInt_, zID)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseUserdbJavaJavaUserDBRow)
