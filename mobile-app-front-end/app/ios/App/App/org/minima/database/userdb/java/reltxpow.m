//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/database/userdb/java/reltxpow.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "org/minima/database/MinimaDB.h"
#include "org/minima/database/userdb/UserDB.h"
#include "org/minima/database/userdb/java/reltxpow.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/objects/base/MiniScript.h"
#include "org/minima/objects/proofs/TokenProof.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaDatabaseUserdbJavareltxpow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaDatabaseUserdbJavareltxpow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPow
                        withJavaUtilHashtable:(JavaUtilHashtable *)zValues {
  OrgMinimaDatabaseUserdbJavareltxpow_initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_(self, zTxPow, zValues);
  return self;
}

- (OrgMinimaUtilsJsonJSONObject *)toJSONWithOrgMinimaDatabaseMinimaDB:(OrgMinimaDatabaseMinimaDB *)zDB {
  OrgMinimaUtilsJsonJSONObject *ret = new_OrgMinimaUtilsJsonJSONObject_init();
  (void) [ret putWithId:@"txpow" withId:[((OrgMinimaObjectsTxPOW *) nil_chk(mTxPow_)) toJSON]];
  OrgMinimaUtilsJsonJSONArray *tokarray = new_OrgMinimaUtilsJsonJSONArray_init();
  id<JavaUtilEnumeration> tokens = [((JavaUtilHashtable *) nil_chk(mTokenValues_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(tokens)) hasMoreElements]) {
    NSString *token = [tokens nextElement];
    OrgMinimaObjectsBaseMiniNumber *amt = [((JavaUtilHashtable *) nil_chk(mTokenValues_)) getWithId:token];
    OrgMinimaUtilsJsonJSONObject *json = new_OrgMinimaUtilsJsonJSONObject_init();
    (void) [json putWithId:@"token" withId:token];
    OrgMinimaObjectsBaseMiniNumber *scale_ = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ONE);
    if ([((NSString *) nil_chk(token)) isEqual:@"0x00"]) {
      (void) [json putWithId:@"name" withId:@"Minima"];
    }
    else if ([token isEqual:@"0xFF"]) {
      (void) [json putWithId:@"name" withId:@"Create Token"];
    }
    else {
      OrgMinimaObjectsProofsTokenProof *tp = [((id<OrgMinimaDatabaseUserdbUserDB>) nil_chk([((OrgMinimaDatabaseMinimaDB *) nil_chk(zDB)) getUserDB])) getTokenDetailWithOrgMinimaObjectsBaseMiniData:new_OrgMinimaObjectsBaseMiniData_initWithNSString_(token)];
      if (tp == nil) {
        (void) [json putWithId:@"name" withId:@"null"];
      }
      else {
        (void) [json putWithId:@"name" withId:[((OrgMinimaObjectsBaseMiniScript *) nil_chk([tp getName])) description]];
        scale_ = [tp getScaleFactor];
      }
    }
    (void) [json putWithId:@"amount" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(amt)) multWithOrgMinimaObjectsBaseMiniNumber:scale_])) description]];
    [tokarray addWithId:json];
  }
  (void) [ret putWithId:@"values" withId:tokarray];
  return ret;
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsTxPOW *) nil_chk(mTxPow_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  jint len = [((JavaUtilHashtable *) nil_chk(mTokenValues_)) size];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  id<JavaUtilEnumeration> tokens = [((JavaUtilHashtable *) nil_chk(mTokenValues_)) keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(tokens)) hasMoreElements]) {
    NSString *token = [tokens nextElement];
    OrgMinimaObjectsBaseMiniNumber *amt = [((JavaUtilHashtable *) nil_chk(mTokenValues_)) getWithId:token];
    [zOut writeUTFWithNSString:token];
    [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(amt)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mTxPow_ = new_OrgMinimaObjectsTxPOW_init();
  [mTxPow_ readDataStreamWithJavaIoDataInputStream:zIn];
  mTokenValues_ = new_JavaUtilHashtable_init();
  jint len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  for (jint i = 0; i < len; i++) {
    NSString *token = [zIn readUTF];
    OrgMinimaObjectsBaseMiniNumber *amt = OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    (void) [((JavaUtilHashtable *) nil_chk(mTokenValues_)) putWithId:token withId:amt];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 6, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaObjectsTxPOW:withJavaUtilHashtable:);
  methods[2].selector = @selector(toJSONWithOrgMinimaDatabaseMinimaDB:);
  methods[3].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[4].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTxPow_", "LOrgMinimaObjectsTxPOW;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenValues_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsTxPOW;LJavaUtilHashtable;", "(Lorg/minima/objects/TxPOW;Ljava/util/Hashtable<Ljava/lang/String;Lorg/minima/objects/base/MiniNumber;>;)V", "toJSON", "LOrgMinimaDatabaseMinimaDB;", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/Hashtable<Ljava/lang/String;Lorg/minima/objects/base/MiniNumber;>;" };
  static const J2ObjcClassInfo _OrgMinimaDatabaseUserdbJavareltxpow = { "reltxpow", "org.minima.database.userdb.java", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaDatabaseUserdbJavareltxpow;
}

@end

void OrgMinimaDatabaseUserdbJavareltxpow_init(OrgMinimaDatabaseUserdbJavareltxpow *self) {
  NSObject_init(self);
}

OrgMinimaDatabaseUserdbJavareltxpow *new_OrgMinimaDatabaseUserdbJavareltxpow_init() {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseUserdbJavareltxpow, init)
}

OrgMinimaDatabaseUserdbJavareltxpow *create_OrgMinimaDatabaseUserdbJavareltxpow_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseUserdbJavareltxpow, init)
}

void OrgMinimaDatabaseUserdbJavareltxpow_initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_(OrgMinimaDatabaseUserdbJavareltxpow *self, OrgMinimaObjectsTxPOW *zTxPow, JavaUtilHashtable *zValues) {
  NSObject_init(self);
  self->mTxPow_ = zTxPow;
  self->mTokenValues_ = zValues;
}

OrgMinimaDatabaseUserdbJavareltxpow *new_OrgMinimaDatabaseUserdbJavareltxpow_initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_(OrgMinimaObjectsTxPOW *zTxPow, JavaUtilHashtable *zValues) {
  J2OBJC_NEW_IMPL(OrgMinimaDatabaseUserdbJavareltxpow, initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_, zTxPow, zValues)
}

OrgMinimaDatabaseUserdbJavareltxpow *create_OrgMinimaDatabaseUserdbJavareltxpow_initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_(OrgMinimaObjectsTxPOW *zTxPow, JavaUtilHashtable *zValues) {
  J2OBJC_CREATE_IMPL(OrgMinimaDatabaseUserdbJavareltxpow, initWithOrgMinimaObjectsTxPOW_withJavaUtilHashtable_, zTxPow, zValues)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaDatabaseUserdbJavareltxpow)

J2OBJC_NAME_MAPPING(OrgMinimaDatabaseUserdbJavareltxpow, "org.minima.database.userdb.java", "OrgMinimaDatabaseUserdbJava")
