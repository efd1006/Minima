//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/base/MiniNumber.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/MathContext.h"
#include "java/math/RoundingMode.h"
#include "java/text/DecimalFormat.h"
#include "org/minima/objects/base/MiniNumber.h"

@interface OrgMinimaObjectsBaseMiniNumber () {
 @public
  JavaMathBigDecimal *mNumber_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaObjectsBaseMiniNumber, mNumber_, JavaMathBigDecimal *)

J2OBJC_INITIALIZED_DEFN(OrgMinimaObjectsBaseMiniNumber)

JavaMathMathContext *OrgMinimaObjectsBaseMiniNumber_mMathContext;
JavaTextDecimalFormat *OrgMinimaObjectsBaseMiniNumber_MINIMA_SIGNIFICANT_FORMAT;
OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_ZERO;
OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_ONE;
OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_TWO;
OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_EIGHT;
OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_MINUSONE;

@implementation OrgMinimaObjectsBaseMiniNumber

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsBaseMiniNumber_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)zNumber {
  OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_(self, zNumber);
  return self;
}

- (instancetype)initWithJavaMathBigDecimal:(JavaMathBigDecimal *)zBigD {
  OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_(self, zBigD);
  return self;
}

- (instancetype)initWithNSString:(NSString *)zNumber {
  OrgMinimaObjectsBaseMiniNumber_initWithNSString_(self, zNumber);
  return self;
}

- (JavaMathBigDecimal *)getAsBigDecimal {
  return mNumber_;
}

- (JavaMathBigInteger *)getAsBigInteger {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) toBigInteger];
}

- (jdouble)getAsDouble {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) doubleValue];
}

- (jlong)getAsLong {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) longLongValue];
}

- (jint)getAsInt {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) intValue];
}

- (OrgMinimaObjectsBaseMiniNumber *)addWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) addWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)subWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) subtractWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)divWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) divideWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)divRoundDownWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) divideWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathRoundingMode:JreLoadEnum(JavaMathRoundingMode, DOWN)]);
}

- (OrgMinimaObjectsBaseMiniNumber *)multWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) multiplyWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)moduloWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) remainderWithJavaMathBigDecimal:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zNumber)) getAsBigDecimal] withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)floor {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) setScaleWithInt:0 withJavaMathRoundingMode:JreLoadEnum(JavaMathRoundingMode, FLOOR)]);
}

- (OrgMinimaObjectsBaseMiniNumber *)ceil {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) setScaleWithInt:0 withJavaMathRoundingMode:JreLoadEnum(JavaMathRoundingMode, CEILING)]);
}

- (OrgMinimaObjectsBaseMiniNumber *)abs {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) abs]);
}

- (OrgMinimaObjectsBaseMiniNumber *)increment {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) addWithJavaMathBigDecimal:JreLoadStatic(JavaMathBigDecimal, ONE) withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (OrgMinimaObjectsBaseMiniNumber *)decrement {
  return create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_([((JavaMathBigDecimal *) nil_chk(mNumber_)) subtractWithJavaMathBigDecimal:JreLoadStatic(JavaMathBigDecimal, ONE) withJavaMathMathContext:OrgMinimaObjectsBaseMiniNumber_mMathContext]);
}

- (jint)compareToWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zCompare {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) compareToWithId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(zCompare)) getAsBigDecimal]];
}

- (jboolean)isEqualWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return [self compareToWithOrgMinimaObjectsBaseMiniNumber:zNumber] == 0;
}

- (jboolean)isLessWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return [self compareToWithOrgMinimaObjectsBaseMiniNumber:zNumber] < 0;
}

- (jboolean)isLessEqualWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return [self compareToWithOrgMinimaObjectsBaseMiniNumber:zNumber] <= 0;
}

- (jboolean)isMoreWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return [self compareToWithOrgMinimaObjectsBaseMiniNumber:zNumber] > 0;
}

- (jboolean)isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNumber {
  return [self compareToWithOrgMinimaObjectsBaseMiniNumber:zNumber] >= 0;
}

- (NSString *)description {
  return [((JavaMathBigDecimal *) nil_chk(mNumber_)) toPlainString];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:[((JavaMathBigDecimal *) nil_chk(mNumber_)) scale__]];
  IOSByteArray *data = [((JavaMathBigInteger *) nil_chk([((JavaMathBigDecimal *) nil_chk(mNumber_)) unscaledValue])) toByteArray];
  jint len = ((IOSByteArray *) nil_chk(data))->size_;
  [zOut writeIntWithInt:len];
  [zOut writeWithByteArray:data];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  jint scale_ = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  jint len = [zIn readInt];
  IOSByteArray *data = [IOSByteArray arrayWithLength:len];
  [zIn readFullyWithByteArray:data];
  JavaMathBigInteger *unscaled = create_JavaMathBigInteger_initWithByteArray_(data);
  JreStrongAssignAndConsume(&mNumber_, new_JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_withJavaMathMathContext_(unscaled, scale_, OrgMinimaObjectsBaseMiniNumber_mMathContext));
}

+ (OrgMinimaObjectsBaseMiniNumber *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaObjectsBaseMiniNumber_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mNumber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x9, 22, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaMathBigInteger:);
  methods[2].selector = @selector(initWithJavaMathBigDecimal:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(getAsBigDecimal);
  methods[5].selector = @selector(getAsBigInteger);
  methods[6].selector = @selector(getAsDouble);
  methods[7].selector = @selector(getAsLong);
  methods[8].selector = @selector(getAsInt);
  methods[9].selector = @selector(addWithOrgMinimaObjectsBaseMiniNumber:);
  methods[10].selector = @selector(subWithOrgMinimaObjectsBaseMiniNumber:);
  methods[11].selector = @selector(divWithOrgMinimaObjectsBaseMiniNumber:);
  methods[12].selector = @selector(divRoundDownWithOrgMinimaObjectsBaseMiniNumber:);
  methods[13].selector = @selector(multWithOrgMinimaObjectsBaseMiniNumber:);
  methods[14].selector = @selector(moduloWithOrgMinimaObjectsBaseMiniNumber:);
  methods[15].selector = @selector(floor);
  methods[16].selector = @selector(ceil);
  methods[17].selector = @selector(abs);
  methods[18].selector = @selector(increment);
  methods[19].selector = @selector(decrement);
  methods[20].selector = @selector(compareToWithOrgMinimaObjectsBaseMiniNumber:);
  methods[21].selector = @selector(isEqualWithOrgMinimaObjectsBaseMiniNumber:);
  methods[22].selector = @selector(isLessWithOrgMinimaObjectsBaseMiniNumber:);
  methods[23].selector = @selector(isLessEqualWithOrgMinimaObjectsBaseMiniNumber:);
  methods[24].selector = @selector(isMoreWithOrgMinimaObjectsBaseMiniNumber:);
  methods[25].selector = @selector(isMoreEqualWithOrgMinimaObjectsBaseMiniNumber:);
  methods[26].selector = @selector(description);
  methods[27].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[28].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[29].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  methods[30].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMathContext", "LJavaMathMathContext;", .constantValue.asLong = 0, 0x19, -1, 25, -1, -1 },
    { "MINIMA_SIGNIFICANT_FORMAT", "LJavaTextDecimalFormat;", .constantValue.asLong = 0, 0x19, -1, 26, -1, -1 },
    { "ZERO", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x19, -1, 27, -1, -1 },
    { "ONE", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x19, -1, 28, -1, -1 },
    { "TWO", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "EIGHT", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "MINUSONE", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "mNumber_", "LJavaMathBigDecimal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "LJavaMathBigDecimal;", "LNSString;", "add", "LOrgMinimaObjectsBaseMiniNumber;", "sub", "div", "divRoundDown", "mult", "modulo", "compareTo", "isEqual", "isLess", "isLessEqual", "isMore", "isMoreEqual", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", "main", "[LNSString;", &OrgMinimaObjectsBaseMiniNumber_mMathContext, &OrgMinimaObjectsBaseMiniNumber_MINIMA_SIGNIFICANT_FORMAT, &OrgMinimaObjectsBaseMiniNumber_ZERO, &OrgMinimaObjectsBaseMiniNumber_ONE, &OrgMinimaObjectsBaseMiniNumber_TWO, &OrgMinimaObjectsBaseMiniNumber_EIGHT, &OrgMinimaObjectsBaseMiniNumber_MINUSONE };
  static const J2ObjcClassInfo _OrgMinimaObjectsBaseMiniNumber = { "MiniNumber", "org.minima.objects.base", ptrTable, methods, fields, 7, 0x1, 31, 8, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsBaseMiniNumber;
}

+ (void)initialize {
  if (self == [OrgMinimaObjectsBaseMiniNumber class]) {
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_mMathContext, new_JavaMathMathContext_initWithInt_withJavaMathRoundingMode_(18, JreLoadEnum(JavaMathRoundingMode, DOWN)));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_MINIMA_SIGNIFICANT_FORMAT, new_JavaTextDecimalFormat_initWithNSString_(@"0.#################E0"));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_ZERO, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"0"));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_ONE, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"1"));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_TWO, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"2"));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_EIGHT, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"8"));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniNumber_MINUSONE, new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"-1"));
    J2OBJC_SET_INITIALIZED(OrgMinimaObjectsBaseMiniNumber)
  }
}

@end

void OrgMinimaObjectsBaseMiniNumber_init(OrgMinimaObjectsBaseMiniNumber *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mNumber_, JreLoadStatic(JavaMathBigDecimal, ZERO));
}

OrgMinimaObjectsBaseMiniNumber *new_OrgMinimaObjectsBaseMiniNumber_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniNumber, init)
}

OrgMinimaObjectsBaseMiniNumber *create_OrgMinimaObjectsBaseMiniNumber_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniNumber, init)
}

void OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_(OrgMinimaObjectsBaseMiniNumber *self, JavaMathBigInteger *zNumber) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mNumber_, new_JavaMathBigDecimal_initWithJavaMathBigInteger_withJavaMathMathContext_(zNumber, OrgMinimaObjectsBaseMiniNumber_mMathContext));
}

OrgMinimaObjectsBaseMiniNumber *new_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_(JavaMathBigInteger *zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithJavaMathBigInteger_, zNumber)
}

OrgMinimaObjectsBaseMiniNumber *create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigInteger_(JavaMathBigInteger *zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithJavaMathBigInteger_, zNumber)
}

void OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_(OrgMinimaObjectsBaseMiniNumber *self, JavaMathBigDecimal *zBigD) {
  NSObject_init(self);
  JreStrongAssign(&self->mNumber_, zBigD);
}

OrgMinimaObjectsBaseMiniNumber *new_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_(JavaMathBigDecimal *zBigD) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithJavaMathBigDecimal_, zBigD)
}

OrgMinimaObjectsBaseMiniNumber *create_OrgMinimaObjectsBaseMiniNumber_initWithJavaMathBigDecimal_(JavaMathBigDecimal *zBigD) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithJavaMathBigDecimal_, zBigD)
}

void OrgMinimaObjectsBaseMiniNumber_initWithNSString_(OrgMinimaObjectsBaseMiniNumber *self, NSString *zNumber) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mNumber_, new_JavaMathBigDecimal_initWithNSString_withJavaMathMathContext_(zNumber, OrgMinimaObjectsBaseMiniNumber_mMathContext));
}

OrgMinimaObjectsBaseMiniNumber *new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(NSString *zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithNSString_, zNumber)
}

OrgMinimaObjectsBaseMiniNumber *create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(NSString *zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniNumber, initWithNSString_, zNumber)
}

OrgMinimaObjectsBaseMiniNumber *OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsBaseMiniNumber_initialize();
  OrgMinimaObjectsBaseMiniNumber *data = create_OrgMinimaObjectsBaseMiniNumber_init();
  @try {
    [data readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    return nil;
  }
  return data;
}

void OrgMinimaObjectsBaseMiniNumber_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaObjectsBaseMiniNumber_initialize();
  OrgMinimaObjectsBaseMiniNumber *num = create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(@"10000.001");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:num];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsBaseMiniNumber)
