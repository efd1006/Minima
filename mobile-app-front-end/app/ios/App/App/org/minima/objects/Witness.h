//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/Witness.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgMinimaObjectsWitness")
#ifdef RESTRICT_OrgMinimaObjectsWitness
#define INCLUDE_ALL_OrgMinimaObjectsWitness 0
#else
#define INCLUDE_ALL_OrgMinimaObjectsWitness 1
#endif
#undef RESTRICT_OrgMinimaObjectsWitness

#if !defined (OrgMinimaObjectsWitness_) && (INCLUDE_ALL_OrgMinimaObjectsWitness || defined(INCLUDE_OrgMinimaObjectsWitness))
#define OrgMinimaObjectsWitness_

#define RESTRICT_OrgMinimaUtilsStreamable 1
#define INCLUDE_OrgMinimaUtilsStreamable 1
#include "org/minima/utils/Streamable.h"

@class JavaIoDataInputStream;
@class JavaIoDataOutputStream;
@class JavaUtilArrayList;
@class OrgMinimaDatabaseMmrMMRProof;
@class OrgMinimaObjectsBaseMiniData;
@class OrgMinimaObjectsBaseMiniHash;
@class OrgMinimaObjectsTokenDetails;
@class OrgMinimaUtilsJsonJSONObject;

@interface OrgMinimaObjectsWitness : NSObject < OrgMinimaUtilsStreamable > {
 @public
  JavaUtilArrayList *mPublicKeys_;
  JavaUtilArrayList *mSignatures_;
  JavaUtilArrayList *mProofs_;
  JavaUtilArrayList *mScripts_;
  OrgMinimaObjectsTokenDetails *mTokenGenDetails_;
  JavaUtilArrayList *mTokenDetails_;
}

#pragma mark Public

- (instancetype)init;

- (void)addMMRProofWithOrgMinimaDatabaseMmrMMRProof:(OrgMinimaDatabaseMmrMMRProof *)zProof;

- (void)addScriptWithNSString:(NSString *)zScript;

- (void)addSignatureWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zPublicKey
                    withOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zSig;

- (void)addTokenDetailsWithOrgMinimaObjectsTokenDetails:(OrgMinimaObjectsTokenDetails *)zDetails;

- (void)clearProofs;

- (JavaUtilArrayList *)getAllProofs;

- (JavaUtilArrayList *)getAllPubKeys;

- (NSString *)getAllPubKeysCSV;

- (JavaUtilArrayList *)getAllSignatures;

- (JavaUtilArrayList *)getAllTokenDetails;

- (OrgMinimaObjectsBaseMiniData *)getPublicKeyWithInt:(jint)zPubk;

- (NSString *)getScriptWithInt:(jint)zScript;

- (OrgMinimaObjectsBaseMiniData *)getSignatureWithInt:(jint)zSig;

- (OrgMinimaObjectsTokenDetails *)getTokenDetailWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zTokenID;

- (OrgMinimaObjectsTokenDetails *)getTokenGenDetails;

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn;

- (void)setTokenGenDetailsWithOrgMinimaObjectsTokenDetails:(OrgMinimaObjectsTokenDetails *)zTokGenDetails;

- (OrgMinimaUtilsJsonJSONObject *)toJSON;

- (NSString *)description;

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaObjectsWitness)

J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mPublicKeys_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mSignatures_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mProofs_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mScripts_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mTokenGenDetails_, OrgMinimaObjectsTokenDetails *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsWitness, mTokenDetails_, JavaUtilArrayList *)

FOUNDATION_EXPORT void OrgMinimaObjectsWitness_init(OrgMinimaObjectsWitness *self);

FOUNDATION_EXPORT OrgMinimaObjectsWitness *new_OrgMinimaObjectsWitness_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgMinimaObjectsWitness *create_OrgMinimaObjectsWitness_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgMinimaObjectsWitness)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgMinimaObjectsWitness")
