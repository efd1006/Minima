//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/base/MiniByte.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "org/minima/objects/base/MiniByte.h"

J2OBJC_INITIALIZED_DEFN(OrgMinimaObjectsBaseMiniByte)

OrgMinimaObjectsBaseMiniByte *OrgMinimaObjectsBaseMiniByte_TRUE;
OrgMinimaObjectsBaseMiniByte *OrgMinimaObjectsBaseMiniByte_FALSE;

@implementation OrgMinimaObjectsBaseMiniByte

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsBaseMiniByte_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)val {
  OrgMinimaObjectsBaseMiniByte_initWithInt_(self, val);
  return self;
}

- (instancetype)initWithByte:(jbyte)zVal {
  OrgMinimaObjectsBaseMiniByte_initWithByte_(self, zVal);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)zVal {
  OrgMinimaObjectsBaseMiniByte_initWithBoolean_(self, zVal);
  return self;
}

- (jint)getValue {
  return (mVal_ & (jint) 0xFF);
}

- (jbyte)getByteValue {
  return mVal_;
}

- (jboolean)isEqualWithOrgMinimaObjectsBaseMiniByte:(OrgMinimaObjectsBaseMiniByte *)zRamByte {
  return [self getValue] == [((OrgMinimaObjectsBaseMiniByte *) nil_chk(zRamByte)) getValue];
}

- (jboolean)isFalse {
  return [self isEqualWithOrgMinimaObjectsBaseMiniByte:OrgMinimaObjectsBaseMiniByte_FALSE];
}

- (jboolean)isTrue {
  return ![self isFalse];
}

- (NSString *)description {
  return JreStrcat("I", [self getValue]);
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeByteWithInt:mVal_];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mVal_ = [((JavaIoDataInputStream *) nil_chk(zIn)) readByte];
}

+ (OrgMinimaObjectsBaseMiniByte *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 8, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniByte;", 0x9, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(initWithByte:);
  methods[3].selector = @selector(initWithBoolean:);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(getByteValue);
  methods[6].selector = @selector(isEqualWithOrgMinimaObjectsBaseMiniByte:);
  methods[7].selector = @selector(isFalse);
  methods[8].selector = @selector(isTrue);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[11].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[12].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x19, -1, 12, -1, -1 },
    { "FALSE", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
    { "mVal_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "B", "Z", "isEqual", "LOrgMinimaObjectsBaseMiniByte;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", &OrgMinimaObjectsBaseMiniByte_TRUE, &OrgMinimaObjectsBaseMiniByte_FALSE };
  static const J2ObjcClassInfo _OrgMinimaObjectsBaseMiniByte = { "MiniByte", "org.minima.objects.base", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsBaseMiniByte;
}

+ (void)initialize {
  if (self == [OrgMinimaObjectsBaseMiniByte class]) {
    OrgMinimaObjectsBaseMiniByte_TRUE = new_OrgMinimaObjectsBaseMiniByte_initWithInt_(1);
    OrgMinimaObjectsBaseMiniByte_FALSE = new_OrgMinimaObjectsBaseMiniByte_initWithInt_(0);
    J2OBJC_SET_INITIALIZED(OrgMinimaObjectsBaseMiniByte)
  }
}

@end

void OrgMinimaObjectsBaseMiniByte_init(OrgMinimaObjectsBaseMiniByte *self) {
  NSObject_init(self);
  self->mVal_ = 0;
}

OrgMinimaObjectsBaseMiniByte *new_OrgMinimaObjectsBaseMiniByte_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniByte, init)
}

OrgMinimaObjectsBaseMiniByte *create_OrgMinimaObjectsBaseMiniByte_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniByte, init)
}

void OrgMinimaObjectsBaseMiniByte_initWithInt_(OrgMinimaObjectsBaseMiniByte *self, jint val) {
  NSObject_init(self);
  self->mVal_ = (jbyte) val;
}

OrgMinimaObjectsBaseMiniByte *new_OrgMinimaObjectsBaseMiniByte_initWithInt_(jint val) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniByte, initWithInt_, val)
}

OrgMinimaObjectsBaseMiniByte *create_OrgMinimaObjectsBaseMiniByte_initWithInt_(jint val) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniByte, initWithInt_, val)
}

void OrgMinimaObjectsBaseMiniByte_initWithByte_(OrgMinimaObjectsBaseMiniByte *self, jbyte zVal) {
  NSObject_init(self);
  self->mVal_ = zVal;
}

OrgMinimaObjectsBaseMiniByte *new_OrgMinimaObjectsBaseMiniByte_initWithByte_(jbyte zVal) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniByte, initWithByte_, zVal)
}

OrgMinimaObjectsBaseMiniByte *create_OrgMinimaObjectsBaseMiniByte_initWithByte_(jbyte zVal) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniByte, initWithByte_, zVal)
}

void OrgMinimaObjectsBaseMiniByte_initWithBoolean_(OrgMinimaObjectsBaseMiniByte *self, jboolean zVal) {
  NSObject_init(self);
  if (zVal) {
    self->mVal_ = 1;
  }
  else {
    self->mVal_ = 0;
  }
}

OrgMinimaObjectsBaseMiniByte *new_OrgMinimaObjectsBaseMiniByte_initWithBoolean_(jboolean zVal) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniByte, initWithBoolean_, zVal)
}

OrgMinimaObjectsBaseMiniByte *create_OrgMinimaObjectsBaseMiniByte_initWithBoolean_(jboolean zVal) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniByte, initWithBoolean_, zVal)
}

OrgMinimaObjectsBaseMiniByte *OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsBaseMiniByte_initialize();
  OrgMinimaObjectsBaseMiniByte *data = new_OrgMinimaObjectsBaseMiniByte_init();
  @try {
    [data readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  return data;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsBaseMiniByte)
