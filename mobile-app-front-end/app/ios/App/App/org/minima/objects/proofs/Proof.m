//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/proofs/Proof.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Boolean.h"
#include "java/util/ArrayList.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/proofs/Proof.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaObjectsProofsProof

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsProofsProof_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDataWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zData {
  JreStrongAssign(&mData_, zData);
}

- (OrgMinimaObjectsBaseMiniHash *)getData {
  return mData_;
}

- (void)setProofWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zChainSHAProof {
  mFinalized_ = false;
  JreStrongAssignAndConsume(&mProofChain_, new_JavaUtilArrayList_init());
  IOSByteArray *chdata = [((OrgMinimaObjectsBaseMiniData *) nil_chk(zChainSHAProof)) getData];
  JavaIoByteArrayInputStream *bais = create_JavaIoByteArrayInputStream_initWithByteArray_(chdata);
  JavaIoDataInputStream *dis = create_JavaIoDataInputStream_initWithJavaIoInputStream_(bais);
  jint len = ((IOSByteArray *) nil_chk(chdata))->size_;
  jint read = 0;
  while (read < len) {
    OrgMinimaObjectsBaseMiniByte *leftrigt = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(dis);
    read++;
    OrgMinimaObjectsBaseMiniHash *data = OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(dis);
    read += [((OrgMinimaObjectsBaseMiniHash *) nil_chk(data)) getLength];
    [self addProofChunkWithOrgMinimaObjectsBaseMiniByte:leftrigt withOrgMinimaObjectsBaseMiniHash:data];
  }
  [self finalizeHash];
}

- (void)addProofChunkWithOrgMinimaObjectsBaseMiniByte:(OrgMinimaObjectsBaseMiniByte *)zLeft
                     withOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zHash {
  [((JavaUtilArrayList *) nil_chk(mProofChain_)) addWithId:create_OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(self, zLeft, zHash)];
}

- (jint)getProofLen {
  return [((JavaUtilArrayList *) nil_chk(mProofChain_)) size];
}

- (OrgMinimaObjectsProofsProof_ProofChunk *)getProofChunkWithInt:(jint)zNum {
  return [((JavaUtilArrayList *) nil_chk(mProofChain_)) getWithInt:zNum];
}

- (void)finalizeHash {
  mFinalized_ = false;
  JreStrongAssign(&mFinalHash_, [self getFinalHash]);
  JreStrongAssign(&mChainSHA_, [self getChainSHAProof]);
  mFinalized_ = true;
}

- (OrgMinimaObjectsBaseMiniData *)getChainSHAProof {
  if (mFinalized_) {
    return mChainSHA_;
  }
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
  JavaIoDataOutputStream *dos = create_JavaIoDataOutputStream_initWithJavaIoOutputStream_(baos);
  @try {
    jint len = [((JavaUtilArrayList *) nil_chk(mProofChain_)) size];
    for (jint i = 0; i < len; i++) {
      OrgMinimaObjectsProofsProof_ProofChunk *chunk = [((JavaUtilArrayList *) nil_chk(mProofChain_)) getWithInt:i];
      [((OrgMinimaObjectsBaseMiniByte *) nil_chk([((OrgMinimaObjectsProofsProof_ProofChunk *) nil_chk(chunk)) getLeft])) writeDataStreamWithJavaIoDataOutputStream:dos];
      [((OrgMinimaObjectsBaseMiniHash *) nil_chk([chunk getHash])) writeDataStreamWithJavaIoDataOutputStream:dos];
    }
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return create_OrgMinimaObjectsBaseMiniData_initWithByteArray_([baos toByteArray]);
}

- (OrgMinimaObjectsBaseMiniHash *)getFinalHash {
  if (mFinalized_) {
    return mFinalHash_;
  }
  OrgMinimaObjectsBaseMiniHash *current = mData_;
  jint len = [self getProofLen];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsProofsProof_ProofChunk *chunk = [((JavaUtilArrayList *) nil_chk(mProofChain_)) getWithInt:i];
    if ([((OrgMinimaObjectsBaseMiniByte *) nil_chk([((OrgMinimaObjectsProofsProof_ProofChunk *) nil_chk(chunk)) getLeft])) isTrue]) {
      current = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:[chunk getHash] withOrgMinimaUtilsStreamable:current];
    }
    else {
      current = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectsWithOrgMinimaUtilsStreamable:current withOrgMinimaUtilsStreamable:[chunk getHash]];
    }
  }
  return current;
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *json = create_OrgMinimaUtilsJsonJSONObject_init();
  OrgMinimaUtilsJsonJSONArray *proof = create_OrgMinimaUtilsJsonJSONArray_init();
  jint len = [((JavaUtilArrayList *) nil_chk(mProofChain_)) size];
  for (jint i = 0; i < len; i++) {
    OrgMinimaUtilsJsonJSONObject *jsonchunk = create_OrgMinimaUtilsJsonJSONObject_init();
    OrgMinimaObjectsProofsProof_ProofChunk *chunk = [((JavaUtilArrayList *) nil_chk(mProofChain_)) getWithInt:i];
    [jsonchunk putWithId:@"left" withId:JavaLangBoolean_valueOfWithBoolean_([((OrgMinimaObjectsBaseMiniByte *) nil_chk([((OrgMinimaObjectsProofsProof_ProofChunk *) nil_chk(chunk)) getLeft])) isTrue])];
    [jsonchunk putWithId:@"hash" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk([chunk getHash])) to0xString]];
    [proof addWithId:jsonchunk];
  }
  [json putWithId:@"data" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mData_)) to0xString]];
  [json putWithId:@"proofchain" withId:proof];
  [json putWithId:@"chainsha" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk([self getChainSHAProof])) to0xString]];
  [json putWithId:@"finalhash" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk([self getFinalHash])) to0xString]];
  return json;
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mData_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  jint len = [((JavaUtilArrayList *) nil_chk(mProofChain_)) size];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsProofsProof_ProofChunk *chunk = [((JavaUtilArrayList *) nil_chk(mProofChain_)) getWithInt:i];
    [((OrgMinimaObjectsBaseMiniByte *) nil_chk([((OrgMinimaObjectsProofsProof_ProofChunk *) nil_chk(chunk)) getLeft])) writeDataStreamWithJavaIoDataOutputStream:zOut];
    [((OrgMinimaObjectsBaseMiniHash *) nil_chk([chunk getHash])) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  JreStrongAssign(&mData_, OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssignAndConsume(&mProofChain_, new_JavaUtilArrayList_init());
  jint len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsBaseMiniByte *left = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    OrgMinimaObjectsBaseMiniHash *hash_ = OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mProofChain_)) addWithId:create_OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(self, left, hash_)];
  }
  [self finalizeHash];
}

+ (OrgMinimaObjectsProofsProof *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsProofsProof_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

- (void)dealloc {
  RELEASE_(mData_);
  RELEASE_(mProofChain_);
  RELEASE_(mFinalHash_);
  RELEASE_(mChainSHA_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsProofsProof_ProofChunk;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 10, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 10, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsProofsProof;", 0x9, 13, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDataWithOrgMinimaObjectsBaseMiniHash:);
  methods[2].selector = @selector(getData);
  methods[3].selector = @selector(setProofWithOrgMinimaObjectsBaseMiniData:);
  methods[4].selector = @selector(addProofChunkWithOrgMinimaObjectsBaseMiniByte:withOrgMinimaObjectsBaseMiniHash:);
  methods[5].selector = @selector(getProofLen);
  methods[6].selector = @selector(getProofChunkWithInt:);
  methods[7].selector = @selector(finalizeHash);
  methods[8].selector = @selector(getChainSHAProof);
  methods[9].selector = @selector(getFinalHash);
  methods[10].selector = @selector(toJSON);
  methods[11].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[12].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[13].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mData_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mProofChain_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 14, -1 },
    { "mFinalHash_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mChainSHA_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mFinalized_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setData", "LOrgMinimaObjectsBaseMiniHash;", "setProof", "LOrgMinimaObjectsBaseMiniData;", "addProofChunk", "LOrgMinimaObjectsBaseMiniByte;LOrgMinimaObjectsBaseMiniHash;", "getProofChunk", "I", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", "Ljava/util/ArrayList<Lorg/minima/objects/proofs/Proof$ProofChunk;>;", "LOrgMinimaObjectsProofsProof_ProofChunk;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsProofsProof = { "Proof", "org.minima.objects.proofs", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, 15, -1, -1, -1 };
  return &_OrgMinimaObjectsProofsProof;
}

@end

void OrgMinimaObjectsProofsProof_init(OrgMinimaObjectsProofsProof *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mProofChain_, new_JavaUtilArrayList_init());
}

OrgMinimaObjectsProofsProof *new_OrgMinimaObjectsProofsProof_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsProofsProof, init)
}

OrgMinimaObjectsProofsProof *create_OrgMinimaObjectsProofsProof_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsProofsProof, init)
}

OrgMinimaObjectsProofsProof *OrgMinimaObjectsProofsProof_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsProofsProof_initialize();
  OrgMinimaObjectsProofsProof *proof = create_OrgMinimaObjectsProofsProof_init();
  @try {
    [proof readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return proof;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsProofsProof)

@implementation OrgMinimaObjectsProofsProof_ProofChunk

- (instancetype)initWithOrgMinimaObjectsProofsProof:(OrgMinimaObjectsProofsProof *)outer$
                   withOrgMinimaObjectsBaseMiniByte:(OrgMinimaObjectsBaseMiniByte *)zLeft
                   withOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zHash {
  OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(self, outer$, zLeft, zHash);
  return self;
}

- (OrgMinimaObjectsBaseMiniByte *)getLeft {
  return mLeftRight_;
}

- (OrgMinimaObjectsBaseMiniHash *)getHash {
  return mHash_;
}

- (void)dealloc {
  RELEASE_(mHash_);
  RELEASE_(mLeftRight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithOrgMinimaObjectsProofsProof:withOrgMinimaObjectsBaseMiniByte:withOrgMinimaObjectsBaseMiniHash:);
  methods[1].selector = @selector(getLeft);
  methods[2].selector = @selector(getHash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mHash_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeftRight_", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsBaseMiniByte;LOrgMinimaObjectsBaseMiniHash;", "LOrgMinimaObjectsProofsProof;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsProofsProof_ProofChunk = { "ProofChunk", "org.minima.objects.proofs", ptrTable, methods, fields, 7, 0x1, 3, 2, 1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsProofsProof_ProofChunk;
}

@end

void OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(OrgMinimaObjectsProofsProof_ProofChunk *self, OrgMinimaObjectsProofsProof *outer$, OrgMinimaObjectsBaseMiniByte *zLeft, OrgMinimaObjectsBaseMiniHash *zHash) {
  NSObject_init(self);
  JreStrongAssign(&self->mLeftRight_, zLeft);
  JreStrongAssign(&self->mHash_, zHash);
}

OrgMinimaObjectsProofsProof_ProofChunk *new_OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(OrgMinimaObjectsProofsProof *outer$, OrgMinimaObjectsBaseMiniByte *zLeft, OrgMinimaObjectsBaseMiniHash *zHash) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsProofsProof_ProofChunk, initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_, outer$, zLeft, zHash)
}

OrgMinimaObjectsProofsProof_ProofChunk *create_OrgMinimaObjectsProofsProof_ProofChunk_initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_(OrgMinimaObjectsProofsProof *outer$, OrgMinimaObjectsBaseMiniByte *zLeft, OrgMinimaObjectsBaseMiniHash *zHash) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsProofsProof_ProofChunk, initWithOrgMinimaObjectsProofsProof_withOrgMinimaObjectsBaseMiniByte_withOrgMinimaObjectsBaseMiniHash_, outer$, zLeft, zHash)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsProofsProof_ProofChunk)
