//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/base/MiniData.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/security/SecureRandom.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/utils/BaseConverter.h"
#include "org/minima/utils/MinimaLogger.h"
#include "org/minima/utils/Streamable.h"

@interface OrgMinimaObjectsBaseMiniData ()

- (void)setDataValue;

@end

__attribute__((unused)) static void OrgMinimaObjectsBaseMiniData_setDataValue(OrgMinimaObjectsBaseMiniData *self);

@implementation OrgMinimaObjectsBaseMiniData

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsBaseMiniData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)zHexString {
  OrgMinimaObjectsBaseMiniData_initWithNSString_(self, zHexString);
  return self;
}

- (instancetype)initWithByteArray:(IOSByteArray *)zData {
  OrgMinimaObjectsBaseMiniData_initWithByteArray_(self, zData);
  return self;
}

- (void)setDataValue {
  OrgMinimaObjectsBaseMiniData_setDataValue(self);
}

- (jint)getLength {
  return ((IOSByteArray *) nil_chk(mData_))->size_;
}

- (IOSByteArray *)getData {
  return mData_;
}

- (JavaMathBigInteger *)getDataValue {
  return mDataVal_;
}

- (JavaMathBigDecimal *)getDataValueDecimal {
  return create_JavaMathBigDecimal_initWithJavaMathBigInteger_(mDataVal_);
}

- (jboolean)isEqual:(id)o {
  return [self isEqualWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *) cast_chk(o, [OrgMinimaObjectsBaseMiniData class])];
}

- (jboolean)isEqualWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  if ([self getLength] != [((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getLength]) {
    return false;
  }
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[zCompare getDataValue]] == 0;
}

- (jboolean)isLessWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getDataValue]] < 0;
}

- (jboolean)isLessEqualWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getDataValue]] <= 0;
}

- (jboolean)isMoreWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getDataValue]] > 0;
}

- (jboolean)isMoreEqualWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getDataValue]] >= 0;
}

- (OrgMinimaObjectsBaseMiniData *)shiftrWithInt:(jint)zNumber {
  return create_OrgMinimaObjectsBaseMiniData_initWithNSString_([((NSString *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(mDataVal_)) shiftRightWithInt:zNumber])) toStringWithInt:16])) uppercaseString]);
}

- (OrgMinimaObjectsBaseMiniData *)shiftlWithInt:(jint)zNumber {
  return create_OrgMinimaObjectsBaseMiniData_initWithNSString_([((NSString *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(mDataVal_)) shiftLeftWithInt:zNumber])) toStringWithInt:16])) uppercaseString]);
}

- (jint)compareWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCompare {
  return [((JavaMathBigInteger *) nil_chk(mDataVal_)) compareToWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(zCompare)) getDataValue]];
}

- (OrgMinimaObjectsBaseMiniData *)concatWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zConcat {
  jint locallen = [self getLength];
  jint concatlen = ((IOSByteArray *) nil_chk([((OrgMinimaObjectsBaseMiniData *) nil_chk(zConcat)) getData]))->size_;
  jint totlen = locallen + concatlen;
  IOSByteArray *total = [IOSByteArray arrayWithLength:totlen];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([self getData], 0, total, 0, locallen);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_([zConcat getData], 0, total, locallen, concatlen);
  return create_OrgMinimaObjectsBaseMiniData_initWithByteArray_(total);
}

- (NSString *)description {
  return [self to0xString];
}

- (NSString *)to0xString {
  return OrgMinimaUtilsBaseConverter_encode16WithByteArray_(mData_);
}

- (NSString *)to0xStringWithInt:(jint)zLen {
  NSString *data = [self to0xString];
  jint len = [((NSString *) nil_chk(data)) java_length];
  if (len > zLen) {
    len = zLen;
  }
  return [((NSString *) nil_chk([data java_substring:0 endIndex:len])) java_concat:@".."];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:((IOSByteArray *) nil_chk(mData_))->size_];
  [zOut writeWithByteArray:mData_];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  jint len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  JreStrongAssignAndConsume(&mData_, [IOSByteArray newArrayWithLength:len]);
  [zIn readFullyWithByteArray:mData_];
  OrgMinimaObjectsBaseMiniData_setDataValue(self);
}

+ (OrgMinimaObjectsBaseMiniData *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

+ (OrgMinimaObjectsBaseMiniData *)getMiniDataVersionWithOrgMinimaUtilsStreamable:(id<OrgMinimaUtilsStreamable>)zObject {
  return OrgMinimaObjectsBaseMiniData_getMiniDataVersionWithOrgMinimaUtilsStreamable_(zObject);
}

+ (OrgMinimaObjectsBaseMiniData *)getRandomDataWithInt:(jint)len {
  return OrgMinimaObjectsBaseMiniData_getRandomDataWithInt_(len);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)zArgs {
  OrgMinimaObjectsBaseMiniData_mainWithNSStringArray_(zArgs);
}

- (void)dealloc {
  RELEASE_(mData_);
  RELEASE_(mDataVal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, 14, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x9, 22, 21, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x9, 25, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(initWithByteArray:);
  methods[3].selector = @selector(setDataValue);
  methods[4].selector = @selector(getLength);
  methods[5].selector = @selector(getData);
  methods[6].selector = @selector(getDataValue);
  methods[7].selector = @selector(getDataValueDecimal);
  methods[8].selector = @selector(isEqual:);
  methods[9].selector = @selector(isEqualWithOrgMinimaObjectsBaseMiniData:);
  methods[10].selector = @selector(isLessWithOrgMinimaObjectsBaseMiniData:);
  methods[11].selector = @selector(isLessEqualWithOrgMinimaObjectsBaseMiniData:);
  methods[12].selector = @selector(isMoreWithOrgMinimaObjectsBaseMiniData:);
  methods[13].selector = @selector(isMoreEqualWithOrgMinimaObjectsBaseMiniData:);
  methods[14].selector = @selector(shiftrWithInt:);
  methods[15].selector = @selector(shiftlWithInt:);
  methods[16].selector = @selector(compareWithOrgMinimaObjectsBaseMiniData:);
  methods[17].selector = @selector(concatWithOrgMinimaObjectsBaseMiniData:);
  methods[18].selector = @selector(description);
  methods[19].selector = @selector(to0xString);
  methods[20].selector = @selector(to0xStringWithInt:);
  methods[21].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[22].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[23].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  methods[24].selector = @selector(getMiniDataVersionWithOrgMinimaUtilsStreamable:);
  methods[25].selector = @selector(getRandomDataWithInt:);
  methods[26].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mData_", "[B", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDataVal_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "[B", "equals", "LNSObject;", "isEqual", "LOrgMinimaObjectsBaseMiniData;", "isLess", "isLessEqual", "isMore", "isMoreEqual", "shiftr", "I", "shiftl", "compare", "concat", "toString", "to0xString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", "getMiniDataVersion", "LOrgMinimaUtilsStreamable;", "getRandomData", "main", "[LNSString;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsBaseMiniData = { "MiniData", "org.minima.objects.base", ptrTable, methods, fields, 7, 0x1, 27, 2, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsBaseMiniData;
}

@end

void OrgMinimaObjectsBaseMiniData_init(OrgMinimaObjectsBaseMiniData *self) {
  OrgMinimaObjectsBaseMiniData_initWithByteArray_(self, [IOSByteArray arrayWithLength:0]);
}

OrgMinimaObjectsBaseMiniData *new_OrgMinimaObjectsBaseMiniData_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniData, init)
}

OrgMinimaObjectsBaseMiniData *create_OrgMinimaObjectsBaseMiniData_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniData, init)
}

void OrgMinimaObjectsBaseMiniData_initWithNSString_(OrgMinimaObjectsBaseMiniData *self, NSString *zHexString) {
  OrgMinimaObjectsBaseMiniData_initWithByteArray_(self, OrgMinimaUtilsBaseConverter_decode16WithNSString_(zHexString));
}

OrgMinimaObjectsBaseMiniData *new_OrgMinimaObjectsBaseMiniData_initWithNSString_(NSString *zHexString) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniData, initWithNSString_, zHexString)
}

OrgMinimaObjectsBaseMiniData *create_OrgMinimaObjectsBaseMiniData_initWithNSString_(NSString *zHexString) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniData, initWithNSString_, zHexString)
}

void OrgMinimaObjectsBaseMiniData_initWithByteArray_(OrgMinimaObjectsBaseMiniData *self, IOSByteArray *zData) {
  NSObject_init(self);
  JreStrongAssign(&self->mData_, zData);
  OrgMinimaObjectsBaseMiniData_setDataValue(self);
}

OrgMinimaObjectsBaseMiniData *new_OrgMinimaObjectsBaseMiniData_initWithByteArray_(IOSByteArray *zData) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniData, initWithByteArray_, zData)
}

OrgMinimaObjectsBaseMiniData *create_OrgMinimaObjectsBaseMiniData_initWithByteArray_(IOSByteArray *zData) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniData, initWithByteArray_, zData)
}

void OrgMinimaObjectsBaseMiniData_setDataValue(OrgMinimaObjectsBaseMiniData *self) {
  JreStrongAssignAndConsume(&self->mDataVal_, new_JavaMathBigInteger_initWithInt_withByteArray_(1, self->mData_));
}

OrgMinimaObjectsBaseMiniData *OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsBaseMiniData_initialize();
  OrgMinimaObjectsBaseMiniData *data = create_OrgMinimaObjectsBaseMiniData_init();
  @try {
    [data readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    return nil;
  }
  return data;
}

OrgMinimaObjectsBaseMiniData *OrgMinimaObjectsBaseMiniData_getMiniDataVersionWithOrgMinimaUtilsStreamable_(id<OrgMinimaUtilsStreamable> zObject) {
  OrgMinimaObjectsBaseMiniData_initialize();
  JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
  JavaIoDataOutputStream *dos = create_JavaIoDataOutputStream_initWithJavaIoOutputStream_(baos);
  @try {
    [((id<OrgMinimaUtilsStreamable>) nil_chk(zObject)) writeDataStreamWithJavaIoDataOutputStream:dos];
    [dos flush];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  return create_OrgMinimaObjectsBaseMiniData_initWithByteArray_([baos toByteArray]);
}

OrgMinimaObjectsBaseMiniData *OrgMinimaObjectsBaseMiniData_getRandomDataWithInt_(jint len) {
  OrgMinimaObjectsBaseMiniData_initialize();
  JavaSecuritySecureRandom *rand = create_JavaSecuritySecureRandom_init();
  IOSByteArray *data = [IOSByteArray arrayWithLength:len];
  [rand nextBytesWithByteArray:data];
  return create_OrgMinimaObjectsBaseMiniData_initWithByteArray_(data);
}

void OrgMinimaObjectsBaseMiniData_mainWithNSStringArray_(IOSObjectArray *zArgs) {
  OrgMinimaObjectsBaseMiniData_initialize();
  OrgMinimaObjectsBaseMiniData *data = create_OrgMinimaObjectsBaseMiniData_init();
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$", @"data    : ", [data description]));
  OrgMinimaUtilsMinimaLogger_logWithNSString_(JreStrcat("$$", @"value   : ", [((JavaMathBigInteger *) nil_chk([data getDataValue])) description]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsBaseMiniData)
