//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/proofs/TokenProof.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/objects/base/MiniScript.h"
#include "org/minima/objects/proofs/TokenProof.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/json/JSONObject.h"

@interface OrgMinimaObjectsProofsTokenProof ()

- (instancetype)init;

- (void)calculateTokenID;

@end

__attribute__((unused)) static void OrgMinimaObjectsProofsTokenProof_init(OrgMinimaObjectsProofsTokenProof *self);

__attribute__((unused)) static OrgMinimaObjectsProofsTokenProof *new_OrgMinimaObjectsProofsTokenProof_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaObjectsProofsTokenProof *create_OrgMinimaObjectsProofsTokenProof_init(void);

__attribute__((unused)) static void OrgMinimaObjectsProofsTokenProof_calculateTokenID(OrgMinimaObjectsProofsTokenProof *self);

@implementation OrgMinimaObjectsProofsTokenProof

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsProofsTokenProof_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCoindID
                  withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zScale
                  withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zAmount
                  withOrgMinimaObjectsBaseMiniScript:(OrgMinimaObjectsBaseMiniScript *)zName {
  OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_(self, zCoindID, zScale, zAmount, zName);
  return self;
}

- (instancetype)initWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCoindID
                  withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zScale
                  withOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zAmount
                  withOrgMinimaObjectsBaseMiniScript:(OrgMinimaObjectsBaseMiniScript *)zName
                  withOrgMinimaObjectsBaseMiniScript:(OrgMinimaObjectsBaseMiniScript *)zTokenScript {
  OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_(self, zCoindID, zScale, zAmount, zName, zTokenScript);
  return self;
}

- (OrgMinimaObjectsBaseMiniNumber *)getScaleFactor {
  return [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, TEN))) powWithInt:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenScale_)) getAsInt]];
}

- (OrgMinimaObjectsBaseMiniNumber *)getScale {
  return mTokenScale_;
}

- (OrgMinimaObjectsBaseMiniNumber *)getAmount {
  return mTokenTotalAmount_;
}

- (OrgMinimaObjectsBaseMiniScript *)getName {
  return mTokenName_;
}

- (OrgMinimaObjectsBaseMiniScript *)getTokenScript {
  return mTokenScript_;
}

- (OrgMinimaObjectsBaseMiniData *)getCoinID {
  return mCoinID_;
}

- (OrgMinimaObjectsBaseMiniData *)getTokenID {
  return mTokenID_;
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *obj = create_OrgMinimaUtilsJsonJSONObject_init();
  [obj putWithId:@"tokenid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mTokenID_)) to0xString]];
  [obj putWithId:@"name" withId:[((OrgMinimaObjectsBaseMiniScript *) nil_chk(mTokenName_)) description]];
  OrgMinimaObjectsBaseMiniNumber *total = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenTotalAmount_)) multWithOrgMinimaObjectsBaseMiniNumber:[self getScaleFactor]];
  [obj putWithId:@"total" withId:total];
  [obj putWithId:@"script" withId:[((OrgMinimaObjectsBaseMiniScript *) nil_chk(mTokenScript_)) description]];
  [obj putWithId:@"coinid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mCoinID_)) to0xString]];
  [obj putWithId:@"totalamount" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenTotalAmount_)) description]];
  [obj putWithId:@"scale" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenScale_)) description]];
  return obj;
}

- (void)calculateTokenID {
  OrgMinimaObjectsProofsTokenProof_calculateTokenID(self);
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mCoinID_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniScript *) nil_chk(mTokenScript_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenScale_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTokenTotalAmount_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniScript *) nil_chk(mTokenName_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  JreStrongAssign(&mCoinID_, OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssign(&mTokenScript_, OrgMinimaObjectsBaseMiniScript_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssign(&mTokenScale_, OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssign(&mTokenTotalAmount_, OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  JreStrongAssign(&mTokenName_, OrgMinimaObjectsBaseMiniScript_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  OrgMinimaObjectsProofsTokenProof_calculateTokenID(self);
}

+ (OrgMinimaObjectsProofsTokenProof *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsProofsTokenProof_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

- (void)dealloc {
  RELEASE_(mCoinID_);
  RELEASE_(mTokenScale_);
  RELEASE_(mTokenTotalAmount_);
  RELEASE_(mTokenName_);
  RELEASE_(mTokenScript_);
  RELEASE_(mTokenID_);
 
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniScript;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniScript;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsProofsTokenProof;", 0x9, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithOrgMinimaObjectsBaseMiniData:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaObjectsBaseMiniScript:);
  methods[2].selector = @selector(initWithOrgMinimaObjectsBaseMiniData:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaObjectsBaseMiniNumber:withOrgMinimaObjectsBaseMiniScript:withOrgMinimaObjectsBaseMiniScript:);
  methods[3].selector = @selector(getScaleFactor);
  methods[4].selector = @selector(getScale);
  methods[5].selector = @selector(getAmount);
  methods[6].selector = @selector(getName);
  methods[7].selector = @selector(getTokenScript);
  methods[8].selector = @selector(getCoinID);
  methods[9].selector = @selector(getTokenID);
  methods[10].selector = @selector(toJSON);
  methods[11].selector = @selector(calculateTokenID);
  methods[12].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[13].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[14].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCoinID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenScale_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenTotalAmount_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenName_", "LOrgMinimaObjectsBaseMiniScript;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenScript_", "LOrgMinimaObjectsBaseMiniScript;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTokenID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMinimaObjectsBaseMiniData;LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaObjectsBaseMiniScript;", "LOrgMinimaObjectsBaseMiniData;LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaObjectsBaseMiniNumber;LOrgMinimaObjectsBaseMiniScript;LOrgMinimaObjectsBaseMiniScript;", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream" };
  static const J2ObjcClassInfo _OrgMinimaObjectsProofsTokenProof = { "TokenProof", "org.minima.objects.proofs", ptrTable, methods, fields, 7, 0x1, 15, 6, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsProofsTokenProof;
}

@end

void OrgMinimaObjectsProofsTokenProof_init(OrgMinimaObjectsProofsTokenProof *self) {
  NSObject_init(self);
}

OrgMinimaObjectsProofsTokenProof *new_OrgMinimaObjectsProofsTokenProof_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsProofsTokenProof, init)
}

OrgMinimaObjectsProofsTokenProof *create_OrgMinimaObjectsProofsTokenProof_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsProofsTokenProof, init)
}

void OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsProofsTokenProof *self, OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName) {
  OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_(self, zCoindID, zScale, zAmount, zName, create_OrgMinimaObjectsBaseMiniScript_initWithNSString_(@"RETURN TRUE"));
}

OrgMinimaObjectsProofsTokenProof *new_OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsProofsTokenProof, initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_, zCoindID, zScale, zAmount, zName)
}

OrgMinimaObjectsProofsTokenProof *create_OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsProofsTokenProof, initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_, zCoindID, zScale, zAmount, zName)
}

void OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsProofsTokenProof *self, OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName, OrgMinimaObjectsBaseMiniScript *zTokenScript) {
  NSObject_init(self);
  JreStrongAssign(&self->mTokenScale_, zScale);
  JreStrongAssign(&self->mTokenTotalAmount_, zAmount);
  JreStrongAssign(&self->mTokenName_, zName);
  JreStrongAssign(&self->mCoinID_, zCoindID);
  JreStrongAssignAndConsume(&self->mTokenScript_, new_OrgMinimaObjectsBaseMiniScript_initWithNSString_([((OrgMinimaObjectsBaseMiniScript *) nil_chk(zTokenScript)) description]));
  OrgMinimaObjectsProofsTokenProof_calculateTokenID(self);
}

OrgMinimaObjectsProofsTokenProof *new_OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName, OrgMinimaObjectsBaseMiniScript *zTokenScript) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsProofsTokenProof, initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_, zCoindID, zScale, zAmount, zName, zTokenScript)
}

OrgMinimaObjectsProofsTokenProof *create_OrgMinimaObjectsProofsTokenProof_initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_(OrgMinimaObjectsBaseMiniData *zCoindID, OrgMinimaObjectsBaseMiniNumber *zScale, OrgMinimaObjectsBaseMiniNumber *zAmount, OrgMinimaObjectsBaseMiniScript *zName, OrgMinimaObjectsBaseMiniScript *zTokenScript) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsProofsTokenProof, initWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniNumber_withOrgMinimaObjectsBaseMiniScript_withOrgMinimaObjectsBaseMiniScript_, zCoindID, zScale, zAmount, zName, zTokenScript)
}

void OrgMinimaObjectsProofsTokenProof_calculateTokenID(OrgMinimaObjectsProofsTokenProof *self) {
  @try {
    JavaIoByteArrayOutputStream *baos = create_JavaIoByteArrayOutputStream_init();
    JavaIoDataOutputStream *daos = create_JavaIoDataOutputStream_initWithJavaIoOutputStream_(baos);
    [self writeDataStreamWithJavaIoDataOutputStream:daos];
    [daos flush];
    OrgMinimaObjectsBaseMiniData *tokdat = create_OrgMinimaObjectsBaseMiniData_initWithByteArray_([baos toByteArray]);
    JreStrongAssign(&self->mTokenID_, [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:tokdat]);
    [daos close];
    [baos close];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
}

OrgMinimaObjectsProofsTokenProof *OrgMinimaObjectsProofsTokenProof_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsProofsTokenProof_initialize();
  OrgMinimaObjectsProofsTokenProof *td = create_OrgMinimaObjectsProofsTokenProof_init();
  @try {
    [td readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
    return nil;
  }
  return td;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsProofsTokenProof)
