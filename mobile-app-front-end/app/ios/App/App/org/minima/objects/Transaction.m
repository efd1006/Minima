//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/Transaction.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayInputStream.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Enumeration.h"
#include "java/util/Hashtable.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/StateVariable.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/objects/base/MiniScript.h"
#include "org/minima/objects/proofs/TokenProof.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgMinimaObjectsTransaction_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(OrgMinimaObjectsStateVariable *)o1
               withId:(OrgMinimaObjectsStateVariable *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgMinimaObjectsTransaction_1)

__attribute__((unused)) static void OrgMinimaObjectsTransaction_1_init(OrgMinimaObjectsTransaction_1 *self);

__attribute__((unused)) static OrgMinimaObjectsTransaction_1 *new_OrgMinimaObjectsTransaction_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaObjectsTransaction_1 *create_OrgMinimaObjectsTransaction_1_init(void);

@implementation OrgMinimaObjectsTransaction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsTransaction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addInputWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  [((JavaUtilArrayList *) nil_chk(mInputs_)) addWithId:zCoin];
}

- (void)addOutputWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  [((JavaUtilArrayList *) nil_chk(mOutputs_)) addWithId:zCoin];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(mInputs_)) size] == 0 && [((JavaUtilArrayList *) nil_chk(mOutputs_)) size] == 0;
}

- (JavaUtilArrayList *)getAllInputs {
  return mInputs_;
}

- (JavaUtilArrayList *)getAllOutputs {
  return mOutputs_;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumInputs {
  OrgMinimaObjectsBaseMiniNumber *tot = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mInputs_)) {
    tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:((OrgMinimaObjectsCoin *) nil_chk(cc))->mAmount_];
  }
  return tot;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumInputsWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTokenID {
  OrgMinimaObjectsBaseMiniNumber *tot = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mInputs_)) {
    if ([((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk(cc)) getTokenID])) isEqualWithOrgMinimaObjectsBaseMiniData:zTokenID]) {
      tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:cc->mAmount_];
    }
  }
  return tot;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumOutputs {
  OrgMinimaObjectsBaseMiniNumber *tot = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mOutputs_)) {
    tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:((OrgMinimaObjectsCoin *) nil_chk(cc))->mAmount_];
  }
  return tot;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumOutputsWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTokenID {
  OrgMinimaObjectsBaseMiniNumber *tot = JreLoadStatic(OrgMinimaObjectsBaseMiniNumber, ZERO);
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mOutputs_)) {
    if ([((OrgMinimaObjectsBaseMiniData *) nil_chk([((OrgMinimaObjectsCoin *) nil_chk(cc)) getTokenID])) isEqualWithOrgMinimaObjectsBaseMiniData:zTokenID]) {
      tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:cc->mAmount_];
    }
  }
  return tot;
}

- (OrgMinimaObjectsCoin *)getRemainderCoinWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zTokenID {
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mOutputs_)) {
    if ([((OrgMinimaObjectsCoin *) nil_chk(cc)) isRemainder] && [((OrgMinimaObjectsBaseMiniData *) nil_chk([cc getTokenID])) isEqualWithOrgMinimaObjectsBaseMiniData:zTokenID]) {
      return cc;
    }
  }
  return nil;
}

- (jboolean)checkValidInOutPerToken {
  JavaUtilArrayList *tokens = new_JavaUtilArrayList_init();
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mOutputs_)) {
    OrgMinimaObjectsBaseMiniData *tokenhash = [((OrgMinimaObjectsCoin *) nil_chk(cc)) getTokenID];
    if ([((OrgMinimaObjectsBaseMiniData *) nil_chk(tokenhash)) isEqualWithOrgMinimaObjectsBaseMiniData:JreLoadStatic(OrgMinimaObjectsCoin, TOKENID_CREATE)]) {
      tokenhash = JreLoadStatic(OrgMinimaObjectsCoin, MINIMA_TOKENID);
    }
    NSString *tok = [((OrgMinimaObjectsBaseMiniData *) nil_chk(tokenhash)) to0xString];
    if (![tokens containsWithId:tok]) {
      [tokens addWithId:tok];
    }
  }
  JavaUtilHashtable *outamounts = new_JavaUtilHashtable_init();
  for (NSString * __strong token in tokens) {
    (void) [outamounts putWithId:token withId:[self sumOutputsWithOrgMinimaObjectsBaseMiniData:new_OrgMinimaObjectsBaseMiniData_initWithNSString_(token)]];
  }
  id<JavaUtilEnumeration> keys = [outamounts keys];
  while ([((id<JavaUtilEnumeration>) nil_chk(keys)) hasMoreElements]) {
    NSString *tok = [keys nextElement];
    OrgMinimaObjectsBaseMiniNumber *outamt = [outamounts getWithId:tok];
    OrgMinimaObjectsBaseMiniNumber *inamt = [self sumInputsWithOrgMinimaObjectsBaseMiniData:new_OrgMinimaObjectsBaseMiniData_initWithNSString_(tok)];
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(inamt)) isLessWithOrgMinimaObjectsBaseMiniNumber:outamt]) {
      return false;
    }
  }
  return true;
}

- (void)addStateVariableWithOrgMinimaObjectsStateVariable:(OrgMinimaObjectsStateVariable *)zValue {
  OrgMinimaObjectsStateVariable *sv = [self getStateValueWithInt:[((OrgMinimaObjectsStateVariable *) nil_chk(zValue)) getPort]];
  if (sv != nil) {
    [sv resetDataWithOrgMinimaObjectsBaseMiniScript:[zValue getData]];
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mState_)) addWithId:zValue];
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(mState_, new_OrgMinimaObjectsTransaction_1_init());
}

- (OrgMinimaObjectsStateVariable *)getStateValueWithInt:(jint)zStateNum {
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    if ([((OrgMinimaObjectsStateVariable *) nil_chk(sv)) getPort] == zStateNum) {
      return sv;
    }
  }
  return nil;
}

- (jboolean)stateExistsWithInt:(jint)zStateNum {
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    if ([((OrgMinimaObjectsStateVariable *) nil_chk(sv)) getPort] == zStateNum) {
      return true;
    }
  }
  return false;
}

- (void)clearState {
  [((JavaUtilArrayList *) nil_chk(mState_)) clear];
}

- (JavaUtilArrayList *)getCompleteState {
  return mState_;
}

- (OrgMinimaObjectsBaseMiniData *)getLinkHash {
  return mLinkHash_;
}

- (void)setTokenGenerationDetailsWithOrgMinimaObjectsProofsTokenProof:(OrgMinimaObjectsProofsTokenProof *)zTokenDetails {
  mTokenGenDetails_ = zTokenDetails;
}

- (OrgMinimaObjectsProofsTokenProof *)getTokenGenerationDetails {
  return mTokenGenDetails_;
}

- (NSString *)description {
  return [((OrgMinimaUtilsJsonJSONObject *) nil_chk([self toJSON])) description];
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *ret = new_OrgMinimaUtilsJsonJSONObject_init();
  OrgMinimaUtilsJsonJSONArray *ins = new_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsCoin * __strong in in nil_chk(mInputs_)) {
    [ins addWithId:[((OrgMinimaObjectsCoin *) nil_chk(in)) toJSON]];
  }
  (void) [ret putWithId:@"inputs" withId:ins];
  OrgMinimaUtilsJsonJSONArray *outs = new_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsCoin * __strong out in nil_chk(mOutputs_)) {
    [outs addWithId:[((OrgMinimaObjectsCoin *) nil_chk(out)) toJSON]];
  }
  (void) [ret putWithId:@"outputs" withId:outs];
  outs = new_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    [outs addWithId:[((OrgMinimaObjectsStateVariable *) nil_chk(sv)) toJSON]];
  }
  (void) [ret putWithId:@"state" withId:outs];
  if (mTokenGenDetails_ != nil) {
    (void) [ret putWithId:@"tokengen" withId:[mTokenGenDetails_ toJSON]];
  }
  (void) [ret putWithId:@"linkhash" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mLinkHash_)) to0xString]];
  return ret;
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  OrgMinimaObjectsBaseMiniByte *ins = new_OrgMinimaObjectsBaseMiniByte_initWithInt_([((JavaUtilArrayList *) nil_chk(mInputs_)) size]);
  [ins writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsCoin * __strong coin in nil_chk(mInputs_)) {
    [((OrgMinimaObjectsCoin *) nil_chk(coin)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  OrgMinimaObjectsBaseMiniByte *outs = new_OrgMinimaObjectsBaseMiniByte_initWithInt_([((JavaUtilArrayList *) nil_chk(mOutputs_)) size]);
  [outs writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsCoin * __strong coin in nil_chk(mOutputs_)) {
    [((OrgMinimaObjectsCoin *) nil_chk(coin)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  jint len = [((JavaUtilArrayList *) nil_chk(mState_)) size];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    [((OrgMinimaObjectsStateVariable *) nil_chk(sv)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  if (mTokenGenDetails_ == nil) {
    [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaObjectsBaseMiniByte, FALSE))) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  else {
    [((OrgMinimaObjectsBaseMiniByte *) nil_chk(JreLoadStatic(OrgMinimaObjectsBaseMiniByte, TRUE))) writeDataStreamWithJavaIoDataOutputStream:zOut];
    [((OrgMinimaObjectsProofsTokenProof *) nil_chk(mTokenGenDetails_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mLinkHash_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mInputs_ = new_JavaUtilArrayList_init();
  mOutputs_ = new_JavaUtilArrayList_init();
  mState_ = new_JavaUtilArrayList_init();
  OrgMinimaObjectsBaseMiniByte *ins = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  jint len = [((OrgMinimaObjectsBaseMiniByte *) nil_chk(ins)) getValue];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsCoin *coin = OrgMinimaObjectsCoin_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mInputs_)) addWithId:coin];
  }
  OrgMinimaObjectsBaseMiniByte *outs = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  len = [((OrgMinimaObjectsBaseMiniByte *) nil_chk(outs)) getValue];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsCoin *coin = OrgMinimaObjectsCoin_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mOutputs_)) addWithId:coin];
  }
  len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsStateVariable *sv = OrgMinimaObjectsStateVariable_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mState_)) addWithId:sv];
  }
  OrgMinimaObjectsBaseMiniByte *tokgen = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  if ([((OrgMinimaObjectsBaseMiniByte *) nil_chk(tokgen)) isTrue]) {
    mTokenGenDetails_ = OrgMinimaObjectsProofsTokenProof_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  }
  else {
    mTokenGenDetails_ = nil;
  }
  mLinkHash_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

- (OrgMinimaObjectsTransaction *)deepCopy {
  @try {
    JavaIoByteArrayOutputStream *baos = new_JavaIoByteArrayOutputStream_init();
    JavaIoDataOutputStream *dos = new_JavaIoDataOutputStream_initWithJavaIoOutputStream_(baos);
    [self writeDataStreamWithJavaIoDataOutputStream:dos];
    [dos flush];
    [dos close];
    IOSByteArray *transbytes = [baos toByteArray];
    JavaIoByteArrayInputStream *bais = new_JavaIoByteArrayInputStream_initWithByteArray_(transbytes);
    JavaIoDataInputStream *dis = new_JavaIoDataInputStream_initWithJavaIoInputStream_(bais);
    OrgMinimaObjectsTransaction *deepcopy = new_OrgMinimaObjectsTransaction_init();
    [deepcopy readDataStreamWithJavaIoDataInputStream:dis];
    [dis close];
    return deepcopy;
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsCoin;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsStateVariable;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsProofsTokenProof;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addInputWithOrgMinimaObjectsCoin:);
  methods[2].selector = @selector(addOutputWithOrgMinimaObjectsCoin:);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(getAllInputs);
  methods[5].selector = @selector(getAllOutputs);
  methods[6].selector = @selector(sumInputs);
  methods[7].selector = @selector(sumInputsWithOrgMinimaObjectsBaseMiniData:);
  methods[8].selector = @selector(sumOutputs);
  methods[9].selector = @selector(sumOutputsWithOrgMinimaObjectsBaseMiniData:);
  methods[10].selector = @selector(getRemainderCoinWithOrgMinimaObjectsBaseMiniData:);
  methods[11].selector = @selector(checkValidInOutPerToken);
  methods[12].selector = @selector(addStateVariableWithOrgMinimaObjectsStateVariable:);
  methods[13].selector = @selector(getStateValueWithInt:);
  methods[14].selector = @selector(stateExistsWithInt:);
  methods[15].selector = @selector(clearState);
  methods[16].selector = @selector(getCompleteState);
  methods[17].selector = @selector(getLinkHash);
  methods[18].selector = @selector(setTokenGenerationDetailsWithOrgMinimaObjectsProofsTokenProof:);
  methods[19].selector = @selector(getTokenGenerationDetails);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(toJSON);
  methods[22].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[23].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[24].selector = @selector(deepCopy);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLinkHash_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mInputs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 22, -1 },
    { "mOutputs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 22, -1 },
    { "mState_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 23, -1 },
    { "mTokenGenDetails_", "LOrgMinimaObjectsProofsTokenProof;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addInput", "LOrgMinimaObjectsCoin;", "addOutput", "()Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;", "sumInputs", "LOrgMinimaObjectsBaseMiniData;", "sumOutputs", "getRemainderCoin", "addStateVariable", "LOrgMinimaObjectsStateVariable;", "getStateValue", "I", "stateExists", "()Ljava/util/ArrayList<Lorg/minima/objects/StateVariable;>;", "setTokenGenerationDetails", "LOrgMinimaObjectsProofsTokenProof;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;", "Ljava/util/ArrayList<Lorg/minima/objects/StateVariable;>;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsTransaction = { "Transaction", "org.minima.objects", ptrTable, methods, fields, 7, 0x1, 25, 5, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsTransaction;
}

@end

void OrgMinimaObjectsTransaction_init(OrgMinimaObjectsTransaction *self) {
  NSObject_init(self);
  self->mLinkHash_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->mInputs_ = new_JavaUtilArrayList_init();
  self->mOutputs_ = new_JavaUtilArrayList_init();
  self->mState_ = new_JavaUtilArrayList_init();
  self->mTokenGenDetails_ = nil;
}

OrgMinimaObjectsTransaction *new_OrgMinimaObjectsTransaction_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsTransaction, init)
}

OrgMinimaObjectsTransaction *create_OrgMinimaObjectsTransaction_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsTransaction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsTransaction)

@implementation OrgMinimaObjectsTransaction_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsTransaction_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(OrgMinimaObjectsStateVariable *)o1
               withId:(OrgMinimaObjectsStateVariable *)o2 {
  jint s1 = [((OrgMinimaObjectsStateVariable *) nil_chk(o1)) getPort];
  jint s2 = [((OrgMinimaObjectsStateVariable *) nil_chk(o2)) getPort];
  return JavaLangInteger_compareWithInt_withInt_(s1, s2);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LOrgMinimaObjectsStateVariable;LOrgMinimaObjectsStateVariable;", "LOrgMinimaObjectsTransaction;", "addStateVariableWithOrgMinimaObjectsStateVariable:", "Ljava/lang/Object;Ljava/util/Comparator<Lorg/minima/objects/StateVariable;>;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsTransaction_1 = { "", "org.minima.objects", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_OrgMinimaObjectsTransaction_1;
}

@end

void OrgMinimaObjectsTransaction_1_init(OrgMinimaObjectsTransaction_1 *self) {
  NSObject_init(self);
}

OrgMinimaObjectsTransaction_1 *new_OrgMinimaObjectsTransaction_1_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsTransaction_1, init)
}

OrgMinimaObjectsTransaction_1 *create_OrgMinimaObjectsTransaction_1_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsTransaction_1, init)
}
