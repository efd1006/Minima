//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/Transaction.java
//

#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/util/ArrayList.h"
#include "org/minima/objects/Coin.h"
#include "org/minima/objects/StateVariable.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@implementation OrgMinimaObjectsTransaction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsTransaction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addInputWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  [((JavaUtilArrayList *) nil_chk(mInputs_)) addWithId:zCoin];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(mInputs_)) size] == 0 && [((JavaUtilArrayList *) nil_chk(mOutputs_)) size] == 0;
}

- (void)addOutputWithOrgMinimaObjectsCoin:(OrgMinimaObjectsCoin *)zCoin {
  [((JavaUtilArrayList *) nil_chk(mOutputs_)) addWithId:zCoin];
}

- (JavaUtilArrayList *)getAllInputs {
  return mInputs_;
}

- (JavaUtilArrayList *)getAllOutputs {
  return mOutputs_;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumInputs {
  OrgMinimaObjectsBaseMiniNumber *tot = create_OrgMinimaObjectsBaseMiniNumber_init();
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mInputs_)) {
    tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:((OrgMinimaObjectsCoin *) nil_chk(cc))->mAmount_];
  }
  return tot;
}

- (OrgMinimaObjectsBaseMiniNumber *)sumOutputs {
  OrgMinimaObjectsBaseMiniNumber *tot = create_OrgMinimaObjectsBaseMiniNumber_init();
  for (OrgMinimaObjectsCoin * __strong cc in nil_chk(mOutputs_)) {
    tot = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(tot)) addWithOrgMinimaObjectsBaseMiniNumber:((OrgMinimaObjectsCoin *) nil_chk(cc))->mAmount_];
  }
  return tot;
}

- (void)addStateVariableWithOrgMinimaObjectsStateVariable:(OrgMinimaObjectsStateVariable *)zValue {
  [((JavaUtilArrayList *) nil_chk(mState_)) addWithId:zValue];
}

- (OrgMinimaObjectsStateVariable *)getStateValueWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zStateNum {
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsStateVariable *) nil_chk(sv)) getPort])) isEqualWithOrgMinimaObjectsBaseMiniNumber:zStateNum]) {
      return sv;
    }
  }
  return nil;
}

- (jboolean)stateExistsWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zStateNum {
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    if ([((OrgMinimaObjectsBaseMiniNumber *) nil_chk([((OrgMinimaObjectsStateVariable *) nil_chk(sv)) getPort])) isEqualWithOrgMinimaObjectsBaseMiniNumber:zStateNum]) {
      return true;
    }
  }
  return false;
}

- (void)clearState {
  [((JavaUtilArrayList *) nil_chk(mState_)) clear];
}

- (JavaUtilArrayList *)getCompleteState {
  return mState_;
}

- (NSString *)description {
  return [((OrgMinimaUtilsJsonJSONObject *) nil_chk([self toJSON])) description];
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *ret = create_OrgMinimaUtilsJsonJSONObject_init();
  OrgMinimaUtilsJsonJSONArray *ins = create_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsCoin * __strong in in nil_chk(mInputs_)) {
    [ins addWithId:[((OrgMinimaObjectsCoin *) nil_chk(in)) toJSON]];
  }
  [ret putWithId:@"inputs" withId:ins];
  OrgMinimaUtilsJsonJSONArray *outs = create_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsCoin * __strong out in nil_chk(mOutputs_)) {
    [outs addWithId:[((OrgMinimaObjectsCoin *) nil_chk(out)) toJSON]];
  }
  [ret putWithId:@"outputs" withId:outs];
  outs = create_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    [outs addWithId:[((OrgMinimaObjectsStateVariable *) nil_chk(sv)) toJSON]];
  }
  [ret putWithId:@"state" withId:outs];
  return ret;
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  OrgMinimaObjectsBaseMiniByte *ins = create_OrgMinimaObjectsBaseMiniByte_initWithInt_([((JavaUtilArrayList *) nil_chk(mInputs_)) size]);
  [ins writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsCoin * __strong coin in nil_chk(mInputs_)) {
    [((OrgMinimaObjectsCoin *) nil_chk(coin)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  OrgMinimaObjectsBaseMiniByte *outs = create_OrgMinimaObjectsBaseMiniByte_initWithInt_([((JavaUtilArrayList *) nil_chk(mOutputs_)) size]);
  [outs writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsCoin * __strong coin in nil_chk(mOutputs_)) {
    [((OrgMinimaObjectsCoin *) nil_chk(coin)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  jint len = [((JavaUtilArrayList *) nil_chk(mState_)) size];
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  for (OrgMinimaObjectsStateVariable * __strong sv in nil_chk(mState_)) {
    [((OrgMinimaObjectsStateVariable *) nil_chk(sv)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  JreStrongAssignAndConsume(&mInputs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&mOutputs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&mState_, new_JavaUtilArrayList_init());
  OrgMinimaObjectsBaseMiniByte *ins = create_OrgMinimaObjectsBaseMiniByte_init();
  [ins readDataStreamWithJavaIoDataInputStream:zIn];
  jint len = [ins getValue];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsCoin *coin = OrgMinimaObjectsCoin_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mInputs_)) addWithId:coin];
  }
  OrgMinimaObjectsBaseMiniByte *outs = create_OrgMinimaObjectsBaseMiniByte_init();
  [outs readDataStreamWithJavaIoDataInputStream:zIn];
  len = [outs getValue];
  for (jint i = 0; i < len; i++) {
    OrgMinimaObjectsCoin *coin = OrgMinimaObjectsCoin_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mOutputs_)) addWithId:coin];
  }
  jint sl = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  for (jint i = 0; i < sl; i++) {
    OrgMinimaObjectsStateVariable *sv = OrgMinimaObjectsStateVariable_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    [((JavaUtilArrayList *) nil_chk(mState_)) addWithId:sv];
  }
}

- (void)dealloc {
  RELEASE_(mInputs_);
  RELEASE_(mOutputs_);
  RELEASE_(mState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsStateVariable;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addInputWithOrgMinimaObjectsCoin:);
  methods[2].selector = @selector(isEmpty);
  methods[3].selector = @selector(addOutputWithOrgMinimaObjectsCoin:);
  methods[4].selector = @selector(getAllInputs);
  methods[5].selector = @selector(getAllOutputs);
  methods[6].selector = @selector(sumInputs);
  methods[7].selector = @selector(sumOutputs);
  methods[8].selector = @selector(addStateVariableWithOrgMinimaObjectsStateVariable:);
  methods[9].selector = @selector(getStateValueWithOrgMinimaObjectsBaseMiniNumber:);
  methods[10].selector = @selector(stateExistsWithOrgMinimaObjectsBaseMiniNumber:);
  methods[11].selector = @selector(clearState);
  methods[12].selector = @selector(getCompleteState);
  methods[13].selector = @selector(description);
  methods[14].selector = @selector(toJSON);
  methods[15].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[16].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mInputs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "mOutputs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
    { "mState_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "addInput", "LOrgMinimaObjectsCoin;", "addOutput", "()Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;", "addStateVariable", "LOrgMinimaObjectsStateVariable;", "getStateValue", "LOrgMinimaObjectsBaseMiniNumber;", "stateExists", "()Ljava/util/ArrayList<Lorg/minima/objects/StateVariable;>;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/ArrayList<Lorg/minima/objects/Coin;>;", "Ljava/util/ArrayList<Lorg/minima/objects/StateVariable;>;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsTransaction = { "Transaction", "org.minima.objects", ptrTable, methods, fields, 7, 0x1, 17, 3, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsTransaction;
}

@end

void OrgMinimaObjectsTransaction_init(OrgMinimaObjectsTransaction *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mInputs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mOutputs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mState_, new_JavaUtilArrayList_init());
}

OrgMinimaObjectsTransaction *new_OrgMinimaObjectsTransaction_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsTransaction, init)
}

OrgMinimaObjectsTransaction *create_OrgMinimaObjectsTransaction_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsTransaction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsTransaction)
