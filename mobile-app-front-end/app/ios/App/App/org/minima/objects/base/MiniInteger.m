//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/base/MiniInteger.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/RoundingMode.h"
#include "org/minima/objects/base/MiniInteger.h"

@interface OrgMinimaObjectsBaseMiniInteger () {
 @public
  JavaMathBigInteger *mNumber_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgMinimaObjectsBaseMiniInteger, mNumber_, JavaMathBigInteger *)

__attribute__((unused)) static void OrgMinimaObjectsBaseMiniInteger_init(OrgMinimaObjectsBaseMiniInteger *self);

__attribute__((unused)) static OrgMinimaObjectsBaseMiniInteger *new_OrgMinimaObjectsBaseMiniInteger_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMinimaObjectsBaseMiniInteger *create_OrgMinimaObjectsBaseMiniInteger_init(void);

J2OBJC_INITIALIZED_DEFN(OrgMinimaObjectsBaseMiniInteger)

OrgMinimaObjectsBaseMiniInteger *OrgMinimaObjectsBaseMiniInteger_ZERO;
OrgMinimaObjectsBaseMiniInteger *OrgMinimaObjectsBaseMiniInteger_ONE;
OrgMinimaObjectsBaseMiniInteger *OrgMinimaObjectsBaseMiniInteger_TWO;

@implementation OrgMinimaObjectsBaseMiniInteger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsBaseMiniInteger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaMathBigInteger:(JavaMathBigInteger *)zNumber {
  OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_(self, zNumber);
  return self;
}

- (instancetype)initWithInt:(jint)zNumber {
  OrgMinimaObjectsBaseMiniInteger_initWithInt_(self, zNumber);
  return self;
}

- (JavaMathBigInteger *)getNumber {
  return mNumber_;
}

- (jboolean)isEqualWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return [((JavaMathBigInteger *) nil_chk(mNumber_)) compareToWithId:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]] == 0;
}

- (jboolean)isLessWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return [((JavaMathBigInteger *) nil_chk(mNumber_)) compareToWithId:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]] < 0;
}

- (OrgMinimaObjectsBaseMiniInteger *)moduloWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(mNumber_)) modWithJavaMathBigInteger:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]]);
}

- (OrgMinimaObjectsBaseMiniInteger *)addWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(mNumber_)) addWithJavaMathBigInteger:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]]);
}

- (OrgMinimaObjectsBaseMiniInteger *)subWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(mNumber_)) subtractWithJavaMathBigInteger:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]]);
}

- (OrgMinimaObjectsBaseMiniInteger *)divRoundDownWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  JavaMathBigDecimal *bigd = create_JavaMathBigDecimal_initWithJavaMathBigInteger_(mNumber_);
  JavaMathBigDecimal *bigddiv = create_JavaMathBigDecimal_initWithJavaMathBigInteger_([((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]);
  JavaMathBigDecimal *ans = [bigd divideWithJavaMathBigDecimal:bigddiv withJavaMathRoundingMode:JreLoadEnum(JavaMathRoundingMode, DOWN)];
  return create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_([((JavaMathBigDecimal *) nil_chk(ans)) toBigInteger]);
}

- (OrgMinimaObjectsBaseMiniInteger *)multWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNumber {
  return create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_([((JavaMathBigInteger *) nil_chk(mNumber_)) multiplyWithJavaMathBigInteger:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(zNumber)) getNumber]]);
}

- (OrgMinimaObjectsBaseMiniInteger *)increment {
  return [self addWithOrgMinimaObjectsBaseMiniInteger:OrgMinimaObjectsBaseMiniInteger_ONE];
}

- (NSString *)description {
  return [((JavaMathBigInteger *) nil_chk(mNumber_)) description];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  IOSByteArray *bytes = [((JavaMathBigInteger *) nil_chk(mNumber_)) toByteArray];
  jint len = ((IOSByteArray *) nil_chk(bytes))->size_;
  [((JavaIoDataOutputStream *) nil_chk(zOut)) writeIntWithInt:len];
  [zOut writeWithByteArray:bytes];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  jint len = [((JavaIoDataInputStream *) nil_chk(zIn)) readInt];
  IOSByteArray *data = [IOSByteArray arrayWithLength:len];
  [zIn readFullyWithByteArray:data];
  JreStrongAssignAndConsume(&mNumber_, new_JavaMathBigInteger_initWithByteArray_(data));
}

+ (OrgMinimaObjectsBaseMiniInteger *)ReadFromStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  return OrgMinimaObjectsBaseMiniInteger_ReadFromStreamWithJavaIoDataInputStream_(zIn);
}

- (void)dealloc {
  RELEASE_(mNumber_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 13, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x9, 16, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaMathBigInteger:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(getNumber);
  methods[4].selector = @selector(isEqualWithOrgMinimaObjectsBaseMiniInteger:);
  methods[5].selector = @selector(isLessWithOrgMinimaObjectsBaseMiniInteger:);
  methods[6].selector = @selector(moduloWithOrgMinimaObjectsBaseMiniInteger:);
  methods[7].selector = @selector(addWithOrgMinimaObjectsBaseMiniInteger:);
  methods[8].selector = @selector(subWithOrgMinimaObjectsBaseMiniInteger:);
  methods[9].selector = @selector(divRoundDownWithOrgMinimaObjectsBaseMiniInteger:);
  methods[10].selector = @selector(multWithOrgMinimaObjectsBaseMiniInteger:);
  methods[11].selector = @selector(increment);
  methods[12].selector = @selector(description);
  methods[13].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[14].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[15].selector = @selector(ReadFromStreamWithJavaIoDataInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO", "LOrgMinimaObjectsBaseMiniInteger;", .constantValue.asLong = 0, 0x9, -1, 17, -1, -1 },
    { "ONE", "LOrgMinimaObjectsBaseMiniInteger;", .constantValue.asLong = 0, 0x9, -1, 18, -1, -1 },
    { "TWO", "LOrgMinimaObjectsBaseMiniInteger;", .constantValue.asLong = 0, 0x9, -1, 19, -1, -1 },
    { "mNumber_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaMathBigInteger;", "I", "isEqual", "LOrgMinimaObjectsBaseMiniInteger;", "isLess", "modulo", "add", "sub", "divRoundDown", "mult", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "ReadFromStream", &OrgMinimaObjectsBaseMiniInteger_ZERO, &OrgMinimaObjectsBaseMiniInteger_ONE, &OrgMinimaObjectsBaseMiniInteger_TWO };
  static const J2ObjcClassInfo _OrgMinimaObjectsBaseMiniInteger = { "MiniInteger", "org.minima.objects.base", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsBaseMiniInteger;
}

+ (void)initialize {
  if (self == [OrgMinimaObjectsBaseMiniInteger class]) {
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniInteger_ZERO, new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(0));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniInteger_ONE, new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(1));
    JreStrongAssignAndConsume(&OrgMinimaObjectsBaseMiniInteger_TWO, new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(2));
    J2OBJC_SET_INITIALIZED(OrgMinimaObjectsBaseMiniInteger)
  }
}

@end

void OrgMinimaObjectsBaseMiniInteger_init(OrgMinimaObjectsBaseMiniInteger *self) {
  NSObject_init(self);
}

OrgMinimaObjectsBaseMiniInteger *new_OrgMinimaObjectsBaseMiniInteger_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniInteger, init)
}

OrgMinimaObjectsBaseMiniInteger *create_OrgMinimaObjectsBaseMiniInteger_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniInteger, init)
}

void OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_(OrgMinimaObjectsBaseMiniInteger *self, JavaMathBigInteger *zNumber) {
  NSObject_init(self);
  JreStrongAssign(&self->mNumber_, zNumber);
}

OrgMinimaObjectsBaseMiniInteger *new_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniInteger, initWithJavaMathBigInteger_, zNumber)
}

OrgMinimaObjectsBaseMiniInteger *create_OrgMinimaObjectsBaseMiniInteger_initWithJavaMathBigInteger_(JavaMathBigInteger *zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniInteger, initWithJavaMathBigInteger_, zNumber)
}

void OrgMinimaObjectsBaseMiniInteger_initWithInt_(OrgMinimaObjectsBaseMiniInteger *self, jint zNumber) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mNumber_, new_JavaMathBigInteger_initWithNSString_(JavaLangInteger_toStringWithInt_(zNumber)));
}

OrgMinimaObjectsBaseMiniInteger *new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(jint zNumber) {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsBaseMiniInteger, initWithInt_, zNumber)
}

OrgMinimaObjectsBaseMiniInteger *create_OrgMinimaObjectsBaseMiniInteger_initWithInt_(jint zNumber) {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsBaseMiniInteger, initWithInt_, zNumber)
}

OrgMinimaObjectsBaseMiniInteger *OrgMinimaObjectsBaseMiniInteger_ReadFromStreamWithJavaIoDataInputStream_(JavaIoDataInputStream *zIn) {
  OrgMinimaObjectsBaseMiniInteger_initialize();
  OrgMinimaObjectsBaseMiniInteger *data = create_OrgMinimaObjectsBaseMiniInteger_init();
  @try {
    [data readDataStreamWithJavaIoDataInputStream:zIn];
  }
  @catch (JavaIoIOException *e) {
    return nil;
  }
  return data;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsBaseMiniInteger)
