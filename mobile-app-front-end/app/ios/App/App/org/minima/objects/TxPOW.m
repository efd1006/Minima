//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/TxPOW.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/lang/Boolean.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "org/minima/objects/Difficulty.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniHash.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/SuperBlockLevels.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@interface OrgMinimaObjectsTxPOW () {
 @public
  OrgMinimaObjectsBaseMiniNumber *mNonce_;
  OrgMinimaObjectsBaseMiniNumber *mTimeMilli_;
  OrgMinimaObjectsBaseMiniByte *mTxnDifficulty_;
  OrgMinimaObjectsTransaction *mTransaction_;
  OrgMinimaObjectsWitness *mWitness_;
  OrgMinimaObjectsBaseMiniNumber *mBlockNumber_;
  OrgMinimaObjectsBaseMiniHash *mParent_;
  OrgMinimaObjectsBaseMiniByte *mBlockDifficulty_;
  JavaUtilArrayList *mTxPowIDList_;
  OrgMinimaObjectsBaseMiniHash *_mTxPOWID_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mNonce_, OrgMinimaObjectsBaseMiniNumber *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTimeMilli_, OrgMinimaObjectsBaseMiniNumber *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTxnDifficulty_, OrgMinimaObjectsBaseMiniByte *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTransaction_, OrgMinimaObjectsTransaction *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mWitness_, OrgMinimaObjectsWitness *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBlockNumber_, OrgMinimaObjectsBaseMiniNumber *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mParent_, OrgMinimaObjectsBaseMiniHash *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBlockDifficulty_, OrgMinimaObjectsBaseMiniByte *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTxPowIDList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, _mTxPOWID_, OrgMinimaObjectsBaseMiniHash *)

inline JavaTextSimpleDateFormat *OrgMinimaObjectsTxPOW_get_mSDF(void);
inline JavaTextSimpleDateFormat *OrgMinimaObjectsTxPOW_set_mSDF(JavaTextSimpleDateFormat *value);
static JavaTextSimpleDateFormat *OrgMinimaObjectsTxPOW_mSDF;
J2OBJC_STATIC_FIELD_OBJ(OrgMinimaObjectsTxPOW, mSDF, JavaTextSimpleDateFormat *)

J2OBJC_INITIALIZED_DEFN(OrgMinimaObjectsTxPOW)

@implementation OrgMinimaObjectsTxPOW

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsTxPOW_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setNonceWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zNonce {
  JreStrongAssign(&mNonce_, zNonce);
}

- (void)setChainIDWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zChainID {
  JreStrongAssign(&mChainID_, zChainID);
}

- (OrgMinimaObjectsBaseMiniHash *)getChainID {
  return mChainID_;
}

- (void)setCustomWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zCustom {
  JreStrongAssign(&mCustom_, zCustom);
}

- (OrgMinimaObjectsBaseMiniHash *)getCustom {
  return mCustom_;
}

- (void)setTxDifficultyWithInt:(jint)zDifficulty {
  JreStrongAssignAndConsume(&mTxnDifficulty_, new_OrgMinimaObjectsBaseMiniByte_initWithInt_(zDifficulty));
}

- (jint)getTxnDifficulty {
  return [((OrgMinimaObjectsBaseMiniByte *) nil_chk(mTxnDifficulty_)) getValue];
}

- (void)setTimeMilliWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zMilli {
  JreStrongAssign(&mTimeMilli_, zMilli);
}

- (OrgMinimaObjectsTransaction *)getTransaction {
  return mTransaction_;
}

- (void)setTransactionWithOrgMinimaObjectsTransaction:(OrgMinimaObjectsTransaction *)zTran {
  JreStrongAssign(&mTransaction_, zTran);
}

- (void)addBlockTxPOWWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) addWithId:[((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTxPowID]];
}

- (JavaUtilArrayList *)getBlockTxns {
  return mTxPowIDList_;
}

- (jint)getBlockDifficulty {
  return [((OrgMinimaObjectsBaseMiniByte *) nil_chk(mBlockDifficulty_)) getValue];
}

- (void)setBlockDifficultyWithInt:(jint)zBlockDifficulty {
  JreStrongAssignAndConsume(&mBlockDifficulty_, new_OrgMinimaObjectsBaseMiniByte_initWithInt_(zBlockDifficulty));
}

- (void)setParentWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zData {
  JreStrongAssign(&mParent_, zData);
}

- (OrgMinimaObjectsBaseMiniHash *)getParentID {
  return mParent_;
}

- (OrgMinimaObjectsBaseMiniNumber *)getTimeMilli {
  return mTimeMilli_;
}

- (void)setBlockNumberWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNum {
  JreStrongAssign(&mBlockNumber_, zBlockNum);
}

- (OrgMinimaObjectsBaseMiniNumber *)getBlockNumber {
  return mBlockNumber_;
}

- (void)setWitnessWithOrgMinimaObjectsWitness:(OrgMinimaObjectsWitness *)zWitness {
  JreStrongAssign(&mWitness_, zWitness);
}

- (OrgMinimaObjectsWitness *)getWitness {
  return mWitness_;
}

- (OrgMinimaObjectsBaseMiniHash *)getMMRRoot {
  return mMMRRoot_;
}

- (void)setMMRRootWithOrgMinimaObjectsBaseMiniHash:(OrgMinimaObjectsBaseMiniHash *)zRoot {
  JreStrongAssign(&mMMRRoot_, zRoot);
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *txpow = create_OrgMinimaUtilsJsonJSONObject_init();
  [txpow putWithId:@"block" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockNumber_)) description]];
  [txpow putWithId:@"isblock" withId:JavaLangBoolean_valueOfWithBoolean_(_mIsBlockPOW_)];
  [txpow putWithId:@"txpowid" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(_mTxPOWID_)) description]];
  [txpow putWithId:@"parent" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mParent_)) description]];
  [txpow putWithId:@"blkdiff" withId:mBlockDifficulty_];
  [txpow putWithId:@"txndiff" withId:mTxnDifficulty_];
  [txpow putWithId:@"txn" withId:[((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) toJSON]];
  [txpow putWithId:@"witness" withId:[((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) toJSON]];
  OrgMinimaUtilsJsonJSONArray *txns = create_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsBaseMiniHash * __strong txn in nil_chk(mTxPowIDList_)) {
    [txns addWithId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(txn)) to0xString]];
  }
  [txpow putWithId:@"txnlist" withId:txns];
  [txpow putWithId:@"magic" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMagic_)) description]];
  [txpow putWithId:@"chainid" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mChainID_)) description]];
  [txpow putWithId:@"custom" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mCustom_)) description]];
  [txpow putWithId:@"nonce" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNonce_)) description]];
  [txpow putWithId:@"mmr" withId:[((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMMRRoot_)) description]];
  [txpow putWithId:@"timemilli" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeMilli_)) description]];
  [txpow putWithId:@"date" withId:[create_JavaUtilDate_initWithLong_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeMilli_)) getAsLong]) description]];
  return txpow;
}

- (NSString *)description {
  return [((OrgMinimaUtilsJsonJSONObject *) nil_chk([self toJSON])) description];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNonce_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMagic_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mChainID_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mCustom_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeMilli_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniByte *) nil_chk(mTxnDifficulty_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockNumber_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mParent_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniByte *) nil_chk(mBlockDifficulty_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  OrgMinimaObjectsBaseMiniHash *old = nil;
  jint counter = 0;
  for (jint i = 0; i < OrgMinimaObjectsTxPOW_SUPERPARENT_NUM; i++) {
    OrgMinimaObjectsBaseMiniHash *curr = IOSObjectArray_Get(nil_chk(mSuperParents_), i);
    if (old == nil) {
      old = curr;
      counter++;
    }
    else {
      if ([old isExactlyEqualWithOrgMinimaObjectsBaseMiniData:curr]) {
        counter++;
        if (i == OrgMinimaObjectsTxPOW_SUPERPARENT_NUM - 1) {
          OrgMinimaObjectsBaseMiniByte *count = create_OrgMinimaObjectsBaseMiniByte_initWithInt_(counter);
          [count writeDataStreamWithJavaIoDataOutputStream:zOut];
          [((OrgMinimaObjectsBaseMiniHash *) nil_chk(curr)) writeDataStreamWithJavaIoDataOutputStream:zOut];
        }
      }
      else {
        OrgMinimaObjectsBaseMiniByte *count = create_OrgMinimaObjectsBaseMiniByte_initWithInt_(counter);
        [count writeDataStreamWithJavaIoDataOutputStream:zOut];
        [old writeDataStreamWithJavaIoDataOutputStream:zOut];
        old = curr;
        counter = 1;
      }
    }
  }
  jint len = [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) size];
  OrgMinimaObjectsBaseMiniNumber *ramlen = create_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(JreStrcat("I", len));
  [ramlen writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsBaseMiniHash * __strong txpowid in nil_chk(mTxPowIDList_)) {
    [((OrgMinimaObjectsBaseMiniHash *) nil_chk(txpowid)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMMRRoot_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mNonce_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMagic_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mChainID_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mCustom_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeMilli_)) readDataStreamWithJavaIoDataInputStream:zIn];
  JreStrongAssign(&mTxnDifficulty_, OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  [((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockNumber_)) readDataStreamWithJavaIoDataInputStream:zIn];
  JreStrongAssign(&mParent_, OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(zIn));
  [((OrgMinimaObjectsBaseMiniByte *) nil_chk(mBlockDifficulty_)) readDataStreamWithJavaIoDataInputStream:zIn];
  jint tot = 0;
  while (tot < OrgMinimaObjectsTxPOW_SUPERPARENT_NUM) {
    OrgMinimaObjectsBaseMiniByte *len = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    OrgMinimaObjectsBaseMiniHash *sup = OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    jint count = [((OrgMinimaObjectsBaseMiniByte *) nil_chk(len)) getValue];
    for (jint i = 0; i < count; i++) {
      IOSObjectArray_Set(nil_chk(mSuperParents_), tot++, sup);
    }
  }
  JreStrongAssignAndConsume(&mTxPowIDList_, new_JavaUtilArrayList_init());
  OrgMinimaObjectsBaseMiniNumber *ramlen = create_OrgMinimaObjectsBaseMiniNumber_init();
  [ramlen readDataStreamWithJavaIoDataInputStream:zIn];
  jint len = [ramlen getAsInt];
  for (jint i = 0; i < len; i++) {
    [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) addWithId:OrgMinimaObjectsBaseMiniHash_ReadFromStreamWithJavaIoDataInputStream_(zIn)];
  }
  [((OrgMinimaObjectsBaseMiniHash *) nil_chk(mMMRRoot_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [self calculateTXPOWID];
}

- (OrgMinimaObjectsBaseMiniHash *)getTxPowID {
  return _mTxPOWID_;
}

- (jint)getSuperLevel {
  return _mSuperBlock_;
}

- (jboolean)isBlock {
  return _mIsBlockPOW_;
}

- (jboolean)isTransaction {
  return _mIsTxnPOW_;
}

- (void)calculateTXPOWID {
  JreStrongAssign(&_mTxPOWID_, [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:self]);
  OrgMinimaObjectsDifficulty *blkdiff = create_OrgMinimaObjectsDifficulty_initWithInt_([self getBlockDifficulty]);
  OrgMinimaObjectsDifficulty *txndiff = create_OrgMinimaObjectsDifficulty_initWithInt_([self getTxnDifficulty]);
  _mIsBlockPOW_ = false;
  if ([blkdiff isOKWithOrgMinimaObjectsBaseMiniHash:_mTxPOWID_]) {
    _mIsBlockPOW_ = true;
  }
  _mIsTxnPOW_ = false;
  if ([txndiff isOKWithOrgMinimaObjectsBaseMiniHash:_mTxPOWID_] && ![((OrgMinimaObjectsTransaction *) nil_chk([self getTransaction])) isEmpty]) {
    _mIsTxnPOW_ = true;
  }
  _mSuperBlock_ = [((OrgMinimaUtilsSuperBlockLevels *) nil_chk(OrgMinimaUtilsSuperBlockLevels_getSupers())) getSuperBlockLevelWithOrgMinimaObjectsBaseMiniHash:_mTxPOWID_];
  if (_mSuperBlock_ >= OrgMinimaObjectsTxPOW_SUPERPARENT_NUM) {
    _mSuperBlock_ = OrgMinimaObjectsTxPOW_SUPERPARENT_NUM - 1;
  }
}

- (void)dealloc {
  RELEASE_(mNonce_);
  RELEASE_(mTimeMilli_);
  RELEASE_(mTxnDifficulty_);
  RELEASE_(mTransaction_);
  RELEASE_(mWitness_);
  RELEASE_(mBlockNumber_);
  RELEASE_(mParent_);
  RELEASE_(mBlockDifficulty_);
  RELEASE_(mTxPowIDList_);
  RELEASE_(mSuperParents_);
  RELEASE_(mMMRRoot_);
  RELEASE_(mMagic_);
  RELEASE_(mChainID_);
  RELEASE_(mCustom_);
  RELEASE_(_mTxPOWID_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsWitness;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 22, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, 22, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniHash;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setNonceWithOrgMinimaObjectsBaseMiniNumber:);
  methods[2].selector = @selector(setChainIDWithOrgMinimaObjectsBaseMiniHash:);
  methods[3].selector = @selector(getChainID);
  methods[4].selector = @selector(setCustomWithOrgMinimaObjectsBaseMiniHash:);
  methods[5].selector = @selector(getCustom);
  methods[6].selector = @selector(setTxDifficultyWithInt:);
  methods[7].selector = @selector(getTxnDifficulty);
  methods[8].selector = @selector(setTimeMilliWithOrgMinimaObjectsBaseMiniNumber:);
  methods[9].selector = @selector(getTransaction);
  methods[10].selector = @selector(setTransactionWithOrgMinimaObjectsTransaction:);
  methods[11].selector = @selector(addBlockTxPOWWithOrgMinimaObjectsTxPOW:);
  methods[12].selector = @selector(getBlockTxns);
  methods[13].selector = @selector(getBlockDifficulty);
  methods[14].selector = @selector(setBlockDifficultyWithInt:);
  methods[15].selector = @selector(setParentWithOrgMinimaObjectsBaseMiniHash:);
  methods[16].selector = @selector(getParentID);
  methods[17].selector = @selector(getTimeMilli);
  methods[18].selector = @selector(setBlockNumberWithOrgMinimaObjectsBaseMiniNumber:);
  methods[19].selector = @selector(getBlockNumber);
  methods[20].selector = @selector(setWitnessWithOrgMinimaObjectsWitness:);
  methods[21].selector = @selector(getWitness);
  methods[22].selector = @selector(getMMRRoot);
  methods[23].selector = @selector(setMMRRootWithOrgMinimaObjectsBaseMiniHash:);
  methods[24].selector = @selector(toJSON);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[27].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[28].selector = @selector(getTxPowID);
  methods[29].selector = @selector(getSuperLevel);
  methods[30].selector = @selector(isBlock);
  methods[31].selector = @selector(isTransaction);
  methods[32].selector = @selector(calculateTXPOWID);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNonce_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeMilli_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTxnDifficulty_", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransaction_", "LOrgMinimaObjectsTransaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWitness_", "LOrgMinimaObjectsWitness;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBlockNumber_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParent_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBlockDifficulty_", "LOrgMinimaObjectsBaseMiniByte;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTxPowIDList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 25, -1 },
    { "SUPERPARENT_NUM", "I", .constantValue.asInt = OrgMinimaObjectsTxPOW_SUPERPARENT_NUM, 0x19, -1, -1, -1, -1 },
    { "mSuperParents_", "[LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMMRRoot_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMagic_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mChainID_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCustom_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "_mTxPOWID_", "LOrgMinimaObjectsBaseMiniHash;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mIsBlockPOW_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_mIsTxnPOW_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_mSuperBlock_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSDF", "LJavaTextSimpleDateFormat;", .constantValue.asLong = 0, 0xa, -1, 26, -1, -1 },
  };
  static const void *ptrTable[] = { "setNonce", "LOrgMinimaObjectsBaseMiniNumber;", "setChainID", "LOrgMinimaObjectsBaseMiniHash;", "setCustom", "setTxDifficulty", "I", "setTimeMilli", "setTransaction", "LOrgMinimaObjectsTransaction;", "addBlockTxPOW", "LOrgMinimaObjectsTxPOW;", "()Ljava/util/ArrayList<Lorg/minima/objects/base/MiniHash;>;", "setBlockDifficulty", "setParent", "setBlockNumber", "setWitness", "LOrgMinimaObjectsWitness;", "setMMRRoot", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/ArrayList<Lorg/minima/objects/base/MiniHash;>;", &OrgMinimaObjectsTxPOW_mSDF };
  static const J2ObjcClassInfo _OrgMinimaObjectsTxPOW = { "TxPOW", "org.minima.objects", ptrTable, methods, fields, 7, 0x1, 33, 20, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsTxPOW;
}

+ (void)initialize {
  if (self == [OrgMinimaObjectsTxPOW class]) {
    JreStrongAssignAndConsume(&OrgMinimaObjectsTxPOW_mSDF, new_JavaTextSimpleDateFormat_initWithNSString_(@"HH:mm:ss.SSS"));
    J2OBJC_SET_INITIALIZED(OrgMinimaObjectsTxPOW)
  }
}

@end

void OrgMinimaObjectsTxPOW_init(OrgMinimaObjectsTxPOW *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mNonce_, new_OrgMinimaObjectsBaseMiniNumber_init());
  JreStrongAssignAndConsume(&self->mTimeMilli_, new_OrgMinimaObjectsBaseMiniNumber_init());
  JreStrongAssignAndConsume(&self->mTxnDifficulty_, new_OrgMinimaObjectsBaseMiniByte_init());
  JreStrongAssignAndConsume(&self->mTransaction_, new_OrgMinimaObjectsTransaction_init());
  JreStrongAssignAndConsume(&self->mWitness_, new_OrgMinimaObjectsWitness_init());
  JreStrongAssignAndConsume(&self->mBlockNumber_, new_OrgMinimaObjectsBaseMiniNumber_init());
  JreStrongAssignAndConsume(&self->mParent_, new_OrgMinimaObjectsBaseMiniHash_init());
  JreStrongAssignAndConsume(&self->mBlockDifficulty_, new_OrgMinimaObjectsBaseMiniByte_init());
  JreStrongAssignAndConsume(&self->mSuperParents_, [IOSObjectArray newArrayWithLength:OrgMinimaObjectsTxPOW_SUPERPARENT_NUM type:OrgMinimaObjectsBaseMiniHash_class_()]);
  JreStrongAssignAndConsume(&self->mMMRRoot_, new_OrgMinimaObjectsBaseMiniHash_init());
  JreStrongAssign(&self->mMagic_, OrgMinimaObjectsBaseMiniHash_getRandomData());
  JreStrongAssignAndConsume(&self->mChainID_, new_OrgMinimaObjectsBaseMiniHash_initWithNSString_(@"0x00"));
  JreStrongAssignAndConsume(&self->mCustom_, new_OrgMinimaObjectsBaseMiniHash_initWithNSString_(@"0x00"));
  JreStrongAssignAndConsume(&self->_mTxPOWID_, new_OrgMinimaObjectsBaseMiniHash_init());
  JreStrongAssignAndConsume(&self->mTxPowIDList_, new_JavaUtilArrayList_init());
  for (jint i = 0; i < OrgMinimaObjectsTxPOW_SUPERPARENT_NUM; i++) {
    IOSObjectArray_SetAndConsume(nil_chk(self->mSuperParents_), i, new_OrgMinimaObjectsBaseMiniHash_init());
  }
}

OrgMinimaObjectsTxPOW *new_OrgMinimaObjectsTxPOW_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsTxPOW, init)
}

OrgMinimaObjectsTxPOW *create_OrgMinimaObjectsTxPOW_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsTxPOW, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsTxPOW)
