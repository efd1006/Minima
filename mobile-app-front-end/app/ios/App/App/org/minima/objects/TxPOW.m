//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/minima/objects/TxPOW.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/DataInputStream.h"
#include "java/io/DataOutputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Date.h"
#include "org/minima/GlobalParams.h"
#include "org/minima/objects/Transaction.h"
#include "org/minima/objects/TxPOW.h"
#include "org/minima/objects/Witness.h"
#include "org/minima/objects/base/MMRSumNumber.h"
#include "org/minima/objects/base/MiniByte.h"
#include "org/minima/objects/base/MiniData.h"
#include "org/minima/objects/base/MiniInteger.h"
#include "org/minima/objects/base/MiniNumber.h"
#include "org/minima/utils/Crypto.h"
#include "org/minima/utils/SuperBlockLevels.h"
#include "org/minima/utils/json/JSONArray.h"
#include "org/minima/utils/json/JSONObject.h"

@interface OrgMinimaObjectsTxPOW () {
 @public
  OrgMinimaObjectsBaseMiniInteger *mNonce_;
  OrgMinimaObjectsBaseMiniNumber *mTimeSecs_;
  OrgMinimaObjectsBaseMiniData *mTxnDifficulty_;
  OrgMinimaObjectsTransaction *mTransaction_;
  OrgMinimaObjectsWitness *mWitness_;
  OrgMinimaObjectsTransaction *mBurnTransaction_;
  OrgMinimaObjectsWitness *mBurnWitness_;
  OrgMinimaObjectsBaseMiniNumber *mBlockNumber_;
  OrgMinimaObjectsBaseMiniData *mParent_;
  OrgMinimaObjectsBaseMiniData *mBlockDifficulty_;
  JavaUtilArrayList *mTxPowIDList_;
  OrgMinimaObjectsBaseMiniData *_mTxPOWID_;
  OrgMinimaObjectsBaseMiniData *_mTransID_;
}

@end

J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mNonce_, OrgMinimaObjectsBaseMiniInteger *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTimeSecs_, OrgMinimaObjectsBaseMiniNumber *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTxnDifficulty_, OrgMinimaObjectsBaseMiniData *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTransaction_, OrgMinimaObjectsTransaction *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mWitness_, OrgMinimaObjectsWitness *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBurnTransaction_, OrgMinimaObjectsTransaction *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBurnWitness_, OrgMinimaObjectsWitness *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBlockNumber_, OrgMinimaObjectsBaseMiniNumber *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mParent_, OrgMinimaObjectsBaseMiniData *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mBlockDifficulty_, OrgMinimaObjectsBaseMiniData *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, mTxPowIDList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, _mTxPOWID_, OrgMinimaObjectsBaseMiniData *)
J2OBJC_FIELD_SETTER(OrgMinimaObjectsTxPOW, _mTransID_, OrgMinimaObjectsBaseMiniData *)

@implementation OrgMinimaObjectsTxPOW

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMinimaObjectsTxPOW_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setNonceWithOrgMinimaObjectsBaseMiniInteger:(OrgMinimaObjectsBaseMiniInteger *)zNonce {
  mNonce_ = zNonce;
}

- (OrgMinimaObjectsBaseMiniInteger *)getNonce {
  return mNonce_;
}

- (void)setChainIDWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zChainID {
  mChainID_ = zChainID;
}

- (void)setParentChainIDWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zChainID {
  mParentChainID_ = zChainID;
}

- (OrgMinimaObjectsBaseMiniData *)getChainID {
  return mChainID_;
}

- (OrgMinimaObjectsBaseMiniData *)getParentChainID {
  return mParentChainID_;
}

- (void)setCustomWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zCustom {
  mCustom_ = zCustom;
}

- (OrgMinimaObjectsBaseMiniData *)getCustom {
  return mCustom_;
}

- (void)setTxDifficultyWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zDifficulty {
  mTxnDifficulty_ = zDifficulty;
}

- (OrgMinimaObjectsBaseMiniData *)getTxnDifficulty {
  return mTxnDifficulty_;
}

- (void)setTimeSecsWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zSecs {
  mTimeSecs_ = zSecs;
}

- (OrgMinimaObjectsTransaction *)getTransaction {
  return mTransaction_;
}

- (OrgMinimaObjectsTransaction *)getBurnTransaction {
  return mBurnTransaction_;
}

- (void)setTransactionWithOrgMinimaObjectsTransaction:(OrgMinimaObjectsTransaction *)zTran {
  mTransaction_ = zTran;
}

- (void)addBlockTxPOWWithOrgMinimaObjectsTxPOW:(OrgMinimaObjectsTxPOW *)zTxPOW {
  [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) addWithId:[((OrgMinimaObjectsTxPOW *) nil_chk(zTxPOW)) getTxPowID]];
}

- (JavaUtilArrayList *)getBlockTransactions {
  return mTxPowIDList_;
}

- (OrgMinimaObjectsBaseMiniData *)getBlockDifficulty {
  return mBlockDifficulty_;
}

- (void)setBlockDifficultyWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zBlockDifficulty {
  mBlockDifficulty_ = zBlockDifficulty;
}

- (void)setParentWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zData {
  mParent_ = zData;
}

- (OrgMinimaObjectsBaseMiniData *)getParentID {
  return mParent_;
}

- (OrgMinimaObjectsBaseMiniData *)getSuperParentWithInt:(jint)zLevel {
  return IOSObjectArray_Get(nil_chk(mSuperParents_), zLevel);
}

- (OrgMinimaObjectsBaseMiniNumber *)getTimeSecs {
  return mTimeSecs_;
}

- (void)setBlockNumberWithOrgMinimaObjectsBaseMiniNumber:(OrgMinimaObjectsBaseMiniNumber *)zBlockNum {
  mBlockNumber_ = zBlockNum;
}

- (OrgMinimaObjectsBaseMiniNumber *)getBlockNumber {
  return mBlockNumber_;
}

- (void)setWitnessWithOrgMinimaObjectsWitness:(OrgMinimaObjectsWitness *)zWitness {
  mWitness_ = zWitness;
}

- (OrgMinimaObjectsWitness *)getWitness {
  return mWitness_;
}

- (OrgMinimaObjectsWitness *)getBurnWitness {
  return mBurnWitness_;
}

- (OrgMinimaObjectsBaseMiniData *)getMMRRoot {
  return mMMRRoot_;
}

- (void)setMMRRootWithOrgMinimaObjectsBaseMiniData:(OrgMinimaObjectsBaseMiniData *)zRoot {
  mMMRRoot_ = zRoot;
}

- (OrgMinimaObjectsBaseMMRSumNumber *)getMMRTotal {
  return mMMRTotal_;
}

- (void)setMMRTotalWithOrgMinimaObjectsBaseMMRSumNumber:(OrgMinimaObjectsBaseMMRSumNumber *)zTotal {
  mMMRTotal_ = zTotal;
}

- (OrgMinimaUtilsJsonJSONObject *)toJSON {
  OrgMinimaUtilsJsonJSONObject *txpow = new_OrgMinimaUtilsJsonJSONObject_init();
  (void) [txpow putWithId:@"block" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockNumber_)) description]];
  (void) [txpow putWithId:@"isblock" withId:JavaLangBoolean_valueOfWithBoolean_(_mIsBlockPOW_)];
  (void) [txpow putWithId:@"txpowid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(_mTxPOWID_)) description]];
  (void) [txpow putWithId:@"parent" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mParent_)) description]];
  OrgMinimaUtilsJsonJSONArray *supers = new_OrgMinimaUtilsJsonJSONArray_init();
  OrgMinimaObjectsBaseMiniData *old = nil;
  jint counter = 0;
  for (jint i = 0; i < OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS; i++) {
    OrgMinimaObjectsBaseMiniData *curr = IOSObjectArray_Get(nil_chk(mSuperParents_), i);
    if (old == nil) {
      old = curr;
      counter++;
    }
    else {
      if ([old isEqualWithOrgMinimaObjectsBaseMiniData:curr]) {
        counter++;
        if (i == OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS - 1) {
          OrgMinimaUtilsJsonJSONObject *sp = new_OrgMinimaUtilsJsonJSONObject_init();
          (void) [sp putWithId:@"difficulty" withId:JavaLangInteger_valueOfWithInt_(i)];
          (void) [sp putWithId:@"count" withId:JavaLangInteger_valueOfWithInt_(counter)];
          (void) [sp putWithId:@"parent" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(curr)) to0xString]];
          [supers addWithId:sp];
        }
      }
      else {
        OrgMinimaUtilsJsonJSONObject *sp = new_OrgMinimaUtilsJsonJSONObject_init();
        (void) [sp putWithId:@"difficulty" withId:JavaLangInteger_valueOfWithInt_(i)];
        (void) [sp putWithId:@"count" withId:JavaLangInteger_valueOfWithInt_(counter)];
        (void) [sp putWithId:@"parent" withId:[old to0xString]];
        [supers addWithId:sp];
        old = curr;
        counter = 1;
      }
    }
  }
  (void) [txpow putWithId:@"superparents" withId:supers];
  (void) [txpow putWithId:@"blkdiff" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mBlockDifficulty_)) to0xString]];
  (void) [txpow putWithId:@"superblock" withId:JavaLangInteger_valueOfWithInt_(_mSuperBlock_)];
  (void) [txpow putWithId:@"txndiff" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mTxnDifficulty_)) to0xString]];
  (void) [txpow putWithId:@"txn" withId:[((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) toJSON]];
  (void) [txpow putWithId:@"txnid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk([self getTransID])) to0xString]];
  (void) [txpow putWithId:@"witness" withId:[((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) toJSON]];
  (void) [txpow putWithId:@"burntxn" withId:[((OrgMinimaObjectsTransaction *) nil_chk(mBurnTransaction_)) toJSON]];
  (void) [txpow putWithId:@"burnwitness" withId:[((OrgMinimaObjectsWitness *) nil_chk(mBurnWitness_)) toJSON]];
  OrgMinimaUtilsJsonJSONArray *txns = new_OrgMinimaUtilsJsonJSONArray_init();
  for (OrgMinimaObjectsBaseMiniData * __strong txn in nil_chk(mTxPowIDList_)) {
    [txns addWithId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(txn)) to0xString]];
  }
  (void) [txpow putWithId:@"txnlist" withId:txns];
  (void) [txpow putWithId:@"magic" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mMagic_)) description]];
  (void) [txpow putWithId:@"chainid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mChainID_)) description]];
  (void) [txpow putWithId:@"parentchainid" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mParentChainID_)) description]];
  (void) [txpow putWithId:@"custom" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mCustom_)) description]];
  (void) [txpow putWithId:@"nonce" withId:[((OrgMinimaObjectsBaseMiniInteger *) nil_chk(mNonce_)) description]];
  (void) [txpow putWithId:@"mmr" withId:[((OrgMinimaObjectsBaseMiniData *) nil_chk(mMMRRoot_)) description]];
  (void) [txpow putWithId:@"total" withId:[((OrgMinimaObjectsBaseMMRSumNumber *) nil_chk(mMMRTotal_)) description]];
  (void) [txpow putWithId:@"timesecs" withId:[((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeSecs_)) description]];
  (void) [txpow putWithId:@"date" withId:[new_JavaUtilDate_initWithLong_([((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeSecs_)) getAsLong] * 1000) description]];
  return txpow;
}

- (NSString *)description {
  return [((OrgMinimaUtilsJsonJSONObject *) nil_chk([self toJSON])) description];
}

- (void)writeDataStreamWithJavaIoDataOutputStream:(JavaIoDataOutputStream *)zOut {
  [((OrgMinimaObjectsBaseMiniInteger *) nil_chk(mNonce_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mMagic_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mChainID_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mParentChainID_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mCustom_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mTimeSecs_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mTxnDifficulty_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsTransaction *) nil_chk(mBurnTransaction_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsWitness *) nil_chk(mBurnWitness_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(mBlockNumber_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mParent_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mBlockDifficulty_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  OrgMinimaObjectsBaseMiniData *old = nil;
  jint counter = 0;
  for (jint i = 0; i < OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS; i++) {
    OrgMinimaObjectsBaseMiniData *curr = IOSObjectArray_Get(nil_chk(mSuperParents_), i);
    if (old == nil) {
      old = curr;
      counter++;
    }
    else {
      if ([old isEqualWithOrgMinimaObjectsBaseMiniData:curr]) {
        counter++;
        if (i == OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS - 1) {
          OrgMinimaObjectsBaseMiniByte *count = new_OrgMinimaObjectsBaseMiniByte_initWithInt_(counter);
          [count writeDataStreamWithJavaIoDataOutputStream:zOut];
          [((OrgMinimaObjectsBaseMiniData *) nil_chk(curr)) writeDataStreamWithJavaIoDataOutputStream:zOut];
        }
      }
      else {
        OrgMinimaObjectsBaseMiniByte *count = new_OrgMinimaObjectsBaseMiniByte_initWithInt_(counter);
        [count writeDataStreamWithJavaIoDataOutputStream:zOut];
        [old writeDataStreamWithJavaIoDataOutputStream:zOut];
        old = curr;
        counter = 1;
      }
    }
  }
  jint len = [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) size];
  OrgMinimaObjectsBaseMiniNumber *ramlen = new_OrgMinimaObjectsBaseMiniNumber_initWithNSString_(JreStrcat("I", len));
  [ramlen writeDataStreamWithJavaIoDataOutputStream:zOut];
  for (OrgMinimaObjectsBaseMiniData * __strong txpowid in nil_chk(mTxPowIDList_)) {
    [((OrgMinimaObjectsBaseMiniData *) nil_chk(txpowid)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  }
  [((OrgMinimaObjectsBaseMiniData *) nil_chk(mMMRRoot_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
  [((OrgMinimaObjectsBaseMMRSumNumber *) nil_chk(mMMRTotal_)) writeDataStreamWithJavaIoDataOutputStream:zOut];
}

- (void)readDataStreamWithJavaIoDataInputStream:(JavaIoDataInputStream *)zIn {
  mNonce_ = OrgMinimaObjectsBaseMiniInteger_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mMagic_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mChainID_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mParentChainID_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mCustom_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mTimeSecs_ = OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mTxnDifficulty_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  [((OrgMinimaObjectsTransaction *) nil_chk(mTransaction_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsWitness *) nil_chk(mWitness_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsTransaction *) nil_chk(mBurnTransaction_)) readDataStreamWithJavaIoDataInputStream:zIn];
  [((OrgMinimaObjectsWitness *) nil_chk(mBurnWitness_)) readDataStreamWithJavaIoDataInputStream:zIn];
  mBlockNumber_ = OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mParent_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mBlockDifficulty_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  jint tot = 0;
  while (tot < OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS) {
    OrgMinimaObjectsBaseMiniByte *len = OrgMinimaObjectsBaseMiniByte_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    OrgMinimaObjectsBaseMiniData *sup = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
    jint count = [((OrgMinimaObjectsBaseMiniByte *) nil_chk(len)) getValue];
    for (jint i = 0; i < count; i++) {
      (void) IOSObjectArray_Set(nil_chk(mSuperParents_), tot++, sup);
    }
  }
  mTxPowIDList_ = new_JavaUtilArrayList_init();
  OrgMinimaObjectsBaseMiniNumber *ramlen = OrgMinimaObjectsBaseMiniNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  jint len = [((OrgMinimaObjectsBaseMiniNumber *) nil_chk(ramlen)) getAsInt];
  for (jint i = 0; i < len; i++) {
    [((JavaUtilArrayList *) nil_chk(mTxPowIDList_)) addWithId:OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn)];
  }
  mMMRRoot_ = OrgMinimaObjectsBaseMiniData_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  mMMRTotal_ = OrgMinimaObjectsBaseMMRSumNumber_ReadFromStreamWithJavaIoDataInputStream_(zIn);
  [self calculateTXPOWID];
}

- (OrgMinimaObjectsBaseMiniData *)getTxPowID {
  return _mTxPOWID_;
}

- (OrgMinimaObjectsBaseMiniData *)getTransID {
  return _mTransID_;
}

- (jint)getSuperLevel {
  return _mSuperBlock_;
}

- (jboolean)isBlock {
  return _mIsBlockPOW_;
}

- (jboolean)isTransaction {
  return _mIsTxnPOW_;
}

- (void)calculateTXPOWID {
  _mTxPOWID_ = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:self];
  _mTransID_ = [((OrgMinimaUtilsCrypto *) nil_chk(OrgMinimaUtilsCrypto_getInstance())) hashObjectWithOrgMinimaUtilsStreamable:mTransaction_];
  _mIsBlockPOW_ = false;
  if ([((OrgMinimaObjectsBaseMiniData *) nil_chk(_mTxPOWID_)) isLessWithOrgMinimaObjectsBaseMiniData:[self getBlockDifficulty]]) {
    _mIsBlockPOW_ = true;
  }
  _mIsTxnPOW_ = false;
  if ([((OrgMinimaObjectsBaseMiniData *) nil_chk(_mTxPOWID_)) isLessWithOrgMinimaObjectsBaseMiniData:[self getTxnDifficulty]] && ![((OrgMinimaObjectsTransaction *) nil_chk([self getTransaction])) isEmpty]) {
    _mIsTxnPOW_ = true;
  }
  _mSuperBlock_ = OrgMinimaUtilsSuperBlockLevels_getSuperLevelWithOrgMinimaObjectsBaseMiniData_withOrgMinimaObjectsBaseMiniData_([self getBlockDifficulty], _mTxPOWID_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsTransaction;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 8, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsWitness;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsWitness;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMMRSumNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaUtilsJsonJSONObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, 27, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMinimaObjectsBaseMiniData;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setNonceWithOrgMinimaObjectsBaseMiniInteger:);
  methods[2].selector = @selector(getNonce);
  methods[3].selector = @selector(setChainIDWithOrgMinimaObjectsBaseMiniData:);
  methods[4].selector = @selector(setParentChainIDWithOrgMinimaObjectsBaseMiniData:);
  methods[5].selector = @selector(getChainID);
  methods[6].selector = @selector(getParentChainID);
  methods[7].selector = @selector(setCustomWithOrgMinimaObjectsBaseMiniData:);
  methods[8].selector = @selector(getCustom);
  methods[9].selector = @selector(setTxDifficultyWithOrgMinimaObjectsBaseMiniData:);
  methods[10].selector = @selector(getTxnDifficulty);
  methods[11].selector = @selector(setTimeSecsWithOrgMinimaObjectsBaseMiniNumber:);
  methods[12].selector = @selector(getTransaction);
  methods[13].selector = @selector(getBurnTransaction);
  methods[14].selector = @selector(setTransactionWithOrgMinimaObjectsTransaction:);
  methods[15].selector = @selector(addBlockTxPOWWithOrgMinimaObjectsTxPOW:);
  methods[16].selector = @selector(getBlockTransactions);
  methods[17].selector = @selector(getBlockDifficulty);
  methods[18].selector = @selector(setBlockDifficultyWithOrgMinimaObjectsBaseMiniData:);
  methods[19].selector = @selector(setParentWithOrgMinimaObjectsBaseMiniData:);
  methods[20].selector = @selector(getParentID);
  methods[21].selector = @selector(getSuperParentWithInt:);
  methods[22].selector = @selector(getTimeSecs);
  methods[23].selector = @selector(setBlockNumberWithOrgMinimaObjectsBaseMiniNumber:);
  methods[24].selector = @selector(getBlockNumber);
  methods[25].selector = @selector(setWitnessWithOrgMinimaObjectsWitness:);
  methods[26].selector = @selector(getWitness);
  methods[27].selector = @selector(getBurnWitness);
  methods[28].selector = @selector(getMMRRoot);
  methods[29].selector = @selector(setMMRRootWithOrgMinimaObjectsBaseMiniData:);
  methods[30].selector = @selector(getMMRTotal);
  methods[31].selector = @selector(setMMRTotalWithOrgMinimaObjectsBaseMMRSumNumber:);
  methods[32].selector = @selector(toJSON);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(writeDataStreamWithJavaIoDataOutputStream:);
  methods[35].selector = @selector(readDataStreamWithJavaIoDataInputStream:);
  methods[36].selector = @selector(getTxPowID);
  methods[37].selector = @selector(getTransID);
  methods[38].selector = @selector(getSuperLevel);
  methods[39].selector = @selector(isBlock);
  methods[40].selector = @selector(isTransaction);
  methods[41].selector = @selector(calculateTXPOWID);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNonce_", "LOrgMinimaObjectsBaseMiniInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTimeSecs_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTxnDifficulty_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransaction_", "LOrgMinimaObjectsTransaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWitness_", "LOrgMinimaObjectsWitness;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBurnTransaction_", "LOrgMinimaObjectsTransaction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBurnWitness_", "LOrgMinimaObjectsWitness;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBlockNumber_", "LOrgMinimaObjectsBaseMiniNumber;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParent_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBlockDifficulty_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTxPowIDList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "mSuperParents_", "[LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMMRRoot_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMMRTotal_", "LOrgMinimaObjectsBaseMMRSumNumber;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMagic_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mChainID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mParentChainID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCustom_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "_mTxPOWID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mTransID_", "LOrgMinimaObjectsBaseMiniData;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_mIsBlockPOW_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_mIsTxnPOW_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "_mSuperBlock_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setNonce", "LOrgMinimaObjectsBaseMiniInteger;", "setChainID", "LOrgMinimaObjectsBaseMiniData;", "setParentChainID", "setCustom", "setTxDifficulty", "setTimeSecs", "LOrgMinimaObjectsBaseMiniNumber;", "setTransaction", "LOrgMinimaObjectsTransaction;", "addBlockTxPOW", "LOrgMinimaObjectsTxPOW;", "()Ljava/util/ArrayList<Lorg/minima/objects/base/MiniData;>;", "setBlockDifficulty", "setParent", "getSuperParent", "I", "setBlockNumber", "setWitness", "LOrgMinimaObjectsWitness;", "setMMRRoot", "setMMRTotal", "LOrgMinimaObjectsBaseMMRSumNumber;", "toString", "writeDataStream", "LJavaIoDataOutputStream;", "LJavaIoIOException;", "readDataStream", "LJavaIoDataInputStream;", "Ljava/util/ArrayList<Lorg/minima/objects/base/MiniData;>;" };
  static const J2ObjcClassInfo _OrgMinimaObjectsTxPOW = { "TxPOW", "org.minima.objects", ptrTable, methods, fields, 7, 0x1, 42, 23, -1, -1, -1, -1, -1 };
  return &_OrgMinimaObjectsTxPOW;
}

@end

void OrgMinimaObjectsTxPOW_init(OrgMinimaObjectsTxPOW *self) {
  NSObject_init(self);
  self->mNonce_ = new_OrgMinimaObjectsBaseMiniInteger_initWithInt_(0);
  self->mTimeSecs_ = new_OrgMinimaObjectsBaseMiniNumber_init();
  self->mTxnDifficulty_ = new_OrgMinimaObjectsBaseMiniData_init();
  self->mTransaction_ = new_OrgMinimaObjectsTransaction_init();
  self->mWitness_ = new_OrgMinimaObjectsWitness_init();
  self->mBurnTransaction_ = new_OrgMinimaObjectsTransaction_init();
  self->mBurnWitness_ = new_OrgMinimaObjectsWitness_init();
  self->mBlockNumber_ = new_OrgMinimaObjectsBaseMiniNumber_init();
  self->mParent_ = new_OrgMinimaObjectsBaseMiniData_init();
  self->mBlockDifficulty_ = new_OrgMinimaObjectsBaseMiniData_init();
  self->mSuperParents_ = [IOSObjectArray newArrayWithLength:OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS type:OrgMinimaObjectsBaseMiniData_class_()];
  self->mMMRRoot_ = new_OrgMinimaObjectsBaseMiniData_init();
  self->mMMRTotal_ = JreLoadStatic(OrgMinimaObjectsBaseMMRSumNumber, ZERO);
  self->mMagic_ = OrgMinimaObjectsBaseMiniData_getRandomDataWithInt_(32);
  self->mChainID_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->mParentChainID_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->mCustom_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->_mTxPOWID_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->_mTransID_ = new_OrgMinimaObjectsBaseMiniData_initWithNSString_(@"0x00");
  self->_mIsBlockPOW_ = false;
  self->_mIsTxnPOW_ = false;
  self->_mSuperBlock_ = 0;
  self->mTxPowIDList_ = new_JavaUtilArrayList_init();
  for (jint i = 0; i < OrgMinimaGlobalParams_MINIMA_CASCADE_LEVELS; i++) {
    (void) IOSObjectArray_SetAndConsume(nil_chk(self->mSuperParents_), i, new_OrgMinimaObjectsBaseMiniData_init());
  }
}

OrgMinimaObjectsTxPOW *new_OrgMinimaObjectsTxPOW_init() {
  J2OBJC_NEW_IMPL(OrgMinimaObjectsTxPOW, init)
}

OrgMinimaObjectsTxPOW *create_OrgMinimaObjectsTxPOW_init() {
  J2OBJC_CREATE_IMPL(OrgMinimaObjectsTxPOW, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMinimaObjectsTxPOW)
