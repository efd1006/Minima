{"version":3,"sources":["./src/app/mini-status/mini-status.page.html","./src/app/mini-status/mini-status.module.ts","./src/app/mini-status/mini-status.page.scss","./src/app/mini-status/mini-status.page.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2WAA2W,oNAAoN,iBAAiB,moBAAmoB,oBAAoB,oDAAoD,QAAQ,+hBAA+hB,QAAQ,8hBAA8hB,cAAc,8hBAA8hB,QAAQ,kLAAkL,cAAc,8E;;;;;;;;;;;;;;;;;;;;;;ACAnjG;AACM;AACF;AACU;AAEV;AAEO;AAEpD,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gEAAc;KAC1B;CACF,CAAC;AAWF,IAAa,oBAAoB,GAAjC,MAAa,oBAAoB;CAAG;AAAvB,oBAAoB;IAThC,8DAAQ,CAAC;QACR,OAAO,EAAE;YACP,4DAAY;YACZ,0DAAW;YACX,0DAAW;YACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;SAC9B;QACD,YAAY,EAAE,CAAC,gEAAc,CAAC;KAC/B,CAAC;GACW,oBAAoB,CAAG;AAAH;;;;;;;;;;;;ACzBjC,mCAAmC,gBAAgB,kBAAkB,uBAAuB,GAAG,8BAA8B,uBAAuB,mBAAmB,GAAG,6CAA6C,+3B;;;;;;;;;;;;;;;;;;ACA9I;AAER;AASjE,IAAa,cAAc,GAA3B,MAAa,cAAc;IAgBzB,YAAoB,GAAqB;QAArB,QAAG,GAAH,GAAG,CAAkB;QALjC,SAAI,GAAG,EAAE,CAAC;QACV,WAAM,GAAQ,IAAI,CAAC;IAIkB,CAAC;IAF9C,QAAQ,KAAK,CAAC;IAId,gBAAgB;QACd,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,eAAe;QACb,6BAA6B;IAC/B,CAAC;IAED,YAAY;QACV,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,CAAC,GAAS,EAAE,EAAE;YAGtC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpC,wBAAwB;YACxB,IAAG,GAAG,CAAC,MAAM,KAAK,IAAI,EAAC;gBACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;aAExB;iBAAM;gBACL,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;aACzB;YACD,oBAAoB;YACpB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC;YAC1C,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC;YAC9C,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;YACvC,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC;YAC9C,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;QAGhC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,IAAG,IAAI,CAAC,MAAM,IAAI,QAAQ,EAAE;YAC1B,OAAO,OAAO,CAAC;SAChB;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;CA+CF;;YAtF0B,4EAAgB;;AAhB9B,cAAc;IAN1B,+DAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;QAC3B,yJAAsC;;KAEvC,CAAC;2EAkByB,4EAAgB;GAhB9B,cAAc,CAsG1B;AAtG0B","file":"mini-status-mini-status-module-es2015.js","sourcesContent":["module.exports = \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Status\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <!-- Block Generated vs Time elapsed Chart -->\\n  <ion-card class=\\\"welcome-card\\\" style=\\\"background-color:#00AAC8;\\\">\\n    <ion-card-header id=\\\"status-header\\\">\\n      <ion-card-title>\\n        <ion-item>\\n          <ion-icon align-self-start src=\\\"../../assets/icon/minima.svg\\\" size=\\\"2\\\"></ion-icon>\\n          Minima  v{{ versionNumber }}\\n        </ion-item>\\n      </ion-card-title>\\n    </ion-card-header>\\n\\n\\n    <ion-card-content id=\\\"status-content\\\">\\n      <ion-list lines=\\\"none\\\">\\n        <ion-grid no-padding>\\n          <ion-row>\\n            <ion-col size=\\\"2\\\">\\n              <ion-item >\\n                <ion-icon align-self-center name=\\\"checkmark\\\" size=\\\"2\\\"></ion-icon>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"6\\\">\\n              <ion-item>\\n                Your node's status\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"4\\\">\\n              <ion-item \\n              [ngStyle] = \\\" {'color': getColor()}\\\"\\n               #statusColor>\\n                {{status}}\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n          <!-- New Row -->\\n          <ion-row>\\n            <ion-col size=\\\"2\\\">\\n              <ion-item>\\n                <ion-icon align-self-center name=\\\"checkmark\\\" size=\\\"2\\\"></ion-icon>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"6\\\">\\n              <ion-item>\\n                Current uptime\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"4\\\">\\n              <ion-item>\\n                {{upTime}}\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n          <!-- New Row -->\\n          <ion-row>\\n            <ion-col size=\\\"2\\\">\\n              <ion-item>\\n                <ion-icon align-self-center name=\\\"checkmark\\\" size=\\\"2\\\"></ion-icon>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"6\\\">\\n              <ion-item>\\n                String uptime\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"4\\\">\\n              <ion-item>\\n                {{stringUptime}}\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n          <!-- New Row -->\\n          <ion-row>\\n            <ion-col size=\\\"2\\\">\\n              <ion-item>\\n                <ion-icon align-self-center name=\\\"checkmark\\\" size=\\\"2\\\"></ion-icon>\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"6\\\">\\n              <ion-item>\\n                Configured at\\n              </ion-item>\\n            </ion-col>\\n            <ion-col size=\\\"4\\\">\\n              <ion-item>\\n                {{ conf }}\\n              </ion-item>\\n            </ion-col>\\n          </ion-row>\\n\\n        </ion-grid>\\n      </ion-list>\\n      \\n      <!-- <div id=\\\"highcharts\\\" style=\\\"width:100%; height:250px;\\\"></div> -->\\n    </ion-card-content>\\n  </ion-card>\\n\\n\\n\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MiniStatusPage } from './mini-status.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MiniStatusPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [MiniStatusPage]\n})\nexport class MiniStatusPageModule {}\n","module.exports = \"#status-content {\\n  width: 100%;\\n  padding: 20px;\\n  border-radius: 20%;\\n}\\n\\n#status-content ion-icon {\\n  padding-left: 40px;\\n  color: #FF671D;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lbGlhcy9Qcm9qZWN0cy9taW5pbWFjb3JlL21vYmlsZS1hcHAtZnJvbnQtZW5kL2FwcC9zcmMvYXBwL21pbmktc3RhdHVzL21pbmktc3RhdHVzLnBhZ2Uuc2NzcyIsInNyYy9hcHAvbWluaS1zdGF0dXMvbWluaS1zdGF0dXMucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0ksV0FBQTtFQUNBLGFBQUE7RUFDQSxrQkFBQTtBQ0FKOztBRElBO0VBQ0ksa0JBQUE7RUFDQSxjQUFBO0FDREoiLCJmaWxlIjoic3JjL2FwcC9taW5pLXN0YXR1cy9taW5pLXN0YXR1cy5wYWdlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbiNzdGF0dXMtY29udGVudCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgcGFkZGluZzogMjBweDtcbiAgICBib3JkZXItcmFkaXVzOiAyMCU7O1xufVxuXG5cbiNzdGF0dXMtY29udGVudCBpb24taWNvbiB7XG4gICAgcGFkZGluZy1sZWZ0OiA0MHB4O1xuICAgIGNvbG9yOiAjRkY2NzFEO1xufSIsIiNzdGF0dXMtY29udGVudCB7XG4gIHdpZHRoOiAxMDAlO1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3JkZXItcmFkaXVzOiAyMCU7XG59XG5cbiNzdGF0dXMtY29udGVudCBpb24taWNvbiB7XG4gIHBhZGRpbmctbGVmdDogNDBweDtcbiAgY29sb3I6ICNGRjY3MUQ7XG59Il19 */\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport * as HighCharts from 'highcharts';\nimport { MinimaApiService } from '../service/minima-api.service';\nimport { Url } from 'url';\n\n@Component({\n  selector: 'app-mini-status',\n  templateUrl: './mini-status.page.html',\n  styleUrls: ['./mini-status.page.scss'],\n})\n\nexport class MiniStatusPage implements OnInit {\n\n  // @ViewChild('statusColor', {static : false}) statusRef : ElementRef;\n\n  blocksGenerated : number;\n  versionNumber : number;\n  timeElapsed: number;\n  upTime : string;\n  stringUptime : string;\n  status: string;\n  conf: string;\n  private host = '';\n  private loader: any = null;\n \n  ngOnInit() { }\n\n  constructor(private api: MinimaApiService) { }\n\n  ionViewWillEnter() {\n    this.updateStatus();\n  }\n\n  ionViewDidEnter() {\n    // this.plotSimpleBarChart();\n  }\n\n  updateStatus() {\n    this.api.getStatus().then((res : any) => {\n\n\n      console.log(res.response.tip.Block);\n      // Check node's status..\n      if(res.status === true){\n        this.status = \"Online\";\n        \n      } else {\n        this.status = \"Offline\";\n      }\n      // fetch json vars..\n      this.versionNumber = res.response.version;\n      this.blocksGenerated = res.response.tip.Block;\n      this.upTime = res.response.milliuptime;\n      this.stringUptime = res.response.stringuptime;\n      this.conf = res.response.conf;\n      \n    \n    });\n  }\n\n  getColor() {\n    if(this.status == \"Online\") {\n      return 'green';\n    } else {\n      return 'red';\n    }\n  }\n  // plotSimpleBarChart() {\n  //   let myChart = HighCharts.chart('highcharts', {\n  //     chart: {\n  //       type: 'line'\n  //     },\n\n  //     title: {\n  //       text: 'MiniBlocks Generated/Time Elapsed'\n  //     },\n\n  //     xAxis: {\n  //       categories: [0, 1000000, 300000]\n  //     },\n\n  //     yAxis: {\n  //       title: {\n  //         text: 'MiniBlocks (TxPoW)'\n  //       },\n  //       plotLines: [{\n  //         value: 0,\n  //         width: 1,\n  //         color: '#808080'\n  //       }]\n  //     },\n\n  //     tooltip: {\n  //       valueSuffix: '\\xB0C'\n  //     },\n\n  //     legend: {\n  //       layout: 'vertical',\n  //       align: 'right',\n  //       verticalAlign: 'middle',\n  //       borderWidth: 0\n  //     },\n  //     series: [\n  //       {\n  //         name: 'BLOCKS MINED.',\n  //         data: [0, 3000, 5000]\n  //       }\n  //     ]\n  //   });\n\n  // }\n\n  \n}\n"],"sourceRoot":""}